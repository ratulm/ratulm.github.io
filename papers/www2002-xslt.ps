%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: XSLT to SQL
%%Pages: 11
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Helvetica-Bold Helvetica Times-Bold Times-Roman
%%+ Times-Italic Courier Helvetica-Oblique Helvetica-BoldOblique
%%+ Times-BoldItalic Courier-Bold Courier-Oblique Courier-BoldOblique
%%+ Symbol
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips p226-jain.dvi -o p226-jain.ps
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2002.03.05:1858
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: 8r.enc
% @@psencodingfile@{
%   author = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry",
%   version = "0.6",
%   date = "1 July 1998",
%   filename = "8r.enc",
%   email = "tex-fonts@@tug.org",
%   docstring = "Encoding for TrueType or Type 1 fonts
%                to be used with TeX."
% @}
% 
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both 
% ASCII and Windows.
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /.notdef /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def

%%EndProcSet
%%BeginProcSet: texnansi.enc
% @psencodingfile{
%   author = "Y&Y, Inc.",
%   version = "1.1",
%   date = "1 December 1996",
%   filename = "texnansi.enc",
%   email = "help@YandY.com",
%   address = "45 Walden Street // Concord, MA 01742, USA",
%   codetable = "ISO/ASCII",
%   checksum = "xx",
%   docstring = "Encoding for fonts in Adobe Type 1 format for use with TeX."
% }
%
% The idea is to have all 228 characters normally included in Type 1 text
% fonts (plus a few more) available for typesetting.  This is effectively
% the character set in Adobe Standard Encoding, ISO Latin 1, plus a few more.
%
% Character code assignments were made as follows:
%
% (1) The character layout largely matches `ASCII' in the 32 -- 126 range,
% except for `circumflex' in 94 and `tilde' in 126, to match `TeX text'
% (`asciicircumflex' and `asciitilde' appear in 158 and 142 instead).
%
% (2) The character layout matches `Windows ANSI' in almost all places,
% except for `quoteright' in 39 and `quoteleft' in 96 to match ASCII
% (`quotesingle' and `grave' appear in 129 and 18 instead).
%
% (3) The character layout matches `TeX typewriter' used by CM text fonts
% in most places (except for discordant positions such as hungarumlaut
% (instead of braceright), dotaccent (instead of underscore) etc.
%
% (4) Remaining characters are assigned arbitrarily to the `control character'
% range (0 -- 31), avoiding 0, 9, 10 and 13 in case we meet dumb software
% - similarly one should really avoid 127 and 128 if possible.
% In addition, the 8 open slots in Windows ANSI between 128 and 159 are used.
%
% (5) Y&Y Lucida Bright includes some extra ligatures and such; ff, ffi, ffl,
% and `dotlessj,' these are included 11 -- 15, and 17.
%
% (6) Hyphen appears both at 45 and 173 for compatibility with both ASCII
% and Windows ANSI.
%
% (7) It doesn't really matter where ligatures appear (both real, such as ffi,
% and pseudo such as ---) since these should not be accessed directly, only
% via ligature information in the TFM file.
%
% SAMPLE USAGE (in `psfonts.map' file for DVIPS):
% 
% lbr LucidaBright "TeXnANSIEncoding ReEncodeFont" <texnansi.enc <lbr.pfb
%
% This tells DVIPS that the font called `lbr' in TeX has PostScript 
% FontName `LucidaBright.'  It also asks DVIPS to expand the file `lbr.pfb'
% into PFA form, to include the attached `texnansi.enc' encoding vector,
% and to then actually reencode the font based on that encoding vector.
%
% Revised 1996 June 1 by adding second position for `fl' to avoid Acrobat bug.
% Revised 1996 June 1 by adding second position for `fraction' for same reason.
%
/TeXnANSIEncoding [
/.notdef /uni20AC /.notdef /.notdef % 0, 1, 2, 3
/fraction %	4
/dotaccent %	5
/hungarumlaut %	6
/ogonek	%	7
/fl	%	8
/.notdef % /fraction %	9	not used (see 4), backward compatability only
/cwm	%	10	not used, except boundary char internally maybe
/ff    %	11
/fi    %	12
/.notdef % /fl    %	13	not used (see 8), backward compatability only
/ffi   %	14
/ffl   %	15
/dotlessi %	16
/dotlessj %	17
/grave %	18
/acute %	19
/caron %	20
/breve %	21
/macron %	22
/ring  %	23
/cedilla %	24
/germandbls %	25
/ae    %	26
/oe    %	27
/oslash %	28
/AE    %	29
/OE    %	30
/Oslash %	31
/space %	32	% /suppress in TeX text
/exclam %	33
/quotedbl %	34	% /quotedblright in TeX text
/numbersign %	35
/dollar %	36
/percent %	37
/ampersand %	38
/quoteright %	39	% /quotesingle in ANSI
/parenleft %	40
/parenright %	41
/asterisk %	42
/plus  %	43
/comma %	44
/hyphen %	45
/period %	46
/slash %	47
/zero  %	48
/one   %	49
/two   %	50
/three %	51
/four  %	52
/five  %	53
/six   %	54
/seven %	55
/eight %	56
/nine  %	57
/colon %	58
/semicolon %	59
/less  %	60	% /exclamdown in Tex text
/equal %	61
/greater %	62	% /questiondown in TeX text
/question %	63
/at %	64
/A %	65
/B %	66
/C %	67
/D %	68
/E %	69
/F %	70
/G %	71
/H %	72
/I %	73
/J %	74
/K %	75
/L %	76
/M %	77
/N %	78
/O %	79
/P %	80
/Q %	81
/R %	82
/S %	83
/T %	84
/U %	85
/V %	86
/W %	87
/X %	88
/Y %	89
/Z %	90
/bracketleft %	91
/backslash %	92	% /quotedblleft in TeX text
/bracketright %	93
/circumflex %	94	% /asciicircum in ASCII
/underscore %	95	% /dotaccent in TeX text
/quoteleft %	96	% /grave accent in ANSI
/a %	97
/b %	98
/c %	99
/d %	100
/e %	101
/f %	102
/g %	103
/h %	104
/i %	105
/j %	106
/k %	107
/l %	108
/m %	109
/n %	110
/o %	111
/p %	112
/q %	113
/r %	114
/s %	115
/t %	116
/u %	117
/v %	118
/w %	119
/x %	120
/y %	121
/z %	122
/braceleft %	123	% /endash in TeX text
/bar   %	124	% /emdash in TeX test
/braceright %	125	% /hungarumlaut in TeX text
/tilde %	126	% /asciitilde in ASCII
/dieresis %	127	not used (see 168), use higher up instead
/Lslash	%	128	this position is unfortunate, but now too late to fix
/quotesingle %	129
/quotesinglbase %	130
/florin %	131
/quotedblbase %	132
/ellipsis %	133
/dagger %	134
/daggerdbl %	135
/circumflex %	136
/perthousand %	137
/Scaron %	138
/guilsinglleft %	139
/OE    %	140
/Zcaron %	141
/asciicircum %	142
/minus %	143
/lslash %	144
/quoteleft %	145
/quoteright %	146
/quotedblleft %	147
/quotedblright %	148
/bullet %	149
/endash %	150
/emdash %	151
/tilde %	152
/trademark %	153
/scaron %	154
/guilsinglright %	155
/oe    %	156
/zcaron %	157
/asciitilde %	158
/Ydieresis %	159
/nbspace %	160	% /space (no break space)
/exclamdown %	161
/cent  %	162
/sterling %	163
/currency %	164
/yen   %	165
/brokenbar %	166
/section %	167
/dieresis %	168
/copyright %	169
/ordfeminine %	170
/guillemotleft %	171
/logicalnot %	172
/sfthyphen %	173 % /hyphen (hanging hyphen)
/registered %	174
/macron %	175
/degree %	176
/plusminus %	177
/twosuperior %	178
/threesuperior %	179
/acute %	180
/mu    %	181
/paragraph %	182
/periodcentered %	183
/cedilla %	184
/onesuperior %	185
/ordmasculine %	186
/guillemotright %	187
/onequarter %	188
/onehalf %	189
/threequarters %	190
/questiondown %	191
/Agrave %	192
/Aacute %	193
/Acircumflex %	194
/Atilde %	195
/Adieresis %	196
/Aring %	197
/AE    %	198
/Ccedilla %	199
/Egrave %	200
/Eacute %	201
/Ecircumflex %	202
/Edieresis %	203
/Igrave %	204
/Iacute %	205
/Icircumflex %	206
/Idieresis %	207
/Eth   %	208
/Ntilde %	209
/Ograve %	210
/Oacute %	211
/Ocircumflex %	212
/Otilde %	213
/Odieresis %	214
/multiply %	215	% OE in T1
/Oslash %	216
/Ugrave %	217
/Uacute %	218
/Ucircumflex %	219
/Udieresis %	220
/Yacute %	221
/Thorn %	222
/germandbls %	223 % SS in T1
/agrave %	224
/aacute %	225
/acircumflex %	226
/atilde %	227
/adieresis %	228
/aring %	229
/ae    %	230
/ccedilla %	231
/egrave %	232
/eacute %	233
/ecircumflex %	234
/edieresis %	235
/igrave %	236
/iacute %	237
/icircumflex %	238
/idieresis %	239
/eth   %	240
/ntilde %	241
/ograve %	242
/oacute %	243
/ocircumflex %	244
/otilde %	245
/odieresis %	246
/divide %	247	% oe in T1
/oslash %	248
/ugrave %	249
/uacute %	250
/ucircumflex %	251
/udieresis %	252
/yacute %	253
/thorn %	254
/ydieresis %	255	% germandbls in T1
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 40258431 52099146 1000 600 600 (p226-jain.dvi)
@start /Fa 139[21 29 29 1[37 37 42 58 3[21 3[33 37 33
37 16[54 46 54 5[29 2[50 1[54 68[{TeXBase1Encoding ReEncodeFont}18
74.7198 /Times-BoldItalic rf /Fb 138[46 25 36 36 2[46
46 1[25 2[25 46 46 1[41 46 41 1[46 9[76 2[51 46 56 66
4[51 3[66 66 1[56 1[61 56 13[46 46 46 46 2[23 46[{
TeXBase1Encoding ReEncodeFont}30 91.3242 /Times-Italic
rf
%DVIPSBitmapFont: Fc cmsy9 9 4
/Fc 4 113 df<007FB712FCB812FEA26C16FC2F047A943C>0 D<0060153000F815F86C14
01007EEC03F06CEC07E06C6CEB0FC06C6CEB1F806C6CEB3F006C6C137E6C6C5B6C6C485A
90387E03F06D485A90381F8FC090380FDF806DB4C7FC6D5A6D5AA2497E497E90380FDF80
90381F8FC090383F07E090387E03F0496C7E48486C7E4848137E48487F4848EB1F804848
EB0FC048C7EA07E0007EEC03F048EC01F848140000601530252475A43C>2
D<1307497EA639780700F000FCEB01F800FE1303397F870FF0393FC71FE0390FE73F8039
03FFFE0038007FF0EB1FC0A2EB7FF03803FFFE390FE73F80393FC71FE0397F870FF039FE
0703F800FC13010078EB00F039000F8000A66DC7FC1D207CA226>I<1930197819F8A2F0
01F0A2F003E0A2F007C0A2F00F80A2F01F00A2183EA260A260A24D5AA24D5AA24D5AA24D
5AA24DC7FCA2173EA25FA25FA24C5A13C000014B5AEA07E0000F4B5AEA3FF000734B5AEA
E3F800C14BC8FCEA01FC0000153E7F017E5C137F6D5CA26E485A131F6E485A130F6E485A
13076E485A13036E48C9FC1301153E14FC01005B14FEEC7EF8147F6E5AA26E5AA26E5AA2
6E5A92CAFC3D4C7B8340>112 D E
%EndDVIPSBitmapFont
/Fd 219[37 36[{.167 SlantFont TeXBase1Encoding ReEncodeFont}1
74.7198 /Times-Roman rf
%DVIPSBitmapFont: Fe cmmi5 5 2
/Fe 2 63 df<1504151E157EEC01FCEC07F0EC1FC0EC7F00EB03FCEB0FF0EB3FC001FEC7
FCEA03F8EA0FE0EA3F8000FEC8FC12F812FEEA3F80EA0FE0EA03F8EA00FEEB3FC0EB0FF0
EB03FCEB007FEC1FC0EC07F0EC01FCEC007E151E15041F1F7A992D>60
D<124012F012FC127FEA1FC0EA07F0EA01FC38007F80EB1FE0EB07F8EB00FEEC3F80EC0F
E0EC03F8EC00FE153E15FEEC03F8EC0FE0EC3F80ECFE00EB07F8EB1FE0EB7F80D801FCC7
FCEA07F0EA1FC0007FC8FC12FC12F012401F1F7A992D>62 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmr6 6 1
/Ff 1 50 df<137013F0120312FF12FC1200B3A7487E387FFFE0A213217BA01E>49
D E
%EndDVIPSBitmapFont
/Fg 206[25 49[{TeXBase1Encoding ReEncodeFont}1 49.8132
/Times-Roman rf
%DVIPSBitmapFont: Fh cmsy6 6 1
/Fh 1 49 df<EA03C0EA07E0A4EA0FC0A31380121F1300A3121E123EA2123CA25AA31270
A212F05A12600B1A7D9B12>48 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmmi9 9 32
/Fi 32 122 df<123C127EB4FCA21380A2127F123D1201A412031300A25A1206120E120C
121C5A5A126009177A8715>59 D<127012FCB4FCEA7FC0EA1FF0EA07FCEA01FF38007FC0
EB1FF0EB07FCEB01FF9038007FC0EC1FF0EC07FCEC01FF9138007FC0ED1FF0ED07FCED01
FF9238007FC0EE1FF0EE07FCEE01FEA2EE07FCEE1FF0EE7FC0923801FF00ED07FCED1FF0
ED7FC04A48C7FCEC07FCEC1FF0EC7FC04948C8FCEB07FCEB1FF0EB7FC04848C9FCEA07FC
EA1FF0EA7FC048CAFC12FC12702F2E7AA93C>62 D<DB0FF81330DBFFFE137002039038FF
80F0913A0FF807C1E091393FC000E302FFC71277D901FC143FD907F8EC1FC0EB0FE04948
140F495A49C81380491507485A485A4916001207485AA248481506A2485A94C7FC127F5B
A312FF90CBFCA448021FB51280A39239000FF0005FA2161FA25F7E6C153FA26C6C5D167F
6C7E6C6C4AC7FC6D5B6C6CEB039FD801FCEB0F0F3A00FF807E0E90393FFFF806010F01E0
C8FC010190C9FC34377CB43C>71 D<0107B512E05BA29039001FF0005DA25DA2143FA25D
A2147FA292C7FCA25CA25CA21301A25CA21303A25CA21307A25CA2130FA25CA2131FA25C
A2133FA25CA2137FA291C8FC5B007F13FEB5FCA223337EB222>73
D<010FB512F0A39026003FE0C7FC5DA25DA2147FA292C8FCA25CA25CA21301A25CA21303
A25CA21307A25CA2130FA25C170C011F151C17185C1738013F153017705C17E0137F1601
91C7EA03C0160749EC0F80161F49147F0001913803FF00B8FCA25E2E337DB234>76
D<90260FFFE049B5FCA281D9001F9138000FE04A6CEC07801900DA33FC1406A2DA71FE14
0E180C146081DAE07F141C701318ECC03F82010116386F6C133014806F7E010316706F6C
136014001503496E13E003015C0106801500010EECFF0160010CEC7F81A2011CEC3FC395
C7FC0118EC1FE3A20138EC0FF717F60130140717FE017014035F01601401A213E0705A12
01D807F01578B57E1730A240337DB23D>78 D<ED07FC92387FFFC0913901F807F091390F
E001F891391F80007E027EC77E4AEC1F80EB03F04948EC0FC04948EC07E0495A013F16F0
49C8FC01FE15034916F81201485AA2485AA2120F5B001F16075B123FA34848ED0FF0A3EF
1FE0A290C9FC48EE3FC0A21880177F6C17005F5F4C5A4C5A6C7E4C5A001F4B5A6D4A5A00
0F4B5A6D027EC7FC00075D6C6C495A6C6CEB07E0D800FEEB1F8090263F80FEC8FC90380F
FFF80101138035377DB43A>I<010FB612F017FE83903B003FC0007FC0EF1FE0EF07F05D
EF03F8147FA292C713FCA25CEF07F85CA2010116F0170F4A15E0EF1FC00103ED3F80EF7F
004A14FEEE03FC0107EC1FF091B612C04CC7FC02F0C9FC130FA25CA2131FA25CA2133FA2
5CA2137FA291CAFCA25BA25B1201B512FCA336337DB231>I<ED07FC92387FFFC0913901
F807F091390FE001F891391F80007E027EC77E4AEC1F80EB03F8D907E0EC0FC0494815E0
011F1507494815F049C8FC13FEEF03F8485A12035B12075B120F491507121FA2485AA348
48ED0FF0A318E0171F90C9FC4817C0173F1880177F6C17005F5F4C5A5F6C903807800390
3A801FE007F0001F903978700FE09139E0381FC06C6C486C485A01C1027EC7FC3A07E180
1EFCD803F1EB1FF8D801F914E02600FFC01380013F9038FF000C010FB5FC0101019F131C
90C7001F131817381778705A1683EEFFE0A25F5FA26F48C7FC6F5AED01F035447DB43D>
I<010FB67E17F817FE903A003FC001FF9338003FC0EF1FE04B130FEF07F0147FA292C713
F8A25CEF0FF05CA20101ED1FE018C04AEC3F8018000103157E4C5A4AEB07F0EE3FC049B5
00FEC7FC16F89138F0007E82010F6E7E707E5C83131FA25CA2013F141FA25CA2017F143F
5F91C7FC180649160E180C49161C00011718B500FC011F133893380FE070040713E0C938
03FFC09338007F0037357DB23A>I<0003B812F05A18E0903AF0007F000FD80F80491303
90C71401000E5C48EE00C01401121800384A1301A2003001031580127000605CA2020714
0300E01700C74990C7FCA2140FA25DA2141FA25DA2143FA25DA2147FA292C9FCA25CA25C
A21301A25CA21303A25C497E001FB512FE5AA234337FB22D>84 D<EB01F0EB07FC90381F
0E3890387C07FCEBF8033801F001EA03E000075C13C0120F381F80035DEA3F00A2140748
5C127EA2140F00FE5C5A1640021F13E0ED80C0A2127CEC3F811680003CEB7F03003E9038
FF8300391E03CF87390F070F8E3907FE03FC3901F800F023227EA029>97
D<133FEA1FFFA25B1200A35BA21201A25BA21203A25BA21207A2EBE0F8EBE3FF390FEF07
809038FC03C001F813E0EBF001D81FE013F013C0138015F8123FA21300A248130315F012
7EA2140700FE14E05AA2EC0FC0A2EC1F80007C14005C147E003C137C003E5B381E01F038
0F07C06CB4C7FCEA00FC1D357EB321>I<147F903803FFC090380FC0F090383F0038137C
4913F83801F0013803E0031207EA0FC0EC01F04848C7FC123F90C8FCA25A127EA45AA312
7C150C151C15386C147015E06CEB03C0390F800F003807C07E3801FFF038007F801E227E
A021>I<ED03F0EC01FFA216E0EC000FA316C0A2151FA21680A2153FA21600A25DA29038
01F07EEB07FC90381F0EFEEB7C07496C5A3801F001EA03E0120701C05B120F381F8003A2
D83F005BA214075A007E5CA2140F12FE485C1640021F13E016C01580127CEC3F81168000
3CEB7F03003E9038FF8300391E03CF87390F070F8E3907FE03FC3901F800F024357EB328
>I<14FE903807FF8090381F03C090387C01E03801F800485A485A485A485A1401D83F00
13C01403007EEB0F80ECFE00387FFFF8B5128000FCC8FCA55AA315186C1438007C147015
E06CEB01C0EC07806CEB1E00380F80FC3803FFE0C690C7FC1D227DA024>I<EC1F80EC7F
E0903901F071C0903907C03FE090380F801F90381F000F5B137E017C14C013FC4848131F
A248481480A2153F1207491400A25DA249137EA215FEA25DA214013803E0034A5A3801F0
1F3800F83BEB3FF390380FC3F0EB00031407A25DA2140F001C5C127F4A5A143F00FE91C7
FC147E387801FC383C03F0381FFFC0D803FEC8FC23317FA025>103
D<EB07E0EA03FFA25CEA001FA35CA3133F91C8FCA35B137EA313FE9038FC0FC0EC7FF890
38FDF07C3901FF807EEC003E49133F5B485AA25B5D0007147E5BA215FE000F5C5B14015D
121FEB8003EDF008161C003F01071318010013E01638020F133048ECC070007E15600207
13E0EDC1C000FE903803C38048903801FF000038EB007C26357DB32C>I<EB01C0EB07E0
14F0130F14E01307EB038090C7FCAA13F0EA03FCEA0F1EEA0C1F121C003813801230EA70
3F00601300A25BEAE07E1240EA00FE5B12015BA212035B1207EBE0201470000F136013C0
A2001F13E0EB80C01381380F83801400EA078FEA03FCEA00F014337EB11A>I<EB07E0EA
03FFA25CEA001FA35CA3133F91C8FCA35B137EA313FE49131FED7F80913801E1C0000190
380383E09038F80F0F141C14380003017013C0EBF0E0ED0700D9F3C0C7FCD807F7C8FC13
EE13FCA2380FFFC0EBCFF0EBC1FC13C0001F137E13801680ED01C0003F15801300A21503
481500007E5CEC3E06150E00FE6D5A48EB0FF80038EB03E023357DB328>107
D<EB1F80EA0FFFA21400C67EA3137EA213FEA25BA21201A25BA21203A25BA21207A25BA2
120FA25BA2121FA25BA2123FA290C7FCA25AA2127E1304EAFE06130EEAFC0CA2131C1318
12F8EAFC38EA7C301370EA1FE0EA078011357DB317>I<D801E001FEEB07E03C07F803FF
803FFC3C0E3E0F07E0F83E001C903A3C03F1C03F3C183F7001F3801F26381FE0D9F70013
8026303FC013FE00705D0060138002005B0303143FD8E07F4A1400EA407E120003075C01
FE167E495C18FE030F5C120149ECC001F0F804031F150E00030403130C49028013F0191C
033F010713180007EFE0384902001430050313704B15E0000F933801E1C049017E903800
FF80D80380011CEC3E003F227EA044>I<D801E013FC3A07F807FF803A0E3E1F07C0001C
01387F39183F700326381FE07F38303FC000701380126014001507D8E07F5CEA407E1200
150F01FE5C5B151F5E120149133FEE0080EE01C00003027F138049137E160303FE130000
074A5A491406ED7C0E5E000FEC3C3849EB1FF0D80380EB07C02A227EA02E>I<147F9038
03FFC090380FC1F090383F00F8017C137C497F485A48487F1207485A5B001F1580123F90
C7FCED3F005A127EA25D157E5A15FE5D007C5C14014A5A5D6C495A4A5A6C49C7FC380F80
7E3807C1F83801FFE06C6CC8FC21227EA025>I<011E133F90397F80FFC09039E3E1C1E0
3A01C3E780F0903983FE00F8260381FC13784948137C120700065B167E1307120E00045B
1200010F14FE16FC5CA2011F130116F81480A2013FEB03F0A291380007E016C049130F16
80ED1F00EC803E496C5A9038FEE1F09038FC7FC0021FC7FC000190C8FCA25BA21203A25B
A21207A25BB57EA3273082A027>I<3901E003E03907F80FF8390E3E3C1C001CEB703E39
183FE0FE38381FC038303F80007014FC0060130015701500EAE07FEA407E1200A213FE5B
A312015BA312035BA312075BA3120F5BEA03801F227EA023>114
D<EB01FCEB0FFF90383E03C090387800E04913603901E001E014030003130713C013E0EC
03806DC7FC13FF14F014FC6C7F6C7F6D1380130F9038007FC0141F140F007E130700FE14
80A3EC0F005A00C0131E6C5B00705B383C01F0380FFFC0D803FEC7FC1B227CA024>I<EB
01C0EB07E0A3130FA214C0A2131FA21480A2133FA21400387FFFFEA2B5FC38007E00A213
FEA25BA21201A25BA21203A25BA21207A25B1408000F131C141813C0143814301470EB80
60EBC0E03807C1C0EBC3803801FF00EA007C17307FAE1C>I<13F8D803FEEB01C0D8070F
EB03E0000EEB8007121C001813C00038140FEA301F0070018013C01260013F131F00E013
0000401580C65A017E133F13FE491400A25D120149137E1602EDFE0716064913FCA2160E
0201130C9039F803F81CEDFC18000090380F7C38D97C1C137090393FF81FE0903907E007
8028227EA02C>I<01F8130ED803FE131FD8070FEB3F80000E1380121C0018EBC01F0038
140FD8301F13070070138000601403133F00E0010013001240C65A017E5B01FE13065BA2
150E0001140C5B151C151815384913301570156015E06D485A0000495A6D48C7FCEB7E1E
EB1FFCEB07E021227EA025>I<90391F801F8090397FE07FE09039E0F0E0703A01C0F9C0
F83903807D833807007F000E1403000C15F0001C137E0018EC01C002FEC7FC00385B1210
C7FC13015CA31303A25C1640010714E016C0001C5B007E1401010F148000FE1403011FEB
0700011B130E39F839F01C397070F878393FE07FE0390F801F8025227EA02C>120
D<13F8D803FEEB01C0D8070FEB03E0000EEB8007121C001813C00038140FD8301F14C000
7013801260013F131F00E0010013801240C65A017E133F01FE14005BA25D0001147E5BA2
15FE5D5BA214015DEBF803A20000130F90387C1FF0EB3FFBEB07E3EB00075DA20007130F
D81F805B003F495AA24AC7FCEB007E003E137C00385B381803F0381E07C0D807FFC8FCEA
01F823317EA026>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmr9 9 6
/Fj 6 62 df<14C01301EB0380EB0F00130E5B133C5B5BA2485A485AA212075B120F90C7
FC5AA2121E123EA3123C127CA55AB0127CA5123C123EA3121E121FA27E7F12077F1203A2
6C7E6C7EA213787F131C7F130FEB0380EB01C01300124A79B71E>40
D<12C07E1270123C121C7E120F6C7E6C7EA26C7E6C7EA27F1378137C133C133EA2131E13
1FA37F1480A5EB07C0B0EB0F80A514005BA3131E133EA2133C137C137813F85BA2485A48
5AA2485A48C7FC120E5A123C12705A5A124A7CB71E>I<EB0FE0EB7FFCEBF83E3903E00F
803907C007C0EB8003000F14E0391F0001F0A24814F8A2003E1300007E14FCA500FE14FE
B2007E14FCA56CEB01F8A36C14F0A2390F8003E03907C007C0A23903E00F803900F83E00
EB7FFCEB0FE01F347DB126>48 D<13075B5B13FF120FB5FC133F12F01200B3B3A2497EB6
12C0A31A327AB126>I<EB3FC0EBFFF0000313FC380F80FF391E007F80001CEB3FC048EB
1FE048130F15F00060130712FC6C14F87E1403A3007E1307123CC7FC15F0A2140F15E0EC
1FC0A2EC3F801500147E5C495A5C495A495A495A49C7FC133E133C4913185B485A484813
30485A48C7FC001C1470001FB512F05A5AB612E0A31D327CB126>I<007FB812C0B912E0
A26C17C0CCFCAC007FB812C0B912E0A26C17C033147C9C3C>61 D
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk cmsl5 5 68
/Fk 68 125 df<EA1C07383E0F80EA7E1FA2EA3E0FEA0601A2380C0300A2EA1806485AEA
E038EA4010110D7A9C1C>34 D<1306A2EB3F80EBFFE03803CC7038070C18120E001C133C
147CA2383C18781430001F130013F813FE380FFF806C13C0000113E0EA003F1333381031
F0EA783038F860E0A212F000C013C03860618013633838CE00EA1FFCEA07F0EA00C0A216
217B9E1C>36 D<121C123E127EA2123E1206A2120CA21218123012E01240070D779C11>
39 D<1338A3133000381370383C31F0383F23E03807AF00EA01F8A2EA0FFF387E67C038
F863E038E0E1C03800C000A2120112001412799E1C>42 D<121C123E127EA2123E1206A2
120CA21218123012E01240070D7B8411>44 D<EA7FFCA2EAFFF80E037D8A14>I<123012
7812F81278127005057A8411>I<140315801407EC0F00140E141E141C143C143814785C
5C13015C1303495A91C7FC5B130E131E5B13381378137013F05B1201485A5B120790C8FC
5A121E121C123C123812785A5AA25A19297D9E1C>I<133F3801FFC03803C1F038070070
000E1338121E121C003C133C12381278A4481378A5147014F0A24813E0EAF00114C0EA70
0338780780383C1F00EA1FFCEA07F0161D7B9B1C>I<1306131CEA01FC120FEA1E3C1200
A25BA65BA6485AA61203B512801400111C7A9B1C>I<EB1FC0EBFFF83803C0FC3807003E
141F380F800F13C0EA1F80120FEA0700C7121F141E143C147C14F8EB01E0EB03C0EB0700
131E1338EBE00CEA01C03803001C000E1318381FFFF8127FB512F0A2181C7D9B1C>I<EB
3FC0EBFFF03803C0783807003C48133E1380A2143CEB007CC712F8EB01F0EB07E0EBFF80
3801FE00380003C0EB01E0EB00F014F8A21230127C12FCA238F801F014E0386003C03878
0F80381FFE00EA07F8171D7C9B1C>I<141C143814F813011303EB0778130EEB1CF01338
137013E0EA01C0EA0380380701E0120E121C12381270007FB5FCB512FE380003C0A51307
EBFFFCA2181C7D9B1C>I<3803800EEBFFFC14F814E0148090C7FC1206A4133FEBFFC038
0DC1E0380F00F0000E1378120CC7FC147CA2003013F8127812F814F0EAF00100C013E038
6003C038380F00EA1FFEEA07F0171D7C9B1C>I<EB0FE0EB3FF8EBF8183801C03C380380
7CEA0700000E1378481300123CA238787F803879FFC0387B01E038F400F000F81370A248
1378A314F05AA26C13E0EA700114C038380380383C0F00EA0FFCEA07F0161D7B9B1C>I<
120E121E121F121E120C1200A81230127812F81278127008127A9111>58
D<12075A138013001206C7FCA81218123C127CA2123C120CA25AA25A12705A1240091A7B
9111>I<140EA2141FA25C5C8114CFA29038018FC013031407130681EB0C03131C131801
307FEB3FFF5BEBE00101C07F38018000A248C77E48147C5A3AFFC007FFE016C0231D7D9C
29>65 D<0007B512F015FE39007C003FED0F80ED07C0150316E04914C015071680ED1F00
157E90B512F8485C9038F001FCEC003E81ED0F80A248481307150FA2ED1F00A2157E3907
C001F8007FB55AB61280231C7E9B27>I<02FF13C0010713C190393F80F18090387C003B
D801F0130F485AD80780130748C7FC48EC0300121E123E5A92C7FCA25AA5150600785C12
7C123C003E5C001E5C6C5C3907C001C03903F807802600FFFEC7FCEB1FF0221E7A9C28>
I<0007B512F015FE39007C003FED07C0ED03E01501ED00F04914F8A21678A4485A16F8A3
16F01501484814E01503ED07C0ED0F80ED1F00157C4848485A007FB512E0B6C7FC251C7E
9B2A>I<000FB61280A23900F8001FED0700A281A23801F003A34AC7FC5C90B5FC485BEB
E01E140E1406ED0180ED03003807C0005D1506150E151E5D484813FCB6FC5D211C7D9B25
>I<0007B612C0A239007C000FED0380A21501A25BEC0181A2ED80001403140748B5C7FC
A2EBF00F8080A23803E00691C8FCA51207EA7FFFB5FC221C7E9B24>I<02FF13C0010713
C190393F80F18090387C003BD801F0130F485AD80780130748C7FC48EC0300121E123E5A
92C7FCA25AA391381FFFC0A29138007E000078147C127C123C123E121E6C14FC3907C001
F83903F807983900FFFE08D91FF0C7FC221E7A9C2B>I<3A07FFE03FFFA23A007C0003E0
A549EB07C0A590B6FC4815809038F0000FA54848EB1F00A600075C3A7FFE03FFF000FF5B
281C7E9B29>I<3807FFF04813E038007C00A55BA6485AA6485AA61207EAFFFEA2141C7D
9B15>I<380FFFE0A2D800F8C7FCA5485AA6485AA415181530485AA2157015E0A2140338
0F800FB612C0A21D1C7D9B22>76 D<D807FEEC07FFA2D8007EEC0FE0016F141BA21633D9
6780136301C7EC67C016C7EBC3C0ED0187ED0307EBC1E0D801819038060F80150CEB80F0
151815301478D803009038601F0015C0A2EC3D80EC3F005A260F801E5B3B7FF01C03FFF0
00FF5C301C7E9B31>I<D807FEEB07FF7F3A007F8000F0016F146080EB67E0EB63F001C1
14C080EBC0FC147E143E143F3A01801F8180140F15C1EC07E1EC03F11401D80300EBFB00
6EB4FC81A2814880486C130EEA7FF000FF1406281C7E9B29>I<49B4FC010F13E090383F
01F89038F8007CD801E0131E48487F4848148048C712074815C0123E15035AA3481407A4
ED0F80A20078EC1F00127C153E6C5C001E5C001F495A390FC007C03903F01F802600FFFE
C7FCEB1FE0221E7A9C2B>I<000FB512C015F03900F800FC153E151FA3485AA3151E153E
157C3903E001F090B512C0ECFE0001E0C7FCA3485AA6120FEAFFFCA2201C7D9B25>I<49
B4FC010F13E090383F01F89038F8007C4848131ED803C0131F4848EB0F8048C712074815
C0123EA2481403A3481407A4ED0F80A200781500007C5C903803C03E393C0FE07C391E1C
30F8391F1819F0390FB01FC0D803F85B3900FFFE01EB1FEC9038000E03EC0F0615FE6E5A
5D6E5A6E5A22257A9C2B>I<000FB57E15F03900F800FC153E81A3485AA3153E5DEC03F0
48B512C0A29038E007E0EC01F0A281D807C05BA51630000F15603AFFFC00F8E0ED7FC0C8
EA1F00241D7D9B28>I<90381FC0C0EB7FF93901E03F803803800F38070007000E1303A3
001E140091C7FC7E7FEA07F83803FFC06C13F06C6C7EEB03FCEB003E141E140EA21260A3
5C0070131800F81370B4485A38C7FFC0008190C7FC1A1E7C9C1F>I<001FB612C05A393E
01F0070038EC038000701401A21260EB03E012C0A2000091C7FCA3495AA6495AA6131F38
07FFFEA2221C7A9B28>I<D8FFFCEBFFE0A2D80F80EB1E00150CA448C75AA6003E5CA648
5CA2123C003E5C4A5A001E49C7FC6C130E3807C03C3801FFF038003F80231D799B29>I<
D87FFCEB3FF800FF15F0D807C0EB0F80ED06006D130E0003140C5D6D1338153000015CA2
6D5B0000495AA26D48C7FCEB7C071406EB7E0CEB3E1C14185C133F6D5A5CA26D5AA291C8
FC1306251D7A9B29>I<277FFC1FFFEBFFE0D8FFF816C0270FC001F0EB1E006F131C0007
01001418173802011430D9E0035C0003147C02065CA2020C495A01F0137E00019026183E
03C7FC02385B023013069039F8603F0C0000141F02C05BA2D9FD805B017D14F090397F00
0FE05E137E017C5C013C1307013891C8FCA2331D7A9B37>I<3A03FFF03FFC4813E03A00
3F000F8090391F800E006D6C5A5D6D6C5A6E5A903803F1C0903801FB8002FFC7FC6D5A14
7EA2147F4A7EEB01DF9038038FC090380707E0130E496C7E496C7E1370496C7E485AD807
E0137E3A7FF003FFF012FF261C7E9B29>I<D8FFFCEB3FF8A2D807E0EB0F806C6CEB0E00
5D6C6C5B6D133000005C017E5B4A5A6D48C7FCEB1F87148EEB0FDC14F86D5A6D5AA25C13
07A55C130FEBFFFC5A251C7A9B29>I<EA01FEA313C0EA0380A6EA0700A6120EA65AA65A
A65AA4EA7F80A2EAFF000F297C9E11>91 D<EA01FEA3EA000E131CA61338A61370A613E0
A6EA01C0A6EA0380A4127FA2EAFF000F29809E11>93 D<EA07FE380FFF80381E07C0383E
01E0121E120C120013FFEA07E1381E03C0127812F014C6A2130738F81FCC387FF3FC381F
C3F017127C911C>97 D<EA7F80A2000FC7FCA6121EA3EB3FC0EBFFE0381FC0F8383E0038
003C133C141C141EA348133CA314781470387C01E038FE07C038E3FF8038C0FC00171D7A
9C1F>I<EB7FC03803FFE0EA0781EA0E03EA1C01383C00C0481300A35AA2127012781460
6C13C0381F0380380FFF00EA03F813127C9119>I<EC7F80A2EC0F00A6141EA313FF0003
13DE3807C0FE380F003C121C123C5AA3485BA31270007813F8EA3801EA1E07380FFEFF38
03F0FE191D7C9C1F>I<137F3801FFC0380780E0380E0070481338123C387FFFF8A20078
C7FC5AA21270127814306C1360381F01C03807FF803801FC0015127D9119>I<EB07E0EB
1FF0137C13F113E13801E0E01400A2485AA3EA7FFEA2EA03C0485AA648C7FCA65AEAFFE0
A2141D7D9C12>I<EC03C0EB1F8F90387FF9E03801E0F13903C078C0018013001207A214
7014F03803C1E0EBFF80D8067EC7FC90C8FCA23807FFE014F86C7F000F7F383C003E0070
130F8048130E12700078133C003E13F8380FFFE0000390C7FC1B1C7F921C>I<EA0FF0A2
EA01E0A6485AA3EBC3F8EBCFFCEBD83E3807A01E13C01380A448485AA6001E5B39FFE3FF
8001C31300191D7D9C1F>I<13C0EA01E01203120113C0C7FCA6EA1FC0A212071380A6EA
0F00A6121EEAFFC0A20B1D7D9C11>I<EA0FF0A2EA01E0A6485AA3ECFFC0A2EC7C003807
80E0EB81C00187C7FC138E13BE13FF380FCF80130F6D7E6D7EA26D7E001E7F38FFE3FF13
C31A1D7D9C1E>107 D<EA0FF0A2EA01E0A6EA03C0A6EA0780A6EA0F00A6121EEAFFE013
C00C1D7D9C11>I<3A3FC3F807F09039CFFE1FFC3A07D81F303E9039A00F401E01C01380
01801300A4260F001E5BA6001E495B3BFFE1FFC3FF80A229127D912F>I<381FC3F8383F
CFFC3807D83EEBA01E13C01380A448485AA6001E5B39FFE3FF8001C3130019127D911F>
I<EB3F803801FFF038078078380E003C48131E003C130E5A140FA248131EA21270007813
3C14386C13F0381E03E0380FFF803801FC0018127D911C>I<3807F1FE380FF7FF3901FE
07C0EBF0039038E001E0A2EC00F0A33903C001E0A3EC03C0EC07809038E00F003807F03E
EB9FFCEB87E00180C7FCA348C8FCA3EA7FE012FF1C1A7F911F>I<EB7E063803FF8E3807
C1DE380F007C001E133C5A5AA3481378A3127814F8EA3C01381E07F0EA0FFEEA03F0C7FC
A3EB01E0A3EB0FFC131F171A7C911E>I<381FC780383FDFC03807F9E0EBA1C0EBC180EB
C0005BA348C7FCA65AEAFFE0A213127D9116>I<3801FCC0EA07FFEA0C03381801801230
A2003EC7FCEA1FF0EA0FFEEA03FF38000F80EA600313011270EB0300EAF80EEAEFFCEAC7
F012127D9117>I<EA0180A31203A2EA07005A123FEAFFFCA2EA0F00121EA65A1318A413
301370EA1FE0EA0F800E1A7B9916>I<387F01FCEAFF03381F007C001E1378A64813F0A4
13011303130F381FF9FE380FE1FC17127B911F>I<39FFC07F80A2391F003C0014306C13
7014606D5AEA07815C01C3C7FCEA03C713C6EA01EC13FC5B6C5AA25B19127B911E>I<3A
FFC7FE1FE0A23A1E00F00F0001011306496C5A001F1378D80F065BEC383890380C3C3001
8C5BEA07989038B81CC0EBB01F01E05B000391C7FC497E140E138023127B9128>I<391F
F83FE0A23901E01E003800F0386D5AEB7CE0EB3FC06D5A91C7FC6D7EEB3FC01373EBE1E0
3801C1F0380380F8380F007839FF81FFC015801B127E911E>I<390FFC07F8A23901F003
C0150000005B14066D5AEB781C1418EB7C30EB3C7014606D5A131F5C6DC7FCA2130E130C
131CEA78185BEAF860EAF9C0EA7F80003EC8FC1D1A7F911E>I<3807FFFCA2380F00F038
0E01E0380C03C0381C078038180F00133EC65AEBF830EA01F0EA03C038078070380F0060
001E13E0EA3C03B512C0A216127E9119>I<B912F0A234027C8B39>124
D E
%EndDVIPSBitmapFont
/Fl 105[37 27[33 37 37 54 37 42 25 29 33 42 42 37 42
62 21 42 1[21 42 37 25 33 42 33 42 37 7[54 54 1[54 54
50 42 54 58 46 58 54 71 50 2[29 58 58 46 50 54 54 50
54 5[25 25 37 37 37 37 37 37 37 37 37 37 21 19 25 19
2[25 25 37[42 2[{TeXBase1Encoding ReEncodeFont}67 74.7198
/Times-Bold rf /Fm 134[40 40 1[40 40 40 40 40 1[40 40
40 40 40 40 1[40 40 40 40 40 40 40 1[40 3[40 1[40 3[40
2[40 40 40 2[40 40 40 40 3[40 1[40 40 40 40 1[40 2[40
40 40 1[40 4[40 1[40 40 2[40 40 40 40 1[40 40 40 40 4[40
34[{TeXBase1Encoding ReEncodeFont}53 66.4176 /Courier
rf /Fn 134[45 45 45 45 45 45 45 45 1[45 45 45 45 45 45
45 45 45 45 45 45 45 45 45 45 1[45 7[45 2[45 45 45 2[45
1[45 45 2[45 45 45 45 45 45 45 45 4[45 2[45 10[45 45
45 3[45 45 5[45 34[{TeXBase1Encoding ReEncodeFont}48
74.7198 /Courier rf /Fo 82[22 22[33 28[33 1[48 1[33 18
26 22 1[33 33 33 1[18 2[18 33 33 1[29 33 1[33 29 11[48
1[37 5[59 4[48 4[44 1[48 7[33 33 33 1[33 33 33 33 33
33 18 17 1[17 2[22 22 40[{TeXBase1Encoding ReEncodeFont}39
66.4176 /Times-Roman rf /Fp 133[29 33 33 50 33 37 21
29 29 37 37 37 37 54 21 33 1[21 37 37 21 33 37 33 37
37 3[29 1[29 3[62 46 54 42 37 46 54 46 54 50 62 42 1[33
25 1[54 46 46 54 50 46 46 6[25 37 37 2[37 1[37 37 37
37 1[19 25 19 1[37 25 25 37[37 2[{TeXBase1Encoding ReEncodeFont}63
74.7198 /Times-Italic rf /Fq 105[37 1[33 33 24[33 37
37 54 37 37 21 29 25 37 37 37 37 58 21 37 21 21 37 37
25 33 37 33 37 33 25 2[25 1[25 46 54 54 71 54 54 46 42
50 54 42 54 54 66 46 54 29 25 54 54 42 46 54 50 50 54
3[42 1[21 21 37 37 37 37 37 37 37 37 37 37 21 19 25 19
1[37 25 25 25 2[37 37 31[42 42 2[{TeXBase1Encoding ReEncodeFont}83
74.7198 /Times-Roman rf /Fr 82[33 50[44 50 1[72 1[55
33 39 44 55 55 50 55 83 28 55 1[28 55 50 33 44 55 44
55 50 6[66 72 72 100 72 72 66 55 72 78 61 78 72 94 66
78 50 39 78 78 61 66 72 72 66 72 7[50 50 50 50 50 50
50 50 50 2[25 46[{TeXBase1Encoding ReEncodeFont}60 99.6264
/Times-Bold rf /Fs 134[50 2[50 55 28 50 33 1[55 55 55
83 22 1[22 22 55 55 28 55 55 50 1[55 9[94 1[72 1[66 72
4[83 2[50 4[66 72 72 1[66 7[55 55 2[55 3[55 4[28 44[{
TeXBase1Encoding ReEncodeFont}35 99.6264 /Helvetica rf
/Ft 138[91 50 83 58 2[91 91 133 42 2[42 1[91 50 83 1[83
1[83 8[100 3[91 100 1[116 100 3[91 6[100 66[91 2[{
TeXBase1Encoding ReEncodeFont}22 149.44 /Helvetica-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin

%%EndSetup
%%Page: 1 1
1 0 bop 90 107 a Ft(T)-12 b(ranslating)42 b(XSL)-13 b(T)41
b(Pr)m(ograms)i(to)e(Ef\002cient)g(SQL)h(Queries)964
445 y Fs(Sushant)29 b(J)n(ain)140 b(Ratul)28 b(Mahajan)140
b(Dan)29 b(Suciu)822 631 y(Depar)t(tment)g(of)f(Computer)h(Science)g
(and)g(Engineer)q(ing)1393 730 y(Univ)n(ersity)e(of)h(W)l(ashington)
1528 827 y(Seattle)o(,)g(W)-5 b(A)29 b(98195)-152 1202
y Fr(ABSTRA)-5 b(CT)-152 1322 y Fq(W)f(e)20 b(present)g(an)g(algorithm)
h(for)e(translating)i(XSL)-7 b(T)18 b(programs)j(into)f(SQL.)-152
1409 y(Our)26 b(conte)o(xt)h(is)f(that)f(of)i(virtual)e(XML)h
(publishing,)j(in)d(which)g(a)g(single)-152 1496 y(XML)20
b(vie)n(w)g(is)g(de\002ned)h(from)f(a)g(relational)g(database,)h(and)g
(subsequently)-152 1583 y(queried)28 b(with)e(XSL)-7
b(T)26 b(programs.)47 b(Each)27 b(XSL)-7 b(T)25 b(program)j(is)e
(translated)-152 1671 y(into)h(a)g(single)g(SQL)f(query)i(and)f(run)g
(entirely)g(in)g(the)g(database)h(engine.)-152 1758 y(Our)21
b(translation)f(w)o(orks)h(for)f(a)g(lar)o(ge)g(fragment)h(of)f(XSL)-7
b(T)h(,)20 b(which)g(we)g(de-)-152 1845 y(\002ne,)33
b(that)c(includes)i(descendant/ancestor)i(axis,)f(recursi)n(v)o(e)f
(templates,)-152 1932 y(modes,)25 b(parameters,)f(and)f(aggre)o(gates.)
36 b(W)-6 b(e)22 b(put)h(considerable)h(ef)n(fort)f(in)-152
2019 y(generating)k(correct)f(and)h Fp(ef)o(\002cient)e
Fq(SQL)g(queries)h(and)h(describe)f(se)n(v)o(eral)-152
2107 y(optimization)d(techniques)h(to)e(achie)n(v)o(e)h(this)f(ef)n
(\002cienc)o(y)-5 b(.)34 b(W)-6 b(e)22 b(ha)o(v)o(e)h(tested)-152
2194 y(our)j(system)f(on)h(all)f(22)g(SQL)f(queries)i(of)f(the)h(TPC-H)
d(database)k(bench-)-152 2281 y(mark)g(which)g(we)f(represented)h(in)f
(XSL)-7 b(T)25 b(and)i(then)g(translated)g(back)g(to)-152
2368 y(SQL)18 b(using)i(our)f(translator)l(.)-152 2587
y Fr(K)n(eyw)o(ords)-152 2707 y Fq(XSL)-7 b(T)h(,)18
b(SQL,)g(XML,)g(query)i(optimization,)f(virtual)g(vie)n(w)-152
2926 y Fr(1.)100 b(INTR)m(ODUCTION)-77 3034 y Fq(XSL)-7
b(T)22 b(is)g(an)h(increasingly)h(popular)g(language)h(for)e
(processing)h(XML)-152 3121 y(data.)50 b(Based)28 b(on)g(a)g(recursi)n
(v)o(e)g(paradigm,)j(it)c(is)g(relati)n(v)o(ely)g(easy)i(to)e(use)-152
3208 y(for)18 b(programmers)i(accustomed)f(to)f(a)g(functional)h
(recursi)n(v)o(e)g(style)f(of)g(pro-)-152 3295 y(gramming.)44
b(While)25 b(originally)h(designed)g(to)g(serv)o(e)g(as)f(a)g
(stylesheet,)j(to)-152 3382 y(map)18 b(XML)e(into)h(HTML,)f(it)g(is)h
(increasingly)h(used)f(in)g(other)g(applications,)-152
3470 y(such)j(as)f(querying)h(and)g(transforming)f(XML)g(data.)-77
3557 y(T)-6 b(oday)33 b(most)g(of)g(the)g(XML)f(data)h(used)h(in)f
(enterprise)g(applications)-152 3644 y(originates)28
b(from)f(relational)h(databases,)i(rather)d(than)h(being)g(stored)f
(na-)-152 3731 y(ti)n(v)o(ely)-5 b(.)50 b(There)28 b(are)g(strong)g
(reasons)h(why)f(this)g(will)e(not)j(change)g(in)f(the)-152
3818 y(near)d(future.)40 b(Relational)24 b(database)h(systems)g(of)n
(fer)g(transactional)g(guar)o(-)-152 3905 y(antees,)i(which)f(mak)o(e)g
(them)f(irreplaceable)h(in)f(enterprise)g(applications,)-152
3993 y(and)j(come)g(equipped)g(with)f(high-performance)i(query)f
(processors)g(and)-152 4080 y(optimizers.)46 b(There)27
b(e)o(xists)f(considerable)i(in)m(v)o(estment)f(in)f(today')l(s)h
(rela-)-152 4167 y(tional)18 b(database)h(systems)f(as)g(well)f(as)h
(the)g(applications)g(implemented)h(on)-152 4254 y(top)g(of)g(them.)24
b(The)19 b(language)h(these)f(systems)h(understand)g(is)f(SQL.)-77
4341 y(T)-5 b(echniques)29 b(for)f(mapping)i(relational)e(data)h(to)f
(XML)g(are)g(no)n(w)h(well)-152 4428 y(understood.)48
b(Research)27 b(systems)g(in)f(XML)h(publishing)g([2,)h(8,)h(10,)f(15])
-152 4516 y(ha)o(v)o(e)19 b(sho)n(wn)h(ho)n(w)f(to)f(specify)h(a)g
(mapping)h(from)e(the)h(relational)g(model)g(to)-152
4603 y(XML)e(and)h(ho)n(w)g(to)f(translate)g(XML)g(queries)h(e)o
(xpressed)g(in)f(XML-QL)g([7])-152 4690 y(or)i(XQuery)h([3])e(into)h
(SQL.)-77 4777 y(In)i(this)g(paper)h(we)g(present)f(an)h(algorithm)g
(for)f(translating)g(XSL)-7 b(T)20 b(pro-)-152 4864 y(grams)25
b(into)g(ef)n(\002cient)f(SQL)g(queries.)40 b(W)-6 b(e)24
b(identify)h(a)g(certain)f(subset)i(of)-152 4952 y(XSL)-7
b(T)14 b(for)h(which)h(the)f(translation)h(is)e(possible)i(and)g(which)
g(is)f(rich)g(enough)-152 5039 y(to)29 b(e)o(xpress)g(databases-lik)o
(e)h(queries)f(o)o(v)o(er)g(XML)g(data.)53 b(This)28
b(includes)-152 5126 y(recursi)n(v)o(e)j(templates,)h(modes,)i
(parameters)c(\(with)g(some)g(restrictions\),)-152 5246
y Fo(Cop)o(yright)20 b(is)d(held)h(by)f(the)g(author/o)n(wner\(s\).)
-152 5321 y Fp(WWW2002)p Fo(,)i(May)e(7\22611,)g(2002,)g(Honolulu,)h
(Ha)o(w)o(aii,)h(USA.)-152 5396 y(A)m(CM)f
(1\25558113\255449\2555/02/0005.)2040 1202 y Fq(aggre)o(gates,)24
b(conditionals,)h(and)f(a)e(lar)o(ge)h(fragment)g(of)g(XP)o(ath.)35
b(One)23 b(im-)2040 1289 y(portant)h(contrib)o(ution)g(of)f(this)g
(paper)h(is)f(to)h(identify)f(a)h(ne)n(w)f(class)h(of)f(op-)2040
1376 y(timizations)g(that)f(need)i(to)f(be)g(done)g(either)g(by)g(the)g
(translator)m(,)g(or)g(by)g(the)2040 1463 y(relational)c(engine,)g(in)f
(order)h(to)g(optimize)g(the)f(kind)h(of)g(SQL)e(queries)j(that)2040
1550 y(result)f(from)g(such)g(a)g(translation.)2115 1637
y(W)-6 b(e)29 b(ar)o(gue)g(that)g(the)h(XSL)-7 b(T)28
b(fragment)h(described)i(here)f(is)e(suf)n(\002cient)2040
1725 y(for)f(e)o(xpressing)i(database-lik)o(e)f(queries)g(in)g(XSL)-7
b(T)h(.)26 b(As)h(part)g(of)h(our)f(e)o(x-)2040 1812
y(perimental)20 b(e)n(v)n(aluation)g(we)f(ha)o(v)o(e)h(e)o(xpressed)h
(all)d(22)i(SQL)e(queries)i(in)f(the)2040 1899 y(TPC-H)25
b(benchmark)k([6])d(in)h(this)f(fragment,)j(and)e(translated)g(them)f
(into)2040 1986 y(SQL)19 b(using)i(our)f(system.)26 b(In)20
b(all)g(cases)g(we)g(could)h(e)o(xpress)g(these)f(queries)2040
2073 y(in)d(our)h(fragment,)f(b)o(ut)g(in)g(some)h(cases)g(the)f(query)
h(we)f(generated)h(from)f(the)2040 2160 y(XSL)-7 b(T)25
b(program)j(turned)f(out)g(to)f(be)h(signi\002cantly)g(more)f(comple)o
(x)i(than)2040 2248 y(the)19 b(original)g(TPC-H)f(counterpart.)2115
2335 y(T)m(ranslations)31 b(from)f(XML)h(languages)h(to)e(SQL)g(ha)o(v)
o(e)g(been)i(consid-)2040 2422 y(ered)18 b(before,)f(b)o(ut)g(only)h
(for)f(XML)g Fp(query)h(langua)o(g)o(es)p Fq(,)i(lik)o(e)d(XML-QL)g
(and)2040 2509 y(XQuery)-5 b(.)36 b(The)23 b(distinction)g(is)g
(signi\002cant;)i(since)e(XSL)-7 b(T)22 b(is)g(not)i(a)e(query)2040
2596 y(language,)c(its)f(translation)g(to)f(SQL)g(is)g(signi\002cantly)
h(more)g(comple)o(x.)23 b(The)2040 2684 y(reason)17 b(is)f(the)g(huge)h
(paradigm)g(gap)g(between)g(XSL)-7 b(T')l(s)15 b(functional,)i(recur)o
(-)2040 2771 y(si)n(v)o(e)24 b(paradigm,)j(and)e(SQL)-7
b(')l(s)23 b(declarati)n(v)o(e)h(paradigm.)40 b(An)25
b(easy)g(transla-)2040 2858 y(tion)20 b(is)f(not)i(possible,)f(and,)h
(in)e(f)o(act,)h(it)f(is)h(easy)g(to)g(construct)h(programs)f(in)2040
2945 y(XSL)-7 b(T)18 b(that)g(ha)o(v)o(e)i(no)f(SQL)f(equi)n(v)n
(alent.)2115 3032 y(As)29 b(an)i(alternati)n(v)o(e)f(to)f(translation,)
k(it)c(is)g(al)o(w)o(ays)i(possible)g(to)e(inter)o(-)2040
3119 y(pret)23 b(an)o(y)h(XSL)-7 b(T)22 b(program)i(outside)g(the)f
(relational)g(engine,)i(and)f(use)f(the)2040 3207 y(RDBMS)f(only)i(as)e
(an)h(object)h(repository)-5 b(.)35 b(F)o(or)22 b(e)o(xample,)i(the)f
(XSL)-7 b(T)22 b(in-)2040 3294 y(terpreter)16 b(could)h(construct)g
(XML)f(elements)g(on)h(demand,)g(by)g(issuing)g(one)2040
3381 y(SQL)j(query)i(for)f(e)n(v)o(ery)h(XML)e(element)i(that)f(it)f
(needs.)30 b(W)-6 b(e)21 b(assume,)h(that)2040 3468 y(we)f(can)g
(formulate)g(a)f(SQL)g(query)h(to)g(retrie)n(v)o(e)f(an)h(XML)f
(element)h(with)f(a)2040 3555 y(gi)n(v)o(en)j Fn(ID)p
Fq(.)e(Such)g(an)i(implementation)f(w)o(ould)h(end)f(up)g(reading)h
(and)f(ma-)2040 3642 y(terializing)h(the)h(entire)g(XML)f(document)i
(most)f(of)g(the)f(time.)37 b(Also,)25 b(this)2040 3730
y(approach)30 b(w)o(ould)f(need)g(to)f(issue)g(multiple)g(SQL)f
(queries)i(for)f(a)g(single)2040 3817 y(XSL)-7 b(T)25
b(program.)45 b(This)26 b(slo)n(ws)g(do)n(wn)h(the)f(interpretation)h
(considerably)2040 3904 y(because)d(of)f(the)g(ODBC)f(or)g(JDBC)g
(connection)j(o)o(v)o(erhead.)36 b(In)22 b(contrast,)2040
3991 y(our)29 b(approach)i(generates)e(a)g Fp(single)g
Fq(SQL)f(query)h(for)g(the)g(entire)g(XSL)-7 b(T)2040
4078 y(program,)23 b(thus)f(pushing)h(the)f(entire)g(computation)h
(inside)f(the)f(relational)2040 4165 y(engine.)27 b(This)19
b(is)g(the)h(preferred)h(solution,)f(both)g(because)h(it)e(mak)o(es)i
(a)f(sin-)2040 4253 y(gle)29 b(connection)h(to)f(the)f(database)i(serv)
o(er)f(and)g(because)h(it)e(enables)h(the)2040 4340 y(relational)20
b(engine)g(to)f(choose)i(the)e(best)h(e)o(x)o(ecution)h(strate)o(gy)e
(for)h(that)f(par)o(-)2040 4427 y(ticular)g(program.)2115
4514 y(As)g(an)g(e)o(xample,)g(consider)h(the)f(XSL)-7
b(T)18 b(program)h(belo)n(w:)2227 4628 y Fm(<xsl:template)38
b(match="*">)2346 4703 y(<xsl:apply-template/>)2227 4778
y(</xsl:template>)2227 4927 y(<xsl:template)g
(match="person[name=='Smith']">)2346 5002 y(<xsl:value-of)g
(select="phone/text\(\)"/>)2227 5077 y(</xsl:template>)2040
5203 y Fq(The)27 b(program)g(mak)o(es)h(a)f(recursi)n(v)o(e)g(tra)o(v)o
(ersal)f(of)h(the)f(XML)h(tree,)h(look-)2040 5290 y(ing)23
b(for)f(a)h Fn(person)e Fq(called)i Fn(Smith)e Fq(and)i(returning)g
(his)g Fn(phone)p Fq(.)32 b(If)23 b(we)2040 5378 y(interpret)g(this)g
(program)h(outside)g(the)f(relational)g(engine)h(we)f(need)h(to)f(is-)p
eop
%%Page: 2 2
2 1 bop 466 328 a @beginspecial 0 @llx 0 @lly 276 @urx
175 @ury 576 @rhi @setspecial
%%BeginDocument: p226-jain-schema2-r.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: schema2-r.eps
%%Creator: fig2dev Version 3.2 Patchlevel 3c
%%CreationDate: Sat Mar  2 01:26:48 2002
%%For: ratul@krypton.cs.washington.edu (Ratul Mahajan)
%%BoundingBox: 0 0 276 175
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 175 moveto 0 0 lineto 276 0 lineto 276 175 lineto closepath clip newpath
-269.0 373.0 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
%%Page: 1 1
10 setmiterlimit
 0.06000 0.06000 sc
%
% Fig objects follow
%
/Helvetica-Bold ff 375.00 scf sf
4500 3600 m
gs 1 -1 sc (Beers \(name, price\)) col0 sh gr
/Helvetica-Bold ff 375.00 scf sf
4500 4470 m
gs 1 -1 sc (Drinkers \(name, age\)) col0 sh gr
/Helvetica-Bold ff 375.00 scf sf
4500 4905 m
gs 1 -1 sc (Astrosign \(drinkers, sign\)) col0 sh gr
/Helvetica-Bold ff 375.00 scf sf
4500 5340 m
gs 1 -1 sc (Frequents \(drinker, bar\)) col0 sh gr
/Helvetica-Bold ff 375.00 scf sf
4500 5775 m
gs 1 -1 sc (Bars \(name\)) col0 sh gr
/Helvetica-Bold ff 375.00 scf sf
4500 6210 m
gs 1 -1 sc (Serves \(bar, beer\)) col0 sh gr
/Helvetica-Bold ff 375.00 scf sf
4500 4035 m
gs 1 -1 sc (Likes \(drinker, beer\)) col0 sh gr
$F2psEnd
rs

%%EndDocument
 @endspecial -13 499 a Fl(Figur)o(e)18 b(1:)24 b(Relational)18
b(Schema)h(f)n(or)g(Beers/Drink)o(ers/Bars.)5 1485 y
@beginspecial 0 @llx 0 @lly 460 @urx 221 @ury 2016 @rwi
@setspecial
%%BeginDocument: p226-jain-schema2-x.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: schema2-x.eps
%%Creator: fig2dev Version 3.2 Patchlevel 3c
%%CreationDate: Sat Mar  2 01:40:38 2002
%%For: ratul@krypton.cs.washington.edu (Ratul Mahajan)
%%BoundingBox: 0 0 460 221
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 221 moveto 0 0 lineto 460 0 lineto 460 221 lineto closepath clip newpath
-191.0 502.0 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
%%Page: 1 1
10 setmiterlimit
 0.06000 0.06000 sc
%
% Fig objects follow
%
60.000 slw
% Ellipse
n 6525 4950 525 225 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 6600 5850 825 225 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 5550 6900 450 300 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 4050 6900 825 300 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 8550 7950 450 225 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 5550 7950 525 225 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 9975 7950 825 300 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 6975 7950 750 375 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 4276 7952 525 225 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 9107 6836 450 375 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 7801 6902 525 225 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 6724 6883 375 225 0 360 DrawEllipse gs col0 s gr

% Polyline
n 6525 5175 m
 6525 5625 l gs col0 s gr 
% Polyline
n 5775 5925 m
 4200 6600 l gs col0 s gr 
% Polyline
n 6075 6000 m
 5700 6600 l gs col0 s gr 
% Polyline
n 6600 6075 m
 6675 6675 l gs col0 s gr 
% Polyline
n 7125 6075 m
 7725 6675 l gs col0 s gr 
% Polyline
n 7425 5925 m
 8925 6525 l gs col0 s gr 
% Polyline
n 5325 7200 m
 4500 7725 l gs col0 s gr 
% Polyline
n 5550 7200 m
 5550 7725 l gs col0 s gr 
% Polyline
n 5925 7125 m
 6600 7650 l gs col0 s gr 
% Polyline
n 8925 7200 m
 8625 7725 l gs col0 s gr 
% Polyline
n 9375 7200 m
 9900 7650 l gs col0 s gr 
/Helvetica-Bold ff 300.00 scf sf
6300 5025 m
gs 1 -1 sc (doc) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
6075 5925 m
gs 1 -1 sc (drinkers) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
3450 6975 m
gs 1 -1 sc (astrosign) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
5175 6975 m
gs 1 -1 sc (beers) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
5250 8025 m
gs 1 -1 sc (price ) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
6375 8025 m
gs 1 -1 sc (barname) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
8175 8025 m
gs 1 -1 sc (name) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
9375 8025 m
gs 1 -1 sc (beername) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
3900 8025 m
gs 1 -1 sc (name) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
8775 6900 m
gs 1 -1 sc (bars) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
7425 6975 m
gs 1 -1 sc (name) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
6450 6975 m
gs 1 -1 sc (age) col0 sh gr
$F2psEnd
rs

%%EndDocument
 @endspecial 109 1656 a(Figur)o(e)f(2:)23 b(XML)18 b(V)m(iew)h(f)n(or)g
(Beers/Drink)o(ers/Bars.)-152 1973 y Fq(sue)j(a)f(SQL)f(query)i(to)f
(retrie)n(v)o(e)g(the)g(root)g(element,)h(then)f(one)h(SQL)e(query)-152
2061 y(for)26 b(each)h(child,)g(until)f(we)g(\002nd)g(a)g
Fn(person)f Fq(element,)i(etc.)44 b(This)26 b(nai)n(v)o(e)-152
2148 y(approach)i(to)f(XSL)-7 b(T)25 b(interpretation)i(ends)g(up)g
(materializing)g(the)g(entire)-152 2235 y(XML)19 b(document.)-77
2322 y(Our)28 b(approach)i(is)e(to)h(con)m(v)o(ert)g(the)f(entire)g
(XSL)-7 b(T)27 b(program)j(into)e(one)-152 2409 y(SQL)18
b(query)-5 b(.)23 b(The)c(query)g(depends)h(on)f(the)f(particular)h
(mapping)g(from)g(the)-152 2497 y(relational)29 b(data)f(to)h(XML;)e
(assuming)j(such)f(a)f(mapping,)k(the)c(resulting)-152
2584 y(SQL)18 b(query)i(is:)35 2724 y Fn(SELECT)44 b(person.phone)35
2812 y(FROM)g(person)35 2899 y(WHERE)g(person.name)f(=)i("Smith")-152
3039 y Fq(This)29 b(can)h(be)g(up)f(to)h(order)f(of)h(magnitudes)g(f)o
(aster)f(than)h(the)g(nai)n(v)o(e)f(ap-)-152 3127 y(proach.)23
b(In)14 b(addition,)i(if)e(there)h(e)o(xists)f(an)h(inde)o(x)g(on)g
Fn(name)e Fq(in)h(the)h(database,)-152 3214 y(then)20
b(the)f(relational)g(engine)g(can)h(further)f(impro)o(v)o(e)g
(performance.)-77 3301 y(The)29 b(or)o(ganization)h(of)g(the)f(paper)h
(is)f(as)h(follo)n(ws.)54 b(In)30 b(Section)f(2)h(we)-152
3388 y(pro)o(vide)17 b(some)g(e)o(xamples)g(of)f(XSL)-7
b(T)15 b(to)h(SQL)f(translation)h(to)g(illustrate)g(the)-152
3475 y(main)22 b(issues.)32 b(Section)21 b(3)h(describes)g(the)g
(architecture)g(of)g(our)g(translator)m(,)-152 3563 y(and)17
b(while)g(Section)f(4)g(describes)i(the)e(v)n(arious)h(components)i(in)
d(detail.)22 b(W)-6 b(e)-152 3650 y(discuss)21 b(the)f(optimizations)g
(done)h(to)f(produce)h(ef)n(\002cient)f(SQL)e(queries)j(in)-152
3737 y(Section)15 b(5.)22 b(Section)14 b(6)h(presents)g(the)g(results)f
(of)h(the)f(e)o(xperiments)i(on)f(TPC-)-152 3824 y(H)24
b(benchmark)i(queries.)40 b(Sections)25 b(7)f(and)h(8)g(discuss)g
(related)f(w)o(ork)h(and)-152 3911 y(conclusions.)-152
4107 y Fr(2.)100 b(EXAMPLES)34 b(OF)e(XSL)-9 b(T)33 b(T)n(O)g(SQL)g
(TRANS\255)23 4224 y(LA)-9 b(TIONS)-77 4332 y Fq(W)j(e)24
b(illustrate)f(here)i(some)f(e)o(xample)h(of)g(XSL)-7
b(T)22 b(to)j(SQL)e(translations,)-152 4419 y(highlighting)32
b(the)f(main)g(issues.)59 b(As)30 b(we)h(go)g(along,)k(the)30
b(fragment)i(of)-152 4506 y(XSL)-7 b(T)20 b(translated)i(by)g(us)g
(will)e(become)j(clear)l(.)30 b(Throughout)23 b(this)e(section)-152
4593 y(we)f(illustrate)f(our)g(queries)h(on)g(the)g(well-kno)n(wn)g
Fn(beers/drinkers/)-152 4680 y(bars)g Fq(database)h(schema)h(adapted)f
(from)g([17],)g(sho)n(wn)g(in)g(Figure)f(1.)28 b(W)-6
b(e)-152 4767 y(will)25 b(assume)g(it)g(is)g(e)o(xported)h(in)f(XML)g
(as)g(sho)n(wn)h(in)g(Figure)f(2.)42 b(Notice)-152 4855
y(that)17 b(there)g(is)g(some)g(redundanc)o(y)i(in)e(the)g(e)o(xported)
h(XML)f(data,)g(for)g(e)o(xam-)-152 4942 y(ple)22 b Fn(bars)f
Fq(are)h(accessible)g(either)f(directly)h(from)g Fn(drinkers)e
Fq(or)i(under)-152 5029 y Fn(beers)p Fq(.)-77 5116 y(W)-6
b(e)17 b(assume)h(the)g(XML)f(document)i(to)f(be)g(unordered,)h(and)f
(do)g(not)g(sup-)-152 5203 y(port)f(an)o(y)g(XSL)-7 b(T)15
b(e)o(xpressions)j(that)e(check)h(order)g(in)f(the)h(input.)22
b(F)o(or)16 b(e)o(xam-)-152 5290 y(ple)k(the)f Fn(beers)g
Fq(under)h Fn(drinkers)e Fq(form)i(an)g(unordered)h(collection.)k(It)
-152 5378 y(is)16 b(possible)h(to)f(e)o(xtend)h(our)g(techniques)h(to)e
(ordered)h(XML)f(vie)n(ws,)h(b)o(ut)f(this)p 2040 -148
1991 4 v 2040 510 4 659 v 2066 -70 a Fk(P2:)39 b(//b)q(eers/name/text)p
Fj(\(\))2066 70 y Fk(Q2:)19 b(SELECT)i(Beers.name)2164
139 y(FR)o(OM)58 b(Beers)2066 279 y(Q2':)38 b(SELECT)21
b(Beer.name)2203 349 y(FR)o(OM)59 b(Drink)o(ers,)19 b(Lik)o(es,)g
(Beers)2203 418 y(WHERE)h(Drink)o(ers.name)p Fj(=)p Fk(Lik)o(es.drink)o
(er)f(AND)2458 488 y(Lik)o(es.b)q(eer)p Fj(=)p Fk(Beers.name)p
4027 510 V 2040 513 1991 4 v 2297 657 a Fl(Figur)o(e)f(3:)24
b(Find)17 b(all)h(beers)h(lik)o(ed)f(by)h(some)g(drink)o(er)-7
b(.)2040 893 y Fq(is)20 b(be)o(yond)j(our)e(scope)g(here.)29
b(Furthermore,)21 b(we)g(will)f(consider)h(only)h(ele-)2040
980 y(ment,)d(attrib)o(ute,)g(and)h(te)o(xt)f(nodes)h(in)f(the)h(XML)f
(tree,)g(and)h(omit)f(from)g(our)2040 1067 y(discussion)28
b(other)g(kinds)f(of)g(nodes)h(such)g(as)f(comments)h(or)f(processing)
2040 1154 y(instructions.)2040 1305 y Fr(2.1)99 b(XP)o(ath)2115
1413 y Fq(XP)o(ath)23 b([5])h(is)g(a)f(component)j(of)e(XSL)-7
b(T)h(,)23 b(and)h(the)g(translation)h(to)e(SQL)2040
1500 y(must)15 b(handle)g(it.)21 b(F)o(or)14 b(e)o(xample)h(the)g(XP)o
(ath)e Fn(/doc/drinkers/name/)2040 1587 y(text\(\))18
b Fq(returns)h(all)f(drink)o(ers.)24 b(The)19 b(equi)n(v)n(alent)h(SQL)
e(is:)2274 1723 y Fn(SELECT)44 b(drinkers.name)f(FROM)h(drinkers)2115
1858 y Fq(F)o(or)20 b(a)h(less)f(ob)o(vious)i(e)o(xample,)g(consider)f
(the)g(query)h(in)e(Figure)h(3)g(with)2040 1945 y(tw)o(o)k(SQL)f
(queries)i Fi(Q)p Fj(2)f Fq(and)g Fi(Q)p Fj(2)2938 1914
y Fh(0)2961 1945 y Fq(.)41 b Fi(Q)p Fj(2)25 b Fq(is)g(not)g(a)g
(correct)g(translation)g(of)2040 2033 y Fi(P)11 b Fj(2)p
Fq(,)21 b(because)h(it)e(returns)i(all)e(beers,)h(while)g
Fi(P)11 b Fj(2)21 b Fq(returns)g(only)h(beers)f(lik)o(ed)2040
2120 y(by)g(some)g(drink)o(er)l(.)30 b(Indeed)21 b Fi(P)11
b Fj(2)21 b Fq(and)g Fi(Q)p Fj(2)3141 2088 y Fh(0)3184
2120 y Fq(ha)o(v)o(e)g(the)g(same)g(semantics.)28 b(In)2040
2207 y(particular)21 b Fi(Q)p Fj(2)2446 2175 y Fh(0)2489
2207 y Fq(preserv)o(es)g(the)g(multiplicities)e(of)i(the)g(beers)g(in)f
(the)h(same)2040 2294 y(w)o(ay)f(as)e Fi(P)11 b Fj(2)p
Fq(.)2115 2381 y Fi(Q)p Fj(2)2214 2350 y Fh(0)2267 2381
y Fq(is)30 b(much)i(more)f(e)o(xpensi)n(v)o(e)i(than)e
Fi(Q)p Fj(2)p Fq(,)i(since)f(it)e(performs)h(tw)o(o)2040
2468 y(joins,)21 b(while)f Fi(Q)p Fj(2)g Fq(is)g(a)g(simple)h
(projection.)28 b(In)21 b(some)f(cases)h(we)g(can)f(opti-)2040
2556 y(mize)g Fi(Q)p Fj(2)2304 2524 y Fh(0)2346 2556
y Fq(and)g(replace)h(it)e(with)g Fi(Q)p Fj(2)p Fq(,)h(namely)g(when)h
(the)f(follo)n(wing)g(con-)2040 2643 y(ditions)f(are)g(satis\002ed:)k
(e)n(v)o(ery)d(beer)f(is)g(lik)o(ed)h(by)f(at)g(least)g(one)g(drink)o
(er)m(,)h(and)2040 2730 y(the)26 b(user)f(speci\002es)h(that)f(the)g
(duplicates)i(in)e(the)g(answer)h(ha)o(v)o(e)g(to)f(be)h(re-)2040
2817 y(mo)o(v)o(ed.)32 b(In)21 b(this)g(case)h Fi(P)11
b Fj(2)21 b Fq(and)i Fi(Q)p Fj(2)e Fq(ha)o(v)o(e)g(the)h(same)g
(semantics,)g(and)g(our)2040 2904 y(system)29 b(can)h(optimize)f(the)g
(translation)g(and)h(construct)f Fi(Q)p Fj(2)g Fq(instead)g(of)2040
2991 y Fi(Q)p Fj(2)2139 2960 y Fh(0)2161 2991 y Fq(.)23
b(This)c(is)f(one)i(of)f(the)g(optimizations)g(we)g(consider)h(in)f
(Section)g(5.)2115 3079 y(The)f(XP)o(ath)f(fragment)h(supported)i(by)e
(our)h(system)f(includes)h(the)e(entire)2040 3166 y(language)i(e)o
(xcept)e(constructs)h(dealing)g(with)f(order)g(and)h(reference)g(tra)o
(v)o(er)o(-)2040 3253 y(sals.)25 b(F)o(or)19 b(e)o(xample)i(a)e(na)o
(vigation)h(axis)g(lik)o(e)g Fn(ancestor-or-self)d Fq(is)2040
3340 y(supported,)j(while)f Fn(following-sibling)d Fq(is)i(not.)2040
3491 y Fr(2.2)99 b(XSL)-9 b(T)26 b(T)-9 b(emplates)26
b(and)f(Modes)2115 3599 y Fq(A)g(basic)g(XSL)-7 b(T)24
b(program)i(is)f(a)g(collection)h(of)f(template)g(rules.)42
b(Each)2040 3686 y(template)19 b(rule)g(speci\002es)f(a)h(matching)h
(pattern)f(and)g(a)g(mode.)k(Presence)c(of)2040 3773
y(modes)j(allo)n(ws)g(dif)n(ferent)f(templates)h(to)f(be)h(chosen)h
(when)f(the)f(computa-)2040 3860 y(tion)e(arri)n(v)o(es)g(on)g(the)g
(same)h(node.)2115 3948 y(Figure)h(4)h(sho)n(ws)g(an)g(XSL)-7
b(T)20 b(program)i(that)f(returns)h(for)f(e)n(v)o(ery)i(drink)o(er)2040
4035 y(with)32 b(age)h(less)f(than)h(25,)j(pairs)c(of)g(\(drink)o(er)h
(name,)j(all)c(beers)h(ha)o(ving)2040 4122 y Fi(pr)r(ice)40
b(>)g Fj(10)30 b Fq(that)e(she)i(lik)o(es\).)53 b(The)28
b(program)i(has)g(3)f(modes.)53 b(In)29 b(the)2040 4209
y(\002rst)18 b(mode)h(\(the)g(def)o(ault)g(mode)g(is)f(0\))h(all)f
(drink)o(ers)h(with)f(age)h(less)g(than)g(25)2040 4296
y(are)i(selected.)30 b(In)21 b(the)g(second)h(mode)g(\(mode)f(=1\),)h
(for)f(those)g(drink)o(ers)h(all)2040 4383 y(beers)g(priced)g(less)f
(than)h(10)g(are)f(selected.)32 b(In)21 b(the)g(third)h(mode)g(the)g
(result)2040 4471 y(elements)d(are)g(created.)2115 4558
y(In)i(general)h(templates)g(and)g(modes)g(are)g(also)f(used)i(to)e
(modularize)h(the)2040 4645 y(program.)i(The)19 b(corresponding)i(SQL)d
(query)i(is)e(also)h(sho)n(wn.)2040 4796 y Fr(2.3)99
b(Recursion)26 b(in)f(XSL)-9 b(T)2115 4904 y Fq(Both)28
b(XSL)-7 b(T)26 b(and)j(XP)o(ath)e(can)i(tra)o(v)o(erse)e(the)h(XML)g
(tree)g(recursi)n(v)o(ely)-5 b(.)2040 4991 y(Consider)21
b(the)g(XP)o(ath)f(e)o(xpression)i Fn(//barname)d Fq(that)i(retrie)n(v)
o(es)g(all)f(bar)o(-)2040 5078 y(names.)27 b(In)21 b(absence)g(of)f
(XML)g(schema)h(information)g(it)e(is)h(impossible)g(to)2040
5165 y(e)o(xpress)h(this)f(query)h(in)g(SQL,)d(because)k(we)e(need)h
(to)f(na)o(vigate)h(arbitrarily)2040 5252 y(deep)k(in)f(the)g(XML)g
(document)2885 5220 y Fg(1)2916 5252 y Fq(.)38 b(Ho)n(we)n(v)o(er)m(,)
26 b(in)e(the)g(case)g(of)g(XML)g(data)p 2040 5292 797
4 v 2043 5346 a Ff(1)2077 5378 y Fq(Some)33 b(SQL)e(implementations)i
(support)g(recursi)n(v)o(e)f(queries)h(and)g(can)p eop
%%Page: 3 3
3 2 bop -152 -148 1991 4 v -152 1253 4 1402 v -126 -95
a Fe(<)20 b Fk(xsl:template)e(matc)o(h)p Fj(=)p Fk("drink)o(ers[age)i
Fe(<)g Fk(25)g(]")g Fe(>)-48 -25 y(<)g Fk(xsl:apply-template)e(mo)q(de)
i Fj(=)f Fk(1)h(/)p Fe(>)-126 45 y(<)g Fk(/)p Fe(>)-126
114 y(<)g Fk(xsl:template)e(matc)o(h)p Fj(=)p Fk("b)q(eers[price)k
Fe(<)d Fk(10)h(])g(mo)q(de)f Fj(=)g Fk(1")40 b Fe(>)-67
184 y(<)19 b Fk(result)p Fe(>)-8 254 y(<)39 b Fk(xsl:apply-template)18
b(select)p Fj(=)j Fk("../name")e(mo)q(de)p Fj(=)p Fk(2)g(/)p
Fe(>)-8 324 y(<)39 b Fk(xsl:apply-template)18 b(select)p
Fj(=)j Fk(")59 b(name")19 b(mo)q(de)p Fj(=)p Fk(2)g(/)p
Fe(>)-67 393 y(<)g Fk(/result)p Fe(>)-126 463 y(<)h Fk(/)p
Fe(>)-126 603 y(<)g Fk(xsl:template)e(matc)o(h)p Fj(=)p
Fk("name")h(mo)q(de)p Fj(=)p Fk(2)g Fe(>)-67 672 y(<)g
Fk(xsl:v)m(alue-of)g(select)i Fj(=)e Fk(".")h(/)p Fe(>)-126
742 y(<)g Fk(/)p Fe(>)-126 882 y Fk(SELECT)h(drink)o(ers.name,)d(lik)o
(es.name)-126 951 y(FR)o(OM)59 b(drink)o(ers,)19 b(lik)o(es,)f(b)q
(eers)-126 1021 y(WHERE)i(drink)o(ers.age)h Fe(<)f Fk(25)g(AND)109
1091 y(drink)o(ers.name)f Fj(=)h Fk(lik)o(es.drink)o(er)e(AND)109
1160 y(b)q(eers.price)42 b Fe(<)19 b Fk(10)i(AND)109
1230 y(b)q(eers.name)f Fj(=)g Fk(lik)o(es.b)q(eer)p 1835
1253 V -152 1256 1991 4 v -152 1399 a Fl(Figur)o(e)f(4:)24
b(XSL)-7 b(T)18 b(pr)o(ogram)i(using)e(modes:)24 b(F)n(or)19
b(e)o(v)o(ery)i(drink)o(er)d(with)-152 1486 y(age)25
b(less)f(than)f(25,)j(r)o(etur)o(n)d(all)h(pairs)g(\(drink)o(er)f
(name,)i(beers)f(ha)n(ving)-152 1573 y(price)19 b(less)g(than)f
Fj(10)h Fl(that)f(she)h(lik)o(es\))p -152 1698 V -152
3247 4 1549 v -126 1752 a Fe(<)h Fk(xsl:template)e(matc)o(h)p
Fj(=)p Fk("drink)o(ers[name)h Fj(==)g Fk('Brian']")p
Fe(>)-48 1822 y(<)h Fk(xsl:apply-template)e(select)p
Fj(=)p Fk("/drink)o(ers")k(mo)q(de)p Fj(=)p Fk(1)p Fe(>)11
1891 y(<)e Fk(xsl:param)e(name)p Fj(=)p Fk('sign')g(select)p
Fj(=)p Fk("astrosign"/)p Fe(>)-48 1961 y(<)i Fk(/)p Fe(>)-126
2031 y(<)g Fk(/)p Fe(>)-126 2101 y(<)g Fk(xsl:template)e(matc)o(h)p
Fj(=)p Fk("drink)o(ers")i(mo)q(de)p Fj(=)p Fk(1)p Fe(>)-48
2170 y(<)g Fk(xsl:param)e(name)p Fj(=)p Fk('sign'/)p
Fe(>)-48 2240 y(<)i Fk(xsl:v)m(ariable)f(name)p Fj(=)p
Fk('currSign')h(select)p Fj(=)p Fk("astrosign"/)p Fe(>)-48
2310 y(<)g Fk(xsl:if)e(test)p Fj(=)p Fk("$sign)j Fj(==)e
Fk($currSign")p Fe(>)31 2380 y(<)g Fk(result)p Fe(>)109
2449 y(<)h Fk(xsl:v)m(alue-of)f(select)p Fj(=)p Fk("name"/)p
Fe(>)31 2519 y(<)g Fk(/result)p Fe(>)-48 2589 y(<)h Fk(/)p
Fe(>)-126 2659 y(<)g Fk(/)p Fe(>)-126 2798 y Fk(SELECT)h(drink)o
(ers2.name,)-126 2868 y(FR)o(OM)39 b(drink)o(ers)20 b(as)g(drink)o
(ers1,)g(drink)o(ers)f(as)h(drink)o(ers2,)50 2938 y(astrosign)h(as)f
(astrosign1,)h(astrosign)f(as)g(astrosign2)-126 3007
y(WHERE)g(astrosign1.sign)h Fj(=)e Fk(astrosign2.sign)i(AND)129
3077 y(drink)o(ers1.name)e Fj(=)g Fk('Brian')h(AND)129
3147 y(drink)o(ers1.name)f Fj(=)g Fk(astrosign1.drink)o(er)j(AND)129
3217 y(drink)o(ers2.name)d Fj(=)g Fk(astrosign2.drink)o(er)p
1835 3247 V -152 3250 1991 4 v -33 3393 a Fl(Figur)o(e)f(5:)24
b(All)18 b(drink)o(ers)g(with)f(the)i(same)g(astr)o(osign)g(as)g(Brian)
-152 3656 y Fq(generated)24 b(from)e(relational)h(databases,)h(the)e
(resulting)h(XML)f(document)-152 3743 y(has)d(a)f(non-recursi)n(v)o(e)i
(schema,)f(and)g(we)f(can)h(unfold)g(recursi)n(v)o(e)g(programs)-152
3831 y(into)j(non-recursi)n(v)o(e)i(ones.)33 b(Using)22
b(the)h(schema)f(in)g(Fig.)g(2,)g(the)g(unfolded)-152
3918 y(XP)o(ath)d(e)o(xpression)h(is)e Fn(/drinkers/beers/barname)-77
4005 y Fq(Recursion)32 b(can)h(also)e(be)h(e)o(xpressed)h(in)f(XSL)-7
b(T)30 b(through)j(templates.)-152 4092 y(Gi)n(v)o(en)f(a)f
(non-recursi)n(v)o(e)i(XML)e(schema,)k(this)c(recursion)h(can)g(also)f
(be)-152 4179 y(eliminated,)23 b(by)f(introducing)h(additional)g(XSL)-7
b(T)20 b(templates)j(and)f(modes.)-152 4266 y(W)-6 b(e)19
b(describe)g(the)g(general)h(technique)g(in)f(Section)g(4.1.)-152
4436 y Fr(2.4)99 b(V)-9 b(ariables)25 b(and)g(P)o(arameters)h(in)f(XSL)
-9 b(T)-77 4543 y Fq(In)22 b(XSL)-7 b(T)20 b(one)i(can)h(bind)f(some)g
(v)n(alue)h(to)e(a)h(parameter)g(in)g(one)g(part)g(of)-152
4631 y(the)29 b(tree,)h(then)f(use)f(it)g(in)g(some)h(other)f(part.)52
b(In)28 b(SQL)f(this)h(becomes)i(a)-152 4718 y(join)c(operation,)j
(correlating)e(tw)o(o)f(tables.)45 b(F)o(or)25 b(e)o(xample,)k
(consider)e(the)-152 4805 y(query)21 b(in)f(Figure)g(5,)g(which)h
(\002nds)f(all)g(drink)o(ers)h(with)e(the)i(same)f(astrosign)-152
4892 y(as)i(\223Brian\224.)32 b(A)22 b(parameter)g(is)g(used)g(to)g
(pass)g(the)g(v)n(alue)h(of)f(\223Brian')l(s\224)g(as-)-152
4979 y(trosign,)d(which)h(is)e(matched)i(against)f(e)n(v)o(ery)h(drink)
o(er')l(s)f(astrosign.)-77 5067 y(In)h(this)f(e)o(xample,)i(the)e(v)n
(alue)i(stored)f(in)f(v)n(ariable)i(and)f(parameters)g(w)o(as)-152
5154 y(a)26 b(single)g(node.)45 b(In)26 b(general,)i(the)o(y)e(can)g
(store)g(node-sets)g(\(speci\002ed)h(us-)p -152 5230
797 4 v -152 5303 a(e)o(xpress)f(such)g(XSL)-7 b(T)24
b(programs;)29 b(we)c(do)h(not)f(generate)h(recursi)n(v)o(e)g(SQL)-152
5378 y(queries)20 b(in)f(this)f(w)o(ork.)p 2040 -148
1991 4 v 2040 762 4 911 v 2066 -97 a Fe(<)h Fk(xsl:template)g(matc)o(h)
p Fj(=)p Fk("drink)o(ers")p Fe(>)2144 -27 y(<)h Fk(result)p
Fe(>)2223 42 y(<)f Fk(xsl:v)m(alue-of/)p Fe(>)2223 112
y(<)g Fk(xsl:v)m(alue-of)g(select)p Fj(=)p Fk(min)p Fj(\()p
Fk("b)q(eers/price")p Fj(\))p Fk(/)p Fe(>)2144 182 y(<)h
Fk(/result)p Fe(>)2066 252 y(<)f Fk(/)p Fe(>)2066 391
y Fk(SELECT)h(drink)o(ers2.name,)f(min)p Fj(\()p Fk(b)q(eers4.price)p
Fj(\))2066 461 y Fk(FR)o(OM)78 b(drink)o(ers)20 b(as)g(drink)o(ers2,)f
(lik)o(es)g(as)h(lik)o(es3,)2281 531 y(b)q(eers)i(as)d(b)q(eers4)2066
600 y(WHERE)h(drink)o(ers2.name)f Fj(=)h Fk(lik)o(es3.drink)o(er)f(AND)
2321 670 y(b)q(eers4.name)h Fj(=)f Fk(lik)o(es3.b)q(eer)2066
740 y(GR)o(OUP)g(BY)g(drink)o(ers2.name)p 4027 762 V
2040 765 1991 4 v 2040 908 a Fl(Figur)o(e)d(6:)22 b(F)n(or)16
b(e)o(v)o(ery)i(drink)o(er)e(\002nd)e(the)i(minimum)g(price)g(of)h
(beer)f(she)2040 995 y(lik)o(es.)2040 1242 y Fq(ing)25
b(XP)o(ath,)f(for)g(instance\),)i(and)f(also)f(results)g(of)g(another)h
(template)g(call)2040 1329 y(\(analogous)g(to)e(temporary)i(tables)e
(in)g(SQL\).)f(Our)i(translation)f(of)h(XSL)-7 b(T)2040
1416 y(to)19 b(SQL)f(supports)i(all)e(possible)i(v)n(alues)f(tak)o(en)h
(on)g(by)f(v)n(ariables.)2040 1583 y Fr(2.5)99 b(Aggr)n(egation)2115
1691 y Fq(Both)19 b(XSL)-7 b(T)18 b(and)j(SQL)d(support)i(aggre)o
(gates,)g(b)o(ut)g(there)f(is)g(a)g(a)h(signi\002-)2040
1778 y(cant)f(dif)n(ference:)25 b(in)19 b(XSL)-7 b(T)18
b(aggre)o(gate)h(operator)h(is)f(applied)h(to)f(a)g(subtree)2040
1865 y(of)e(in)f(the)h(input,)g(while)g(in)f(SQL)g(it)g(is)g(applied)i
(to)e(a)h(group)h(using)f(a)f Fn(Group)2040 1952 y(By)29
b Fq(clause.)55 b(Consider)30 b(the)f(query)h(in)g(Figure)f(6,)j(which)
d(\002nds)h(for)f(e)n(v-)2040 2039 y(ery)22 b(drink)o(er)h(the)e
(minimum)i(price)e(of)h(all)f(beers)i(she)f(lik)o(es.)31
b(In)22 b(XSL)-7 b(T)21 b(we)2040 2126 y(simply)27 b(apply)h
Fn(min)f Fq(to)g(a)g(subtree.)48 b(In)27 b(SQL)g(we)g(ha)o(v)o(e)g(to)g
Fn(Group)44 b(By)2040 2214 y Fq(drink)o(ers.name.)2115
2301 y(F)o(or)29 b(a)g(glimpse)h(at)f(the)g(dif)n(\002culties)g(in)m(v)
o(olv)o(ed)h(in)f(translating)h(aggre-)2040 2388 y(gates,)20
b(consider)g(the)g(query)h(in)e(Figure)h(7,)g(which,)g(for)g(e)n(v)o
(ery)g(age,)g(returns)2040 2475 y(the)e(cheapest)i(price)e(of)g(all)g
(beers)g(lik)o(ed)h(by)g(people)g(of)f(that)g(age.)23
b(In)c(XSL)-7 b(T)2040 2562 y(we)23 b(\002rst)f(\002nd)h(all)g(ages,)h
(and)g(then)f(for)g(each)h(age)f(apply)h Fn(min)f Fq(to)g(a)f(node-)
2040 2649 y(set,)h(which)g(in)f(this)g(case)h(in)f(not)h(a)f(sub-tree.)
34 b(The)23 b(correct)f(SQL)g(transla-)2040 2737 y(tion)e(for)g(the)h
(XSL)-7 b(T)19 b(program)i(is)e(sho)n(wn)j(ne)o(xt)e(follo)n(wed)h(by)g
(an)f(incorrect)2040 2824 y(translation.)33 b(The)22
b(dif)n(ference)h(is)e(subtle.)33 b(In)22 b(XSL)-7 b(T)21
b(we)h(collect)g(all)f(ages,)2040 2911 y(with)g(their)g
(multiplicities.)30 b(That)21 b(is,)g(if)g(three)h(persons)g(are)g(29)g
(years)f(old,)2040 2998 y(then)29 b(there)g(will)f(be)h(three)g
(results)g(with)f(29.)54 b(The)28 b(wrong)i(SQL)d(query)2040
3085 y(contains)i(a)f(single)g(such)h(entry)-5 b(.)50
b(The)28 b(correct)g(SQL)f(query)i(has)f(an)g(ad-)2040
3173 y(ditional)22 b Fn(GroupBy)d Fq(attrib)o(ute)i(\()p
Fn(name)p Fq(\))f(ensuring)j(that)e(each)h(age)g(occurs)2040
3260 y(the)g(correct)f(number)i(of)e(times)g(in)h(the)f(output.)32
b(See)21 b(also)g(our)h(discussion)2040 3347 y(in)d(Section)g(6.)2040
3513 y Fr(2.6)99 b(Other)26 b(XSL)-9 b(T)26 b(Constructs)2115
3621 y Fq(Apart)i(from)g(those)h(already)g(mentioned,)i(our)e
(translation)g(also)f(sup-)2040 3708 y(ports)h Fp(if-[else])p
Fq(,)g Fp(for)o(-eac)o(h)p Fq(,)i(and)e Fp(case)g Fq(constructs.)52
b(The)28 b Fp(for)o(-eac)o(h)h Fq(con-)2040 3796 y(struct)23
b(is)g(equi)n(v)n(alent)h(to)f(iteration)g(using)g(separate)h(template)
f(rules.)35 b(The)2040 3883 y Fp(case)20 b Fq(construct)f(is)g(equi)n
(v)n(alent)h(to)f(multiple)f Fp(if)h Fq(statements.)2040
4049 y Fr(2.7)99 b(Challenges)2115 4157 y Fq(The)22 b(translation)h
(from)g(this)g(XSL)-7 b(T)21 b(fragment)i(into)g(SQL)e(poses)j(some)
2040 4244 y(major)29 b(challenges.)52 b(First,)30 b(we)e(need)h(to)f
(map)h(from)g(a)f(functional)h(pro-)2040 4332 y(gramming)j(style)e(to)h
(a)g(declarati)n(v)o(e)g(style.)58 b(T)-5 b(emplates)31
b(correspond)h(to)2040 4419 y(functions,)17 b(and)e(their)g(call)g
(graph)h(needs)g(to)f(be)g(con)m(v)o(erted)i(into)e(SQL)f(state-)2040
4506 y(ments.)23 b(Second,)c(we)f(need)h(to)f(cope)h(with)e(general)i
(recursion,)g(both)g(at)e(the)2040 4593 y(XP)o(ath)25
b(le)n(v)o(el)h(and)h(in)e(XSL)-7 b(T)25 b(templates.)44
b(This)25 b(is)h(not)g(possible)g(in)g(gen-)2040 4680
y(eral,)g(b)o(ut)f(it)f(is)g(al)o(w)o(ays)i(possible)f(when)h(the)f
(XML)f(document)j(is)d(gener)o(-)2040 4767 y(ated)g(from)h(a)f
(relational)g(database,)i(which)e(is)g(our)g(case.)39
b(Third,)25 b(param-)2040 4855 y(eters)g(add)h(another)g(source)f(of)g
(comple)o(xities,)i(and)f(the)o(y)f(typically)h(need)2040
4942 y(to)h(be)g(con)m(v)o(erted)h(into)f(joins)g(between)g(v)n(alues)h
(from)f(dif)n(ferent)g(parts)f(of)2040 5029 y(the)h(XML)f(tree.)45
b(Finally)-5 b(,)28 b(XSL)-7 b(T)g(-style)25 b(aggre)o(gation)i(needs)h
(to)e(be)h(con-)2040 5116 y(v)o(erted)g(into)g(SQL-style)f(aggre)o
(gation.)47 b(This)27 b(often)g(in)m(v)o(olv)o(es)g(introduc-)2040
5203 y(ing)18 b Fn(Group)44 b(By)17 b Fq(clauses)i(and,)f(sometimes,)g
(comple)o(x)h(conditions)g(in)e(the)2040 5290 y Fn(Having)h
Fq(clause.)2115 5378 y(Figure)27 b(8)g(illustrates)g(a)g(more)g(comple)
o(x)i(e)o(xample)f(with)e(aggre)o(gation)p eop
%%Page: 4 4
4 3 bop -152 -148 1991 4 v -152 1620 4 1769 v -126 -97
a Fe(<)20 b Fk(xsl:template)e(matc)o(h)p Fj(=)p Fk("age")p
Fe(>)-28 -27 y(<)i Fk(xsl:v)m(ariable)f(name)p Fj(=)p
Fk("currage")p Fe(>)31 42 y(<)g Fk(xsl:v)m(alue-of/)p
Fe(>)-28 112 y(<)h Fk(/)p Fe(>)-48 182 y(<)g Fk(result)p
Fe(>)31 252 y(<)f Fk(xsl:v)m(alue-of/)p Fe(>)31 321 y(<)g
Fk(xsl:v)m(alue-of)g(select)p Fj(=)p Fk(min)p Fj(\()p
Fk("/do)q(c/drink)o(ers[age)j Fj(==)p Fk($currage)f(]/)1109
404 y(b)q(eers/price")p Fj(\))p Fk(/)p Fe(>)-48 474 y(<)f
Fk(/result)p Fe(>)-126 544 y(<)g Fk(/)p Fe(>)-126 683
y Fk(Correct)i(SQL:)-126 753 y(SELECT)f(drink)o(ers2.age,)f(min)p
Fj(\()p Fk(b)q(eers.price)p Fj(\))-126 823 y Fk(FR)o(OM)59
b(drink)o(ers,)19 b(lik)o(es,)f(b)q(eers,)j(drink)o(ers2)-126
893 y(WHERE)f(lik)o(es.drink)o(er)f Fj(=)h Fk(drink)o(ers.name)e(AND)
109 962 y(b)q(eers.name)i Fj(=)g Fk(lik)o(es.b)q(eer)39
b(AND)109 1032 y(drink)o(er2.age)21 b Fj(=)f Fk(drink)o(ers.age)-126
1102 y(GR)o(OUP)f(BY)g(drink)o(ers2.age,)i(drink)o(ers2.name)-126
1241 y(Incorrect)h(SQL:)-126 1311 y(SELECT)f(drink)o(ers.age,)f(min)p
Fj(\()p Fk(b)q(eers.price)p Fj(\))-126 1381 y Fk(FR)o(OM)78
b(drink)o(ers,)20 b(lik)o(es,)e(b)q(eers)-126 1450 y(WHERE)i(lik)o
(es.drink)o(er)f Fj(=)h Fk(drink)o(ers.name)e(AND)148
1520 y(b)q(eers.name)j Fj(=)e Fk(lik)o(es.b)q(eer)-126
1590 y(GR)o(OUP)g(BY)g(drink)o(ers.age)p 1835 1620 V
-152 1623 1991 4 v -152 1767 a Fl(Figur)o(e)k(7:)33 b(F)n(or)24
b(e)o(v)o(ery)h(age)f(\002nd)e(the)h(minimum)g(price)h(of)f(beer)h(lik)
o(ed)-152 1854 y(by)19 b(some)g(drink)o(er)f(of)h(that)g(age.)p
-152 1972 V -152 4365 4 2394 v -126 2023 a Fe(<)h Fk(xsl:template)e
(matc)o(h)p Fj(=)p Fk("drink)o(ers")p Fe(>)-48 2093 y(<)i
Fk(xsl:apply-template)e(select)p Fj(=)p Fk("b)q(eers/price")24
b(mo)q(de)p Fj(=)p Fk(1)p Fe(>)31 2162 y(<)19 b Fk(xsl:with-param)f
(name)p Fj(=)p Fk("priceSet")k(select)p Fj(=)p Fk("b)q(eers/price"/)p
Fe(>)31 2232 y(<)d Fk(xsl:with-param)f(name)p Fj(=)p
Fk("drink)o(erName)h(select)p Fj(=)p Fk("name"")p Fe(>)-48
2302 y(<)h Fk(/)p Fe(>)-126 2372 y(<)g Fk(/)p Fe(>)-126
2441 y(<)g Fk(xsl:template)e(matc)o(h)p Fj(=)p Fk("price")j(mo)q(de)p
Fj(=)p Fk(1)p Fe(>)-48 2511 y(<)f Fk(xsl:param)e(name)p
Fj(=)p Fk("priceSet")j(select)p Fj(=)p Fk("default1"/)p
Fe(>)-48 2581 y(<)f Fk(xsl:param)e(name)p Fj(=)p Fk("drink)o(erName")h
(select)p Fj(=)p Fk("default2"/)p Fe(>)-48 2651 y(<)h
Fk(xsl:v)m(ariable)f(name)p Fj(=)p Fk("currPrice")p Fe(>)31
2720 y(<)g Fk(xsl:v)m(alue-of/)p Fe(>)-48 2790 y(<)h
Fk(/)p Fe(>)-48 2860 y(<)g Fk(xsl:v)m(ariable)f(name)p
Fj(=)p Fk("currBeer")p Fe(>)31 2930 y(<)g Fk(xsl:v)m(alue-of)g(select)p
Fj(=)p Fk(..)h(/)p Fe(>)-48 2999 y(<)g Fk(/)p Fe(>)-48
3069 y(<)g Fk(xsl:if)e(test)p Fj(=)p Fk($currPrice)p
Fj(==)p Fk(min)p Fj(\()p Fk($priceSet)p Fj(\))p Fk(/)p
Fe(>)31 3139 y(<)h Fk(result)p Fe(>)109 3208 y(<)h Fk(xsl:v)m(alue-of)f
(select)p Fj(=)p Fk($drink)o(erName)p Fe(>)-48 3278 y(<)h
Fk(xsl:v)m(alue-of)f(select)p Fj(=)p Fk($currBeer)p Fe(>)-48
3348 y(<)h Fk(xsl:v)m(alue-of)f(select)p Fj(=)p Fd($)p
Fk(currPrice)p Fe(>)31 3418 y(<)g Fk(/result)p Fe(>)-48
3487 y(<)h Fk(/)p Fe(>)-126 3557 y(<)g Fk(/)p Fe(>)-126
3697 y Fk(SELECT)h(drink)o(ers.name,)d(lik)o(es3.b)q(eer,)i(b)q
(eers4.price)-126 3766 y(FR)o(OM)78 b(drink)o(ers,)20
b(b)q(eers)h(as)f(b)q(eers6,)h(lik)o(es)d(as)i(lik)o(es5,)188
3836 y(b)q(eers)h(as)e(b)q(eers4,)j(lik)o(es)c(as)i(lik)o(es3)-126
3906 y(WHERE)g(drink)o(ers.name)f Fj(=)h Fk(lik)o(es3.name)d(AND)109
3976 y(b)q(eers4.name)k Fj(=)e Fk(lik)o(es3.b)q(eer)h(AND)109
4045 y(drink)o(ers.name)f Fj(=)h Fk(lik)o(es5.name)d(AND)109
4115 y(b)q(eers6.name)k Fj(=)e Fk(lik)o(es5.b)q(eer)-126
4185 y(GR)o(OUP)g(BY)g(b)q(eers4.name,)h(drink)o(ers2.name,)f(lik)o
(es3.b)q(eer,)207 4255 y(b)q(eers4.price,)j(lik)o(es3.name)-126
4324 y(HA)-6 b(VING)18 b(b)q(eers4.price)k Fj(=)e Fk(min)p
Fj(\()p Fk(b)q(eers6.price)p Fj(\))p 1835 4365 V -152
4368 1991 4 v 17 4512 a Fl(Figur)o(e)e(8:)24 b(Cheapest)18
b(beer)h(and)f(price)g(f)n(or)i(e)o(v)o(ery)g(drink)o(er)-152
4767 y Fq(and)31 b(parameters.)56 b(The)30 b(query)h(\002nds)f(for)f(e)
n(v)o(ery)i(drink)o(er)g(the)f(cheapest)-152 4855 y(beer)25
b(she)g(lik)o(es)g(and)g(it')l(s)f(price.)39 b(Notice)25
b(the)g(major)f(stylistic)g(dif)n(ference)-152 4942 y(between)17
b(XSL)-7 b(T)15 b(and)i(SQL.)e(In)h(XSL)-7 b(T)15 b(we)h(compute)h(the)
f(minimum)h(price,)-152 5029 y(bind)23 b(it)e(to)h(a)g(parameter)m(,)h
(then)f(search)h(for)f(the)g(beer)g(with)g(that)g(price)g(and)-152
5116 y(retrie)n(v)o(e)d(its)f(name.)24 b(In)19 b(SQL)f(we)h(use)g(the)g
Fn(Having)f Fq(clause.)-77 5203 y(Orthogonal)28 b(to)f(the)g
(translation)h(challenge)g(per)f(se,)i(we)e(ha)o(v)o(e)g(to)g(ad-)-152
5290 y(dress)33 b(the)g(quality)h(of)e(the)h(generated)h(SQL)e
(queries.)65 b(Automatically)-152 5378 y(generated)33
b(SQL)c(queries)j(tend)g(to)e(be)i(redundant)g(and)g(ha)o(v)o(e)f
(unneces-)2040 1363 y @beginspecial 0 @llx 0 @lly 705
@urx 536 @ury 2391 @rwi @setspecial
%%BeginDocument: p226-jain-arch.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: arch.eps
%%Creator: fig2dev Version 3.2 Patchlevel 3c
%%CreationDate: Fri Mar  1 14:06:20 2002
%%For: ratul@krypton.cs.washington.edu (Ratul Mahajan)
%%BoundingBox: 0 0 705 536
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 536 moveto 0 0 lineto 705 0 lineto 705 536 lineto closepath clip newpath
-71.0 596.0 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
%%Page: 1 1
10 setmiterlimit
 0.06000 0.06000 sc
%
% Fig objects follow
%
% Polyline
7.500 slw
n 3300 2400 m 12300 2400 l 12300 7800 l 3300 7800 l
 cp gs col31 1.00 shd ef gr gs col0 s gr 
% Polyline
30.000 slw
n 7275 6375 m 8775 6375 l 8775 7200 l 7275 7200 l
 cp gs col0 s gr 
/Times-Bold ff 270.00 scf sf
7575 6825 m
gs 1 -1 sc (Querier) col0 sh gr
% Polyline
n 4275 6375 m 5775 6375 l 5775 7200 l 4275 7200 l
 cp gs col0 s gr 
/Times-Bold ff 270.00 scf sf
4575 6825 m
gs 1 -1 sc (Tagger) col0 sh gr
% Arc
n 8025.0 8831.2 543.8 133.6 46.4 arcn
gs col0 s gr

% Ellipse
n 8025 8025 375 225 0 360 DrawEllipse gs col0 s gr

% Polyline
n 7650 8025 m
 7650 9225 l gs col0 s gr 
% Polyline
n 8400 8025 m
 8400 9225 l gs col0 s gr 
% Ellipse
n 11100 8625 900 375 0 360 DrawEllipse gs col0 s gr

/Times-Bold ff 270.00 scf sf
10350 8700 m
gs 1 -1 sc (RDB Schema) col0 sh gr
% Ellipse
n 7425 2850 900 375 0 360 DrawEllipse gs col0 s gr

/Times-Bold ff 270.00 scf sf
6675 2925 m
gs 1 -1 sc (XML Schema) col0 sh gr
/Times-Bold ff 270.00 scf sf
10275 1500 m
gs 1 -1 sc (View Tree) col0 sh gr
% Ellipse
n 10875 1425 900 375 0 360 DrawEllipse gs col0 s gr

/Times-Bold ff 270.00 scf sf
1200 1725 m
gs 1 -1 sc (Query) col0 sh gr
/Times-Bold ff 270.00 scf sf
1275 1425 m
gs 1 -1 sc (XSLT) col0 sh gr
% Polyline
gs  clippath
7290 4515 m 7290 4335 l 6850 4335 l 7210 4425 l 6850 4515 l cp
eoclip
n 5850 4425 m
 7275 4425 l gs col0 s gr gr

% arrowhead
n 6850 4515 m 7210 4425 l 6850 4335 l 6850 4515 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
10365 4515 m 10365 4335 l 9925 4335 l 10285 4425 l 9925 4515 l cp
eoclip
n 8775 4425 m
 10350 4425 l gs col0 s gr gr

% arrowhead
n 9925 4515 m 10285 4425 l 9925 4335 l 9925 4515 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
8760 6660 m 8760 6840 l 9200 6840 l 8840 6750 l 9200 6660 l cp
eoclip
n 10350 6750 m
 8775 6750 l gs col0 s gr gr

% arrowhead
n 9200 6660 m 8840 6750 l 9200 6840 l 9200 6660 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
5185 3910 m 5290 4056 l 5647 3799 l 5303 3937 l 5542 3653 l cp
eoclip
n 6600 3000 m
 5250 3975 l gs col0 s gr gr

% arrowhead
n 5542 3653 m 5303 3937 l 5647 3799 l 5542 3653 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
7872 4022 m 8039 3955 l 7875 3547 l 7926 3915 l 7708 3614 l cp
eoclip
n 7650 3225 m
 7950 3975 l gs col0 s gr gr

% arrowhead
n 7708 3614 m 7926 3915 l 7875 3547 l 7708 3614 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
10860 4215 m 11040 4215 l 11040 3775 l 10950 4135 l 10860 3775 l cp
eoclip
n 10950 1800 m
 10950 4200 l gs col0 s gr gr

% arrowhead
n 10860 3775 m 10950 4135 l 11040 3775 l 10860 3775 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
11040 6885 m 10860 6885 l 10860 7325 l 10950 6965 l 11040 7325 l cp
eoclip
n 10950 8175 m
 10950 6900 l gs col0 s gr gr

% arrowhead
n 11040 7325 m 10950 6965 l 10860 7325 l 11040 7325 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
5760 6660 m 5760 6840 l 6200 6840 l 5840 6750 l 6200 6660 l cp
eoclip
n 7275 6750 m
 5775 6750 l gs col0 s gr gr

% arrowhead
n 6200 6660 m 5840 6750 l 6200 6840 l 6200 6660 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
2160 6660 m 2160 6840 l 2600 6840 l 2240 6750 l 2600 6660 l cp
eoclip
n 4200 6750 m
 2175 6750 l gs col0 s gr gr

% arrowhead
n 2600 6660 m 2240 6750 l 2600 6840 l 2600 6660 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
8115 7185 m 7935 7185 l 7935 7625 l 8025 7265 l 8115 7625 l cp
eoclip
n 8025 8100 m
 8025 7200 l gs col0 s gr gr

% arrowhead
n 8115 7625 m 8025 7265 l 7935 7625 l 8115 7625 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
n 10350 4200 m 11700 4200 l 11700 6900 l 10350 6900 l
 cp gs col0 s gr 
% Polyline
n 4275 3975 m 5850 3975 l 5850 4800 l 4275 4800 l
 cp gs col0 s gr 
% Polyline
n 7275 3975 m 8775 3975 l 8775 4875 l 7275 4875 l
 cp gs col0 s gr 
% Polyline
gs  clippath
4215 4590 m 4215 4410 l 3775 4410 l 4135 4500 l 3775 4590 l cp
eoclip
n 1650 1800 m 1650 4500 l
 4200 4500 l gs col0 s gr gr

% arrowhead
n 3775 4590 m 4135 4500 l 3775 4410 l 3775 4590 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
5010 6315 m 5190 6315 l 5190 5875 l 5100 6235 l 5010 5875 l cp
eoclip
n 3600 4500 m 3600 5700 l 5100 5700 l
 5100 6300 l gs col0 s gr gr

% arrowhead
n 5010 5875 m 5100 6235 l 5190 5875 l 5010 5875 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
11835 1410 m 11835 1590 l 12275 1590 l 11915 1500 l 12275 1410 l cp
eoclip
n 8100 9375 m 8100 9900 l 12900 9900 l 12900 1500 l
 11850 1500 l gs col0 s gr gr

% arrowhead
n 12275 1410 m 11915 1500 l 12275 1590 l 12275 1410 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
7110 1335 m 7110 1515 l 7550 1515 l 7190 1425 l 7550 1335 l cp
eoclip
n 9900 1425 m
 7125 1425 l gs col0 s gr gr

% arrowhead
n 7550 1335 m 7190 1425 l 7550 1515 l 7550 1335 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
8310 2760 m 8310 2940 l 8750 2940 l 8390 2850 l 8750 2760 l cp
eoclip
n 10950 2850 m
 8325 2850 l gs col0 s gr gr

% arrowhead
n 8750 2760 m 8390 2850 l 8750 2940 l 8750 2760 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
2085 1335 m 2085 1515 l 2526 1515 l 2166 1425 l 2526 1335 l cp
eoclip
n 2100 1425 m
 6000 1425 l gs col0 s gr gr

% arrowhead
n 2526 1335 m 2166 1425 l 2526 1515 l  col0 s
/Times-Bold ff 270.00 scf sf
6300 4275 m
gs 1 -1 sc (IR) col0 sh gr
/Times-Bold ff 270.00 scf sf
9075 4275 m
gs 1 -1 sc (QTree) col0 sh gr
/Times-Bold ff 270.00 scf sf
8100 9000 m
gs 1 -1 sc  90.0 rot (RDB) col0 sh gr
/Times-Bold ff 270.00 scf sf
9375 6600 m
gs 1 -1 sc (SQL) col0 sh gr
/Times-Bold ff 270.00 scf sf
6300 6600 m
gs 1 -1 sc (Tuples) col0 sh gr
/Times-Bold ff 270.00 scf sf
10725 4950 m
gs 1 -1 sc (SQL) col0 sh gr
/Times-Bold ff 270.00 scf sf
10425 5325 m
gs 1 -1 sc (Generator) col0 sh gr
/Times-Bold ff 270.00 scf sf
10950 5850 m
gs 1 -1 sc (+) col0 sh gr
/Times-Bold ff 270.00 scf sf
10425 6225 m
gs 1 -1 sc (Optimizer) col0 sh gr
/Times-Bold ff 270.00 scf sf
7650 4350 m
gs 1 -1 sc (QTree) col0 sh gr
/Times-Bold ff 270.00 scf sf
7425 4650 m
gs 1 -1 sc (Generator) col0 sh gr
/Times-Bold ff 270.00 scf sf
4725 4500 m
gs 1 -1 sc (Parser) col0 sh gr
/Times-Bold ff 270.00 scf sf
6300 1200 m
gs 1 -1 sc (XML) col0 sh gr
/Times-Bold ff 270.00 scf sf
6300 1515 m
gs 1 -1 sc (View) col0 sh gr
/Times-Bold ff 270.00 scf sf
1200 6675 m
gs 1 -1 sc (Output) col0 sh gr
/Times-Bold ff 270.00 scf sf
1425 6975 m
gs 1 -1 sc (Tree) col0 sh gr
$F2psEnd
rs

%%EndDocument
 @endspecial 2399 1610 a Fl(Figur)o(e)18 b(9:)23 b(Ar)o(chitectur)o(e)
18 b(of)h(the)f(T)-6 b(ranslator)2040 1882 y Fq(sary)23
b(joins,)g(typically)g(self-joins)f([16]\).)34 b(An)23
b(optimizer)g(for)f(eliminating)2040 1969 y(redundant)31
b(joins)e(is)g(dif)n(\002cult)f(to)h(implement)h(since)f(the)g(general)
h(prob-)2040 2057 y(lem,)25 b(called)f Fp(query)h(minimization)p
Fq(,)h(is)d(NP-complete)i([4].)38 b(Commercial)2040 2144
y(databases)25 b(systems)f(do)g(not)g(do)g(query)g(minimization)g
(because)h(it)e(is)g(e)o(x-)2040 2231 y(pensi)n(v)o(e)28
b(and)f(because)h(users)f(do)h(not)e(write)h(SQL)e(queries)i(that)g
(require)2040 2318 y(minimization.)j(In)22 b(the)f(case)g(of)h
(automatically)f(generated)i(SQL)d(queries)2040 2405
y(ho)n(we)n(v)o(er)m(,)i(it)f(is)f(all)h(too)g(easy)h(to)f(o)o(v)o
(ershoot,)h(and)g(create)f(too)g(man)o(y)h(joins.)2040
2493 y(P)o(art)f(of)g(the)h(challenge)g(in)f(an)o(y)h(such)h(system)e
(is)g(to)h(a)o(v)o(oid)f(generating)i(re-)2040 2580 y(dundant)e(joins.)
2040 2829 y Fr(3.)99 b(ARCHITECTURE)2115 2937 y Fq(Figure)20
b(9)g(sho)n(ws)h(the)f(architecture)g(of)h(the)f(translator)l(.)26
b(An)20 b(XML)g(vie)n(w)2040 3024 y(is)g(de\002ned)i(o)o(v)o(er)f(the)g
(relational)g(database)g(using)h(a)f Fp(V)-6 b(ie)o(w)20
b(T)l(r)m(ee)h Fq([10].)28 b(The)2040 3111 y(XML)f(vie)n(w)g(typically)
g(consists)g(of)g(the)f(entire)h(database,)i(b)o(ut)e(can)g(also)2040
3198 y(be)g(a)f(subset)h(to)f(e)o(xport)h(a)g(subset)g(vie)n(w)f(of)h
(the)f(relational)g(database.)47 b(It)2040 3285 y(can)18
b(also)f(include)h(redundant)h(information.)k(The)18
b(vie)n(w)f(ne)n(v)o(er)h(computed,)2040 3373 y(b)o(ut)24
b(instead)g(is)g(k)o(ept)h(virtual.)38 b(Once)25 b(the)f(V)l(ie)n(w)f
(T)m(ree)i(has)f(been)h(de\002ned,)2040 3460 y(the)17
b(system)g(accepts)g(XSL)-7 b(T)15 b(programs)j(o)o(v)o(er)e(the)h
(virtual)f(XML)h(vie)n(w)-5 b(,)17 b(and)2040 3547 y(translates)i(them)
g(to)g(SQL)f(in)h(se)n(v)o(eral)g(steps.)2115 3634 y(First,)g(the)i
(parser)g(translates)f(the)h(XSL)-7 b(T)19 b(program)j(into)e(an)h
(intermedi-)2040 3721 y(ate)16 b(representation)h(\(IR\).)f(The)g(IR)g
(is)f(a)i(D)m(A)m(G)e(\(directed)i(ac)o(yclic)f(graph\))h(of)2040
3808 y(templates)22 b(with)f(a)h(unique)g(root)g(template)g(\(def)o
(ault)g(mode)g(template)g(that)2040 3896 y(matches)28
b(`/'\).)45 b(Each)27 b(leaf)g(node)h(contrib)o(utes)f(to)g(the)f
(program')l(s)i(result,)2040 3983 y(and)e(each)f(path)g(from)g(the)g
(root)g(to)g(a)g(leaf)f(node)i(corresponds)h(to)e(a)f(SQL)2040
4070 y(query:)40 b(the)28 b(\002nal)e(SQL)g(query)i(is)f(a)g(union)h
(of)f(all)f(such)i(queries.)48 b(Each)2040 4157 y(such)18
b(path)g(is)f(translated)h(\002rst)f(into)g(a)h(Query)g(T)m(ree)f(\(QT)
m(ree\))h(by)g(the)f(QT)m(ree)2040 4244 y(generator)l(.)29
b(A)21 b(QT)m(ree)g(represents)g(multiple,)g(possible)g(o)o(v)o
(erlapping)h(na)o(v-)2040 4332 y(igations)e(through)h(the)f(XML)f
(document,)i(together)f(with)g(selection,)g(join,)2040
4419 y(and)k(aggre)o(gate)g(conditions)g(at)f(v)n(arious)h(nodes.)38
b(It)22 b(is)h(e)o(xplained)i(in)e(Sec-)2040 4506 y(tion)c(4.2.)2115
4593 y(The)25 b(SQL)f(generator)i(plus)g(optimizer)f(tak)o(es)h(a)f(QT)
m(ree)g(as)g(input,)i(and)2040 4680 y(generates)d(an)f(equi)n(v)n
(alent)h(SQL)e(query)i(using)g(the)f(XML)g(schema,)h(RDB)2040
4767 y(schema,)18 b(and)g(V)l(ie)n(w)e(T)m(ree.)23 b(The)17
b(SQL)f(generator)i(is)f(described)h(in)f(Section)2040
4855 y(4.4,)i(and)g(the)g(optimizations)h(are)f(discussed)h(in)f
(Section)g(5.)2115 4942 y(The)k(querier)h(has)g(an)g(easy)g(task;)i(it)
d(tak)o(es)h(the)f(generated)i(SQL)d(query)2040 5029
y(and)k(gets)f(the)g(resulting)g(tuples)g(from)g(the)g(RDB.)f(The)h
(result)g(tuples)g(are)2040 5116 y(passed)e(onto)g(the)g(tagger)m(,)g
(similar)f(to)g([15],)i(which)e(produces)i(the)f(output)2040
5203 y(for)h(the)h(user)g(in)f(a)g(format)h(dictated)g(by)g(the)f
(original)h(query)-5 b(.)41 b(The)24 b(func-)2040 5290
y(tionality)17 b(of)f(the)h(querier)g(and)g(the)g(tagger)g(is)f
(straightforw)o(ard)h(and)g(not)g(our)2040 5378 y(focus,)i(and)h(hence)
g(is)e(not)h(discussed)i(further)l(.)p eop
%%Page: 5 5
5 4 bop -152 -148 1991 4 v -152 1051 4 1200 v -126 -97
a Fe(<)20 b Fk(xsl:template)e(matc)o(h)p Fj(=)p Fk("drink)o(ers")p
Fe(>)-48 -27 y(<)i Fk(xsl:v)m(ariable)f(name)p Fj(=)p
Fk('namev)m(ar')p Fe(>)31 42 y(<)g Fk(xsl:v)m(alue-of)g(select)p
Fj(=)p Fk("name"/)p Fe(>)-48 112 y(<)h Fk(/)p Fe(>)-48
182 y(<)g Fk(xsl:if)e(test)p Fj(=)p Fk("$namev)m(ar)p
Fj(==)p Fk('Brian"')p Fe(>)31 252 y(<)h Fk(xsl:apply-template)g(select)
p Fj(=)p Fk("/drink)o(ers")i(mo)q(de)p Fj(=)p Fk(1)p
Fe(>)31 321 y(<)e Fk(xsl:param)g(name)p Fj(=)p Fk('b)q(eerSet')h
(select)p Fj(=)p Fk("b)q(eers"/)p Fe(>)-67 391 y(<)f
Fk(/)p Fe(>)-126 461 y(<)h Fk(/)p Fe(>)-126 531 y(<)g
Fk(xsl:template)e(matc)o(h)p Fj(=)p Fk("drink)o(ers")i(mo)q(de)p
Fj(=)p Fk(1)p Fe(>)-48 600 y(<)g Fk(xsl:param)e(name)p
Fj(=)p Fk('b)q(eerSet')j(select)p Fj(=)p Fk("defaultBeerSet"/)p
Fe(>)-48 670 y(<)f Fk(result)p Fe(>)11 740 y(<)g Fk(xsl:v)m(alue-of)f
(select)p Fj(=)p Fk("name"/)p Fe(>)11 809 y(<)h Fk(xsl:v)m(alue-of)f
(select)p Fj(=)p Fk(coun)o(t)p Fj(\()p Fk(b)q(eers/[name)j
Fj(==)d Fk($b)q(eerSet])p Fj(\))p Fk(/)p Fe(>)-48 879
y(<)h Fk(/result)p Fe(>)-48 949 y(<)g Fk(/)p Fe(>)-126
1019 y(<)g Fk(/)p Fe(>)p 1835 1051 V -152 1054 1991 4
v -152 1198 a Fl(Figur)o(e)26 b(10:)39 b(Find)25 b(\(drink)o(er)-7
b(,)27 b(n\))e(pairs,)j(wher)o(e)e(n)g(is)g(the)g(number)g(of)-152
1285 y(beers)19 b(that)f(both)g(Brian)h(and)f(drink)o(er)g(lik)o(es)
-152 1519 y Fr(4.)100 b(TRANSLA)-9 b(TION)-77 1627 y
Fq(W)j(e)30 b(will)g(use)h(as)f(a)h(running)g(e)o(xample)h(the)e
(program)i(in)e(Figure)g(10,)-152 1714 y(which)g(retrie)n(v)o(es)e(the)
h(number)h(of)f(beers)g(e)n(v)o(ery)h(drink)o(er)g(lik)o(es)f(in)f
(com-)-152 1802 y(mon)18 b(with)f(Brian.)22 b(W)-6 b(e)17
b(be)o(gin)h(by)g(describing)g(ho)n(w)g(the)f(XSL)-7
b(T)16 b(program)i(is)-152 1889 y(parsed)k(into)f(an)g
Fp(internal)g(r)m(epr)m(esentation)h Fq(\(IR\))e(that)h(re\003ects)f
(the)h(seman-)-152 1976 y(tics)16 b(of)g(the)g(program)h(in)f(a)g
(functional)g(style.)22 b(W)-6 b(e)16 b(proceed)h(to)f(describe)h(the)
-152 2063 y(QT)m(ree,)h(which)f(is)g(an)g(abstract)h(representation)g
(of)f(the)g(paths)h(tra)o(v)o(ersed)f(by)-152 2150 y(the)25
b(program)g(on)g(the)f(V)l(ie)n(w)g(T)m(ree.)39 b(A)24
b(QT)m(ree)g(represents)h(a)f(single)h(such)-152 2237
y(path)f(tra)o(v)o(ersal,)g(and)g(is)f(a)g(useful)h(intermediate)g
(representation)h(for)e(pur)o(-)-152 2325 y(poses)18
b(of)f(translating)f(XML)h(tree)f(tra)o(v)o(ersals)h(into)f(SQL.)g(W)-6
b(e)16 b(describe)h(our)-152 2412 y(representation)f(of)f(the)f(XML)h
(vie)n(w)g(o)o(v)o(er)g(relational)f(data)h(\(the)g(V)l(ie)n(w)f(T)m
(ree,)-152 2499 y(and)19 b(\002nally)f(sho)n(w)h(ho)n(w)g(we)g(combine)
g(information)g(from)f(the)h(QT)m(ree)f(and)-152 2586
y(V)l(ie)n(w)g(T)m(ree)h(to)g(generate)h(an)f(equi)n(v)n(alent)h(SQL)e
(Query)-5 b(.)-152 2741 y Fr(4.1)99 b(P)o(arser)-77 2849
y Fq(The)23 b(output)h(of)e(the)h(parser)h(is)e(an)h(Intermediate)g
(Representation)h(\(IR\))-152 2936 y(of)17 b(the)g(XSL)-7
b(T)16 b(query)-5 b(.)24 b(Besides)17 b(the)g(strictly)f(syntactic)i
(parsing,)f(this)g(mod-)-152 3023 y(ule)h(also)g(performs)h(a)f
(sequence)h(of)f(transformations)h(to)f(generate)g(the)g(IR.)-152
3110 y(First)d(it)g(con)m(v)o(erts)h(the)g(XSL)-7 b(T)14
b(program)j(into)f(a)f Fp(functional)i(r)m(epr)m(esentation)p
Fq(,)-152 3197 y(in)j(which)f(each)h(template)g(mode)g(is)f(e)o
(xpressed)h(as)g(a)f(function.)25 b(Figure)19 b(11)-152
3284 y(\(a\))i(sho)n(ws)h(this)e(for)h(our)h(running)g(e)o(xample.)30
b(W)-6 b(e)20 b(add)i(e)o(xtra)f(functions)h(to)-152
3372 y(represent)g(the)f(b)o(uilt-in)f(XSL)-7 b(T)19
b(template)i(rules)g(\(Figure)f(11\(b\)\),)i(then)f(we)-152
3459 y(\223match\224)d(the)f(resulting)h(program)g(against)f(the)g(XML)
g(Schema)g(\(e)o(xtracted)-152 3546 y(from)27 b(the)g(V)l(ie)n(w)e(T)m
(ree\).)46 b(During)27 b(the)g(match)g(all)f(wildcards)h(\()p
Fc(\003)p Fq(\))f(are)h(in-)-152 3633 y(stantiated,)18
b(all)f(na)o(vigations)h(other)g(than)f(parent/child)i(are)e(e)o
(xpanded)j(into)-152 3720 y(simple)d(parent/child)h(na)o(vigation)f
(steps,)g(and)g(only)g(v)n(alid)g(na)o(vigations)h(are)-152
3807 y(retained.)23 b(This)14 b(is)h(sho)n(wn)h(in)f(sequence)i(in)e
(Figures)g(11)g(\(c\),)g(\(d\))g(and)h(\(e\).)22 b(In)-152
3895 y(some)c(cases)f(there)g(may)g(be)g(multiple)f(matches:)23
b(Figure)17 b(12)g(\(a\))f(illustrates)-152 3982 y(such)k(an)f(e)o
(xample,)h(with)e(the)h(e)o(xpansion)i(in)d(Figure)h(12)h(\(b\).)-77
4069 y(The)i(end)h(result)f(for)h(our)f(running)i(e)o(xample)f(is)f
(the)g(IR)g(sho)n(wn)h(in)f(Fig-)-152 4156 y(ure)f(13.)27
b(In)20 b(this)g(case)h(the)f(result)g(is)g(a)g(single)g(call)g(graph.)
28 b(In)20 b(some)h(cases,)-152 4243 y(a)f(template)g(calls)g(more)g
(than)h(one)f(template)h(conditionally)g(\(if-then-else)-152
4331 y(or)c(case)h(constructs\))g(or)f(unconditionally)i(\(as)e(sho)n
(wn)h(in)f(Figure)g(14\).)23 b(The)-152 4418 y(semantics)17
b(of)g(such)g(queries)g(is)f(the)h(union)g(of)g(all)f(possible)h(paths)
g(that)f(lead)-152 4505 y(from)j(the)g(start)g(template)g(to)f(a)h
(return)g(node,)h(as)f(sho)n(wn)h(in)f(Figure)f(14.)24
b(.)-77 4592 y(At)g(the)h(end)g(of)g(the)f(abo)o(v)o(e)i(procedure,)h
(we)e(ha)o(v)o(e)f(one)i(or)e(more)h(inde-)-152 4679
y(pendent,)20 b(straight-line)f(call)f(graphs.)24 b(In)18
b(what)h(follo)n(ws,)f(we)h(will)f(demon-)-152 4766 y(strate)26
b(ho)n(w)g(to)f(con)m(v)o(ert)h(a)g(straight-line)f(call)h(graph)g
(into)g(a)f(SQL)g(query)-5 b(.)-152 4854 y(The)26 b(SQL)f(query)h(for)g
(the)g(whole)g(XSL)-7 b(T)24 b(program)j(is)e(the)h(union)h(of)f(the)
-152 4941 y(indi)n(vidual)20 b(SQL)e(queries.)-152 5095
y Fr(4.2)99 b(QT)-7 b(r)n(ee)-77 5203 y Fq(The)16 b(QT)m(ree)g(is)g(a)g
(simulation)g(from)g(the)g(XML)g(schema,)h(and)g(succinctly)-152
5290 y(describes)30 b(the)f(computation)i(being)e(done)i(by)e(the)g
(query)-5 b(.)55 b(The)29 b(QT)m(ree)-152 5378 y(abstraction)16
b(captures)f(the)f(three)h(components)i(of)d(an)h(XML)f(query:)22
b(\(a\))15 b(the)p 2040 -148 V 2040 4554 4 4703 v 2085
-70 a Fk(f0)p 2134 -70 17 4 v 21 w(drink)o(ers)p Fj(\()p
Fk($default)p Fj(\))21 b(=)f Fk(if)f Fj(\()p Fk($default/name)i
Fj(==)e Fk('Brian')p Fj(\))2772 13 y Fk(f1)p Fj(\()p
Fk(/drink)o(ers,)h("b)q(eers")p Fj(\))p Fk(;)2085 96
y(f1)p 2134 96 V 21 w(drink)o(ers)p Fj(\()p Fk($default,$b)q(eerSet)p
Fj(\))k(=)19 b Fk(return)p Fj(\()p Fk($default/name,)3026
179 y(coun)o(t)p Fj(\()p Fk(b)q(eers[name)i Fj(==)e Fk($b)q(eerSet])p
Fj(\)\))p Fk(;)2527 322 y Fj(\()p Fl(a)p Fj(\))g Fl(Simpli\002ed)d
(Functional)h(F)n(orm)2085 465 y Fk(f0)p Fj(\()p Fk($default)p
Fj(\))22 b(=)d Fk(f0)p Fj(\()p Fk($default/*)p Fj(\))p
Fk(;)2085 548 y(f0)p 2134 548 V 21 w(drink)o(ers)p Fj(\()p
Fk($default)p Fj(\))i(=)f Fk(if)f Fj(\()p Fk($default/name)i
Fj(==)e Fk('Brian')p Fj(\))2791 631 y Fk(f1)p Fj(\()p
Fk(/drink)o(ers,)h("b)q(eers")p Fj(\))p Fk(;)2085 714
y(f1)p Fj(\()p Fk($default)p Fj(\))i(=)d Fk(f1)p Fj(\()p
Fk($default/*)p Fj(\))p Fk(;)2085 797 y(f1)p 2134 797
V 21 w(drink)o(ers)p Fj(\()p Fk($default,$b)q(eerSet)p
Fj(\))24 b(=)19 b Fk(return)p Fj(\()p Fk($default/name,)3026
880 y(coun)o(t)p Fj(\()p Fk(b)q(eers[name)i Fj(==)e Fk($b)q(eerSet])p
Fj(\)\))p Fk(;)2431 1023 y Fj(\()p Fl(b)p Fj(\))f Fl(Extended)f(with)h
(Built-in)f(T)-7 b(emplates)2085 1165 y Fk(f0)p 2134
1165 V 21 w(ro)q(ot)p Fj(\()p Fk($default)p Fj(\))23
b(=)c Fk(f0)p Fj(\()p Fk($default/*)p Fj(\))p Fk(;)2085
1248 y(f0)p 2134 1248 V 21 w(bars)p Fj(\()p Fk($default)p
Fj(\))j(=)d Fk(f0)p Fj(\()p Fk($default/*)p Fj(\))p Fk(;)2085
1332 y(f0)p 2134 1332 V 21 w(b)q(eers)p Fj(\()p Fk($default)p
Fj(\))k(=)c Fk(f0)p Fj(\()p Fk($default/*)p Fj(\))p Fk(;)2085
1415 y(f0)p 2134 1415 V 21 w(barnames)p Fj(\()p Fk($default)p
Fj(\))i(=)e Fk(f0)p Fj(\()p Fk($default/*)p Fj(\))p Fk(;)2085
1498 y(f0)p 2134 1498 V 21 w(b)q(eernames)p Fj(\()p Fk($default)p
Fj(\))j(=)d Fk(f0)p Fj(\()p Fk($default/*)p Fj(\))p Fk(;)2085
1581 y(f0)p 2134 1581 V 21 w(drink)o(ers)p Fj(\()p Fk($default)p
Fj(\))i(=)f Fk(if)f Fj(\()p Fk($default/name)i Fj(==)e
Fk('Brian')p Fj(\))2791 1664 y Fk(f1)p Fj(\()p Fk(/drink)o(ers,)h("b)q
(eers")p Fj(\))p Fk(;)2085 1747 y(f1)p 2134 1747 V 21
w(ro)q(ot)p Fj(\()p Fk($default)p Fj(\))j(=)c Fk(f1)p
Fj(\()p Fk($default/*)p Fj(\))p Fk(;)2085 1830 y(f1)p
2134 1830 V 21 w(bars)p Fj(\()p Fk($default)p Fj(\))j(=)d
Fk(f1)p Fj(\()p Fk($default/*)p Fj(\))p Fk(;)2085 1913
y(f1)p 2134 1913 V 21 w(b)q(eers)p Fj(\()p Fk($default)p
Fj(\))k(=)c Fk(f1)p Fj(\()p Fk($default/*)p Fj(\))p Fk(;)2085
1996 y(f1)p 2134 1996 V 21 w(barnames)p Fj(\()p Fk($default)p
Fj(\))i(=)e Fk(f1)p Fj(\()p Fk($default/*)p Fj(\))p Fk(;)2085
2079 y(f1)p 2134 2079 V 21 w(b)q(eernames)p Fj(\()p Fk($default)p
Fj(\))j(=)d Fk(f1)p Fj(\()p Fk($default/*)p Fj(\))p Fk(;)2085
2162 y(f1)p 2134 2162 V 21 w(drink)o(ers)p Fj(\()p Fk($default,$b)q
(eerSet)p Fj(\))24 b(=)19 b Fk(return)p Fj(\()p Fk($default/name,)3046
2245 y(coun)o(t)p Fj(\()p Fk(b)q(eers[name)i Fj(==)e
Fk($b)q(eerSet])p Fj(\)\))p Fk(;)2631 2388 y Fj(\()p
Fl(c)p Fj(\))f Fl(Function)f(Duplication)2085 2530 y
Fk(f0)p 2134 2530 V 21 w(ro)q(ot)p Fj(\()p Fk($default)p
Fj(\))23 b(=)c Fk(f0)p Fj(\()p Fk($default/drink)o(ers)p
Fj(\))p Fk(;)2085 2613 y(f0)p 2134 2613 V 21 w(bars)p
Fj(\()p Fk($default)p Fj(\))j(=)d Fk(f0)p Fj(\()p Fk($default/b)q
(eernames)p Fj(\))p Fk(;)2085 2696 y(f0)p 2134 2696 V
21 w(b)q(eers)p Fj(\()p Fk($default)p Fj(\))k(=)c Fk(f0)p
Fj(\()p Fk($default/barnames)p Fj(\))p Fk(;)2085 2779
y(f0)p 2134 2779 V 21 w(drink)o(ers)p Fj(\()p Fk($default)p
Fj(\))i(=)f Fk(if)f Fj(\()p Fk($default/name)i Fj(==)e
Fk('Brian')p Fj(\))2791 2862 y Fk(f1)p Fj(\()p Fk(/drink)o(ers,)h("b)q
(eers")p Fj(\))p Fk(;)2085 2945 y(f1)p 2134 2945 V 21
w(ro)q(ot)p Fj(\()p Fk($default)p Fj(\))j(=)c Fk(f1)p
Fj(\()p Fk($default/drink)o(ers)p Fj(\))p Fk(;)2085 3028
y(f1)p 2134 3028 V 21 w(bars)p Fj(\()p Fk($default)p
Fj(\))j(=)d Fk(f1)p Fj(\()p Fk($default/b)q(eernames)p
Fj(\))p Fk(;)2085 3111 y(f1)p 2134 3111 V 21 w(b)q(eers)p
Fj(\()p Fk($default)p Fj(\))k(=)c Fk(f1)p Fj(\()p Fk($default/barnames)
p Fj(\))p Fk(;)2085 3195 y(f1)p 2134 3195 V 21 w(drink)o(ers)p
Fj(\()p Fk($default,$b)q(eerSet)p Fj(\))24 b(=)19 b Fk(return)p
Fj(\()p Fk($default/name,)3026 3278 y(coun)o(t)p Fj(\()p
Fk(b)q(eers[name)i Fj(==)e Fk($b)q(eerSet])p Fj(\)\))p
Fk(;)2664 3420 y Fj(\()p Fl(d)p Fj(\))f Fl(XP)-6 b(A)f(TH)18
b(Expansion)2085 3563 y Fk(f0)p 2134 3563 V 21 w(ro)q(ot)p
Fj(\()p Fk($default)p Fj(\))23 b(=)c Fk(f0)p 2664 3563
V 21 w(drink)o(ers)p Fj(\()p Fk($default/drink)o(ers)p
Fj(\))p Fk(;)2085 3646 y(f0)p 2134 3646 V 21 w(bars)p
Fj(\()p Fk($default)p Fj(\))j(=)d Fk(f0)p 2666 3646 V
21 w(b)q(eernames)p Fj(\()p Fk($default/b)q(eernames)p
Fj(\))p Fk(;)2085 3729 y(f0)p 2134 3729 V 21 w(b)q(eers)p
Fj(\()p Fk($default)p Fj(\))k(=)c Fk(f0)p 2690 3729 V
21 w(barnames)p Fj(\()p Fk($default/barnames)p Fj(\))p
Fk(;)2085 3812 y(f0)p 2134 3812 V 21 w(drink)o(ers)p
Fj(\()p Fk($default)p Fj(\))i(=)f Fk(if)f Fj(\()p Fk($default/name)i
Fj(==)e Fk('Brian')p Fj(\))2791 3895 y Fk(f1)p 2840 3895
V 21 w(drink)o(ers)p Fj(\()p Fk(/drink)o(ers,)h("b)q(eers")p
Fj(\))p Fk(;)2085 3978 y(f1)p 2134 3978 V 21 w(ro)q(ot)p
Fj(\()p Fk($default)p Fj(\))j(=)c Fk(f1)p 2664 3978 V
21 w(drink)o(ers)p Fj(\()p Fk($default/drink)o(ers)p
Fj(\))p Fk(;)2085 4061 y(f1)p 2134 4061 V 21 w(bars)p
Fj(\()p Fk($default)p Fj(\))j(=)d Fk(f1)p 2666 4061 V
21 w(b)q(eernames)p Fj(\()p Fk($default/b)q(eernames)p
Fj(\))p Fk(;)2085 4144 y(f1)p 2134 4144 V 21 w(b)q(eers)p
Fj(\()p Fk($default)p Fj(\))k(=)c Fk(f1)p 2690 4144 V
21 w(barnames)p Fj(\()p Fk($default/barnames)p Fj(\))p
Fk(;)2085 4227 y(f1)p 2134 4227 V 21 w(drink)o(ers)p
Fj(\()p Fk($default,$b)q(eerSet)p Fj(\))24 b(=)19 b Fk(return)p
Fj(\()p Fk($default/name,)3026 4310 y(coun)o(t)p Fj(\()p
Fk(b)q(eers[name)i Fj(==)e Fk($b)q(eerSet])p Fj(\)\))p
Fk(;)2588 4453 y Fj(\()p Fl(e)p Fj(\))g Fl(Function)e(Call)h(Matching)p
4027 4554 4 4703 v 2040 4557 1991 4 v 2040 4700 a(Figur)o(e)j(11:)29
b(The)21 b(v)o(arious)h(stages)g(leading)f(to)g(IR)h(generation)f(f)n
(or)h(the)2040 4787 y(query)d(in)f(Figur)o(e)g(10.)2040
5116 y Fq(path)23 b(tak)o(en)h(by)f(the)g(query)g(in)g(the)g(XML)f
(document,)j(\(b\))e(the)f(conditions)2040 5203 y(placed)17
b(on)g(the)f(nodes)i(or)e(data)h(v)n(alues)g(along)g(the)g(path)f
(\(c\))g(the)h(parameters)2040 5290 y(passed)g(between)f(function)h
(calls.)22 b(Corresponding)17 b(to)f(the)g(three)g(elements)2040
5378 y(of)j(the)g(XML)g(query)h(abo)o(v)o(e,)f(a)g(QT)m(ree)g(has)g
(the)g(follo)n(wing)g(components.)p eop
%%Page: 6 6
6 5 bop -152 -148 1991 4 v -152 708 4 857 v -106 -70
a Fk(fN)p -44 -70 17 4 v 20 w(drink)o(ers)p Fj(\()p Fk($default)p
Fj(\))21 b(=)e Fk(fN)p Fj(\()p Fk($default/*,)i("$default/*/*")p
Fj(\))p Fk(;)507 73 y Fj(\()p Fl(a)p Fj(\))e Fl(Query)g(Fragment)-106
216 y Fk(fN)p -44 216 V 20 w(drink)o(ers)p Fj(\()p Fk($default)p
Fj(\))i(=)e Fk(fN)p 595 216 V 21 w(bars)p Fj(\()p Fk($default/bars,)561
299 y("$default/)p Fj(\()p Fk(bars/b)q(eernames|b)q(eers/barna)q(mes)p
Fj(\))p Fk(")p Fj(\))p Fk(;)501 382 y(fN)p 563 382 V
21 w(b)q(eers)p Fj(\()p Fk($default/b)q(eers,)561 465
y("$default/)p Fj(\()p Fk(bars/b)q(eernames|b)q(eers/barna)q(mes)p
Fj(\))p Fk(")p Fj(\))p Fk(;)378 608 y Fj(\()p Fl(b)p
Fj(\))f Fl(After)g(XP)-6 b(A)f(TH)19 b(Expansion)p 1835
708 4 857 v -152 711 1991 4 v -152 855 a(Figur)o(e)f(12:)24
b(A)18 b(query)h(fragment)g(with)f(complex)h(XP)-6 b(A)f(TH)18
b(expansion.)263 1919 y @beginspecial 0 @llx 0 @lly 247
@urx 204 @ury 1152 @rhi @setspecial
%%BeginDocument: p226-jain-t13.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: F:\courses\db\2project\paper\figures\t13.eps
%%CreationDate: () ()
%%BoundingBox: 0 0 247 204
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 247 204
%AI3_TileBox: 0 0 247 204
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

u
  0.000 0.000 0.000 0.000 k
 [] 0 d
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  6.9833 182.7692 m
  7.4649 185.8997 L
  8.9097 189.0301 L
  11.0769 191.6789 L
  14.2074 194.3278 L
  18.3010 196.4950 L
  22.6355 198.4214 L
  27.6923 199.6254 L
  32.9900 200.5886 L
  38.5284 200.8294 L
  43.8261 200.5886 L
  49.1237 199.6254 L
  54.1806 198.4214 L
  58.5151 196.4950 L
  62.6087 194.3278 L
  65.7391 191.6789 L
  67.9064 189.0301 L
  69.3512 185.8997 L
  69.8328 182.7692 L
  69.3512 179.6388 L
  67.9064 176.5084 L
  65.7391 173.6187 L
  62.6087 171.2107 L
  58.5151 169.0435 L
  54.1806 167.1171 L
  49.1237 165.9130 L
  43.8261 164.9498 L
  38.5284 164.7090 L
  32.9900 164.9498 L
  27.6923 165.9130 L
  22.6355 167.1171 L
  18.3010 169.0435 L
  14.2074 171.2107 L
  11.0769 173.6187 L
  8.9097 176.5084 L
  7.4649 179.6388 L
  6.9833 182.7692 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 21.4314 179.6388 0 Tp
TP
104.955371 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f0_root\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  4.5753 128.8294 m
  5.0569 131.7191 L
  6.5017 134.6087 L
  8.6689 137.4983 L
  11.7993 139.9064 L
  15.6522 142.0736 L
  19.9866 144.0000 L
  25.0435 145.4448 L
  30.1003 146.4080 L
  35.6388 146.8896 L
  41.1773 146.8896 L
  46.7157 146.4080 L
  51.7726 145.4448 L
  56.8294 144.0000 L
  61.1639 142.0736 L
  65.0167 139.9064 L
  68.1472 137.4983 L
  70.3144 134.6087 L
  71.7592 131.7191 L
  72.2408 128.8294 L
  71.7592 125.9398 L
  70.3144 123.0502 L
  68.1472 120.1605 L
  65.0167 117.7525 L
  61.1639 115.5853 L
  56.8294 113.6589 L
  51.7726 112.2140 L
  46.7157 111.2508 L
  41.1773 110.7692 L
  35.6388 110.7692 L
  30.1003 111.2508 L
  25.0435 112.2140 L
  19.9866 113.6589 L
  15.6522 115.5853 L
  11.7993 117.7525 L
  8.6689 120.1605 L
  6.5017 123.0502 L
  5.0569 125.9398 L
  4.5753 128.8294 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 11.5585 125.6990 0 Tp
TP
104.955371 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f0_drinkers\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  2.4080 74.8896 m
  2.8896 77.7793 L
  4.0936 80.1873 L
  6.2609 82.8361 L
  9.3913 85.2441 L
  13.0033 87.4114 L
  17.3378 89.3378 L
  22.1538 90.7826 L
  27.4515 91.7458 L
  32.9900 92.4682 L
  38.5284 92.7090 L
  43.8261 92.4682 L
  49.3645 91.7458 L
  54.6622 90.7826 L
  59.4783 89.3378 L
  63.8127 87.4114 L
  67.4247 85.2441 L
  70.5552 82.8361 L
  72.7224 80.1873 L
  73.9264 77.7793 L
  74.4080 74.8896 L
  73.9264 72.0000 L
  72.7224 69.3512 L
  70.5552 66.7023 L
  67.4247 64.2943 L
  63.8127 62.1271 L
  59.4783 60.2007 L
  54.6622 58.7559 L
  49.3645 57.7926 L
  43.8261 57.0702 L
  38.5284 56.8294 L
  32.9900 57.0702 L
  27.4515 57.7926 L
  22.1538 58.7559 L
  17.3378 60.2007 L
  13.0033 62.1271 L
  9.3913 64.2943 L
  6.2609 66.7023 L
  4.0936 69.3512 L
  2.8896 72.0000 L
  2.4080 74.8896 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 11.5585 71.7592 0 Tp
TP
104.955371 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f1_drinkers\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  2.4080 20.7090 m
  2.8896 23.5987 L
  4.0936 26.2475 L
  6.2609 28.8963 L
  9.3913 31.3043 L
  13.0033 33.4716 L
  17.3378 35.3980 L
  22.1538 36.8428 L
  27.4515 37.8060 L
  32.9900 38.5284 L
  38.5284 38.7692 L
  43.8261 38.5284 L
  49.3645 37.8060 L
  54.6622 36.8428 L
  59.4783 35.3980 L
  63.8127 33.4716 L
  67.4247 31.3043 L
  70.5552 28.8963 L
  72.7224 26.2475 L
  73.9264 23.5987 L
  74.4080 20.7090 L
  73.9264 17.8194 L
  72.7224 15.1706 L
  70.5552 12.5217 L
  67.4247 10.1137 L
  63.8127 7.9465 L
  59.4783 6.0201 L
  54.6622 4.5753 L
  49.3645 3.6120 L
  43.8261 2.8896 L
  38.5284 2.6488 L
  32.9900 2.8896 L
  27.4515 3.6120 L
  22.1538 4.5753 L
  17.3378 6.0201 L
  13.0033 7.9465 L
  9.3913 10.1137 L
  6.2609 12.5217 L
  4.0936 15.1706 L
  2.8896 17.8194 L
  2.4080 20.7090 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 24.0803 17.5786 0 Tp
TP
104.955371 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(return\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
1.0000 w
  0.000 0.000 0.000 1.000 K
1 J
1 j
  38.5284 164.7090 m
  38.5284 157.2441 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  42.1405 157.9666 m
  38.5284 146.8896 L
  34.9164 157.9666 L
  42.1405 157.9666 L
F
U
u
1.0000 w
  38.5284 56.8294 m
  38.5284 49.1237 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  42.1405 49.8462 m
  38.5284 38.7692 L
  34.9164 49.8462 L
  42.1405 49.8462 L
F
U
u
1.0000 w
  38.5284 110.7692 m
  38.5284 103.0635 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  42.1405 103.7860 m
  38.5284 92.7090 L
  34.9164 103.7860 L
  42.1405 103.7860 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 75.6120 152.9097 0 Tp
TP
104.955371 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(select: ./drinkers\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 72.7224 116.3077 0 Tp
TP
140.763674 Tz
/_Courier-Bold 9.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
( \r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 78.7425 116.3077 0 Tp
TP
104.955371 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(condition: ./name == 'Brian'\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 103.5452 104.2676 0 Tp
TP
104.955371 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(select: /drinkers\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 107.8796 92.2274 0 Tp
TP
104.955371 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(params: beers\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 99.9331 70.7960 0 Tp
TP
104.955371 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(arguments: param1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 113.4181 58.7559 0 Tp
TP
104.955371 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(select: ./name\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 126.9030 46.7157 0 Tp
TP
104.955371 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(params:\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 72.9632 34.6756 0 Tp
TP
104.955371 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(count\(beers[name==$param1]\)\r) Tx
TO
  0.000 0.000 0.000 1.000 K
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
 @endspecial 136 2166 a(Figur)o(e)g(13:)24 b(The)18 b(IR)h(f)n(or)g
(the)f(query)h(in)f(Figur)o(e)g(10)-152 2253 y Fq(.)321
3304 y @beginspecial 0 @llx 0 @lly 203 @urx 186 @ury
1152 @rhi @setspecial
%%BeginDocument: p226-jain-t12.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: F:\courses\db\2project\paper\figures\t12.eps
%%CreationDate: () ()
%%BoundingBox: 0 0 203 186
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 203 186
%AI3_TileBox: 0 0 203 186
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

u
  0.000 0.000 0.000 0.000 k
 [] 0 d
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  26.0067 164.7090 m
  26.2475 168.8027 L
  27.2107 172.6555 L
  28.6555 176.0268 L
  30.8227 178.9164 L
  33.2308 181.0836 L
  35.8796 182.2876 L
  38.7692 182.7692 L
  41.6589 182.2876 L
  44.3077 181.0836 L
  46.7157 178.9164 L
  48.8829 176.0268 L
  50.3278 172.6555 L
  51.2910 168.8027 L
  51.7726 164.7090 L
  51.2910 160.6154 L
  50.3278 156.7625 L
  48.8829 153.3913 L
  46.7157 150.7425 L
  44.3077 148.5753 L
  41.6589 147.3712 L
  38.7692 146.8896 L
  35.8796 147.3712 L
  33.2308 148.5753 L
  30.8227 150.7425 L
  28.6555 153.3913 L
  27.2107 156.7625 L
  26.2475 160.6154 L
  26.0067 164.7090 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 34.1940 161.5786 0 Tp
TP
104.889443 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f0\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  2.4080 92.7090 m
  2.6488 96.8027 L
  3.6120 100.6555 L
  5.2977 104.0268 L
  7.2241 106.9164 L
  9.8729 109.0836 L
  12.5217 110.2876 L
  15.4114 110.7692 L
  18.3010 110.2876 L
  21.1906 109.0836 L
  23.5987 106.9164 L
  25.7659 104.0268 L
  27.2107 100.6555 L
  28.1739 96.8027 L
  28.4147 92.7090 L
  28.1739 88.6154 L
  27.2107 84.7625 L
  25.7659 81.6321 L
  23.5987 78.7425 L
  21.1906 76.5753 L
  18.3010 75.3712 L
  15.4114 74.8896 L
  12.5217 75.3712 L
  9.8729 76.5753 L
  7.2241 78.7425 L
  5.2977 81.6321 L
  3.6120 84.7625 L
  2.6488 88.6154 L
  2.4080 92.7090 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 11.0769 89.5786 0 Tp
TP
104.889443 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  43.8261 92.7090 m
  44.3077 96.8027 L
  45.2709 100.6555 L
  46.7157 104.0268 L
  48.8829 106.9164 L
  51.2910 109.0836 L
  53.9398 110.2876 L
  57.0702 110.7692 L
  59.9599 110.2876 L
  62.6087 109.0836 L
  65.0167 106.9164 L
  67.1839 104.0268 L
  68.6288 100.6555 L
  69.5920 96.8027 L
  70.0736 92.7090 L
  69.5920 88.6154 L
  68.6288 84.7625 L
  67.1839 81.6321 L
  65.0167 78.7425 L
  62.6087 76.5753 L
  59.9599 75.3712 L
  57.0702 74.8896 L
  53.9398 75.3712 L
  51.2910 76.5753 L
  48.8829 78.7425 L
  46.7157 81.6321 L
  45.2709 84.7625 L
  44.3077 88.6154 L
  43.8261 92.7090 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 52.4950 89.5786 0 Tp
TP
104.889443 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  28.4147 20.7090 m
  28.8963 24.8027 L
  29.8595 28.6555 L
  31.3043 32.0268 L
  33.4716 34.9164 L
  35.6388 37.0836 L
  38.2876 38.2876 L
  41.4181 38.7692 L
  44.3077 38.2876 L
  46.9565 37.0836 L
  49.3645 34.9164 L
  51.5318 32.0268 L
  52.9766 28.6555 L
  53.9398 24.8027 L
  54.4214 20.7090 L
  53.9398 16.6154 L
  52.9766 13.0033 L
  51.5318 9.6321 L
  49.3645 6.7425 L
  46.9565 4.5753 L
  44.3077 3.3712 L
  41.4181 2.8896 L
  38.2876 3.3712 L
  35.6388 4.5753 L
  33.4716 6.7425 L
  31.3043 9.6321 L
  29.8595 13.0033 L
  28.8963 16.6154 L
  28.4147 20.7090 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 36.8428 17.5786 0 Tp
TP
104.889443 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  62.1271 20.7090 m
  62.6087 24.8027 L
  63.5719 28.6555 L
  65.0167 32.0268 L
  67.1839 34.9164 L
  69.5920 37.0836 L
  72.2408 38.2876 L
  75.1304 38.7692 L
  78.0201 38.2876 L
  80.9097 37.0836 L
  83.3177 34.9164 L
  85.4849 32.0268 L
  86.9298 28.6555 L
  87.8930 24.8027 L
  88.3746 20.7090 L
  87.8930 16.6154 L
  86.9298 13.0033 L
  85.4849 9.6321 L
  83.3177 6.7425 L
  80.9097 4.5753 L
  78.0201 3.3712 L
  75.1304 2.8896 L
  72.2408 3.3712 L
  69.5920 4.5753 L
  67.1839 6.7425 L
  65.0167 9.6321 L
  63.5719 13.0033 L
  62.6087 16.6154 L
  62.1271 20.7090 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 70.7960 17.5786 0 Tp
TP
104.889443 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
1.0000 w
  0.000 0.000 0.000 1.000 K
1 J
1 j
  38.7692 146.8896 m
  25.2843 119.9197 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  29.1371 119.1973 m
  20.7090 110.7692 L
  22.3946 122.3278 L
  29.1371 119.1973 L
F
U
u
1.0000 w
  38.7692 146.8896 m
  52.2542 119.9197 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  55.1438 122.3278 m
  57.0702 110.7692 L
  48.6421 119.1973 L
  55.1438 122.3278 L
F
U
u
1.0000 w
  57.0702 74.8896 m
  45.2709 48.1605 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  49.1237 47.6789 m
  41.4181 38.7692 L
  42.3813 50.5686 L
  49.1237 47.6789 L
F
U
u
1.0000 w
  57.0702 74.8896 m
  68.6288 48.1605 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  71.5184 50.5686 m
  72.7224 38.7692 L
  64.7759 47.6789 L
  71.5184 50.5686 L
F
U
u
1.0000 w
  80.6689 92.7090 m
  78.2609 92.7090 L
  85.2441 92.7090 L
  88.3746 92.7090 L
  91.2642 92.7090 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  90.3010 96.3211 m
  101.3779 92.7090 L
  90.3010 88.8562 L
  90.3010 96.3211 L
F
U
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  107.8796 162.5418 m
  108.1204 166.3946 L
  109.0836 170.2475 L
  110.5284 173.6187 L
  112.4548 176.5084 L
  114.8629 178.6756 L
  117.2709 180.1204 L
  120.1605 180.6020 L
  122.8094 180.1204 L
  125.4582 178.6756 L
  127.6254 176.5084 L
  129.5518 173.6187 L
  130.9967 170.2475 L
  131.9599 166.3946 L
  132.2007 162.5418 L
  131.9599 158.4482 L
  130.9967 154.5953 L
  129.5518 151.4649 L
  127.6254 148.5753 L
  125.4582 146.4080 L
  122.8094 145.2040 L
  120.1605 144.7224 L
  117.2709 145.2040 L
  114.8629 146.4080 L
  112.4548 148.5753 L
  110.5284 151.4649 L
  109.0836 154.5953 L
  108.1204 158.4482 L
  107.8796 162.5418 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 115.5853 159.4114 0 Tp
TP
104.889443 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f0\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  107.8796 90.5418 m
  108.1204 94.3946 L
  109.0836 98.2475 L
  110.5284 101.6187 L
  112.4548 104.5084 L
  114.8629 106.6756 L
  117.2709 108.1204 L
  120.1605 108.6020 L
  122.8094 108.1204 L
  125.4582 106.6756 L
  127.6254 104.5084 L
  129.5518 101.6187 L
  130.9967 98.2475 L
  131.9599 94.3946 L
  132.2007 90.5418 L
  131.9599 86.4482 L
  130.9967 82.8361 L
  129.5518 79.4649 L
  127.6254 76.5753 L
  125.4582 74.4080 L
  122.8094 73.2040 L
  120.1605 72.7224 L
  117.2709 73.2040 L
  114.8629 74.4080 L
  112.4548 76.5753 L
  110.5284 79.4649 L
  109.0836 82.8361 L
  108.1204 86.4482 L
  107.8796 90.5418 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 115.5853 87.4114 0 Tp
TP
104.889443 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  107.8796 22.8763 m
  108.1204 26.9699 L
  109.0836 30.8227 L
  110.5284 34.1940 L
  112.4548 37.0836 L
  114.8629 39.2508 L
  117.2709 40.4548 L
  120.1605 40.9365 L
  122.8094 40.4548 L
  125.4582 39.2508 L
  127.6254 37.0836 L
  129.5518 34.1940 L
  130.9967 30.8227 L
  131.9599 26.9699 L
  132.2007 22.8763 L
  131.9599 19.0234 L
  130.9967 15.4114 L
  129.5518 12.0401 L
  127.6254 9.1505 L
  125.4582 6.9833 L
  122.8094 5.5385 L
  120.1605 5.0569 L
  117.2709 5.5385 L
  114.8629 6.9833 L
  112.4548 9.1505 L
  110.5284 12.0401 L
  109.0836 15.4114 L
  108.1204 19.0234 L
  107.8796 22.8763 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 115.5853 19.9866 0 Tp
TP
104.889443 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  124.9766 144.7224 m
  120.1605 144.7224 L
  120.1605 118.7157 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  123.7726 119.6789 m
  120.1605 108.6020 L
  116.3077 119.6789 L
  123.7726 119.6789 L
F
U
u
1.0000 w
  123.7726 72.7224 m
  120.1605 72.7224 L
  120.1605 51.2910 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  123.7726 52.2542 m
  120.1605 40.9365 L
  116.3077 52.2542 L
  123.7726 52.2542 L
F
U
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  142.0736 162.5418 m
  142.3144 166.3946 L
  143.2776 170.2475 L
  144.7224 173.6187 L
  146.6488 176.5084 L
  149.0569 178.6756 L
  151.4649 180.1204 L
  154.3545 180.6020 L
  157.0033 180.1204 L
  159.4114 178.6756 L
  161.8194 176.5084 L
  163.7458 173.6187 L
  165.1906 170.2475 L
  166.1538 166.3946 L
  166.3946 162.5418 L
  166.1538 158.4482 L
  165.1906 154.5953 L
  163.7458 151.4649 L
  161.8194 148.5753 L
  159.4114 146.4080 L
  157.0033 145.2040 L
  154.3545 144.7224 L
  151.4649 145.2040 L
  149.0569 146.4080 L
  146.6488 148.5753 L
  144.7224 151.4649 L
  143.2776 154.5953 L
  142.3144 158.4482 L
  142.0736 162.5418 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 149.7793 159.4114 0 Tp
TP
104.889443 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f0\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  142.0736 90.5418 m
  142.3144 94.3946 L
  143.2776 98.2475 L
  144.7224 101.6187 L
  146.6488 104.5084 L
  149.0569 106.6756 L
  151.4649 108.1204 L
  154.3545 108.6020 L
  157.0033 108.1204 L
  159.4114 106.6756 L
  161.8194 104.5084 L
  163.7458 101.6187 L
  165.1906 98.2475 L
  166.1538 94.3946 L
  166.3946 90.5418 L
  166.1538 86.4482 L
  165.1906 82.8361 L
  163.7458 79.4649 L
  161.8194 76.5753 L
  159.4114 74.4080 L
  157.0033 73.2040 L
  154.3545 72.7224 L
  151.4649 73.2040 L
  149.0569 74.4080 L
  146.6488 76.5753 L
  144.7224 79.4649 L
  143.2776 82.8361 L
  142.3144 86.4482 L
  142.0736 90.5418 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 149.7793 87.4114 0 Tp
TP
104.889443 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  142.0736 22.8763 m
  142.3144 26.9699 L
  143.2776 30.8227 L
  144.7224 34.1940 L
  146.6488 37.0836 L
  149.0569 39.2508 L
  151.4649 40.4548 L
  154.3545 40.9365 L
  157.0033 40.4548 L
  159.4114 39.2508 L
  161.8194 37.0836 L
  163.7458 34.1940 L
  165.1906 30.8227 L
  166.1538 26.9699 L
  166.3946 22.8763 L
  166.1538 19.0234 L
  165.1906 15.4114 L
  163.7458 12.0401 L
  161.8194 9.1505 L
  159.4114 6.9833 L
  157.0033 5.5385 L
  154.3545 5.0569 L
  151.4649 5.5385 L
  149.0569 6.9833 L
  146.6488 9.1505 L
  144.7224 12.0401 L
  143.2776 15.4114 L
  142.3144 19.0234 L
  142.0736 22.8763 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 149.7793 19.9866 0 Tp
TP
104.889443 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  159.1706 144.7224 m
  154.3545 144.7224 L
  154.3545 118.7157 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  157.9666 119.6789 m
  154.3545 108.6020 L
  150.5017 119.6789 L
  157.9666 119.6789 L
F
U
u
1.0000 w
  157.9666 72.7224 m
  154.3545 72.7224 L
  154.3545 51.2910 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  157.9666 52.2542 m
  154.3545 40.9365 L
  150.5017 52.2542 L
  157.9666 52.2542 L
F
U
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  176.0268 162.5418 m
  176.2676 166.3946 L
  177.2308 170.2475 L
  178.6756 173.6187 L
  180.6020 176.5084 L
  182.7692 178.6756 L
  185.4181 180.1204 L
  188.0669 180.6020 L
  190.9565 180.1204 L
  193.3645 178.6756 L
  195.7726 176.5084 L
  197.6990 173.6187 L
  199.1438 170.2475 L
  200.1070 166.3946 L
  200.3478 162.5418 L
  200.1070 158.4482 L
  199.1438 154.5953 L
  197.6990 151.4649 L
  195.7726 148.5753 L
  193.3645 146.4080 L
  190.9565 145.2040 L
  188.0669 144.7224 L
  185.4181 145.2040 L
  182.7692 146.4080 L
  180.6020 148.5753 L
  178.6756 151.4649 L
  177.2308 154.5953 L
  176.2676 158.4482 L
  176.0268 162.5418 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 183.7324 159.4114 0 Tp
TP
104.889443 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f0\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  176.0268 90.5418 m
  176.2676 94.3946 L
  177.2308 98.2475 L
  178.6756 101.6187 L
  180.6020 104.5084 L
  182.7692 106.6756 L
  185.4181 108.1204 L
  188.0669 108.6020 L
  190.9565 108.1204 L
  193.3645 106.6756 L
  195.7726 104.5084 L
  197.6990 101.6187 L
  199.1438 98.2475 L
  200.1070 94.3946 L
  200.3478 90.5418 L
  200.1070 86.4482 L
  199.1438 82.8361 L
  197.6990 79.4649 L
  195.7726 76.5753 L
  193.3645 74.4080 L
  190.9565 73.2040 L
  188.0669 72.7224 L
  185.4181 73.2040 L
  182.7692 74.4080 L
  180.6020 76.5753 L
  178.6756 79.4649 L
  177.2308 82.8361 L
  176.2676 86.4482 L
  176.0268 90.5418 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 183.7324 87.4114 0 Tp
TP
104.889443 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  176.0268 22.8763 m
  176.2676 26.9699 L
  177.2308 30.8227 L
  178.6756 34.1940 L
  180.6020 37.0836 L
  182.7692 39.2508 L
  185.4181 40.4548 L
  188.0669 40.9365 L
  190.9565 40.4548 L
  193.3645 39.2508 L
  195.7726 37.0836 L
  197.6990 34.1940 L
  199.1438 30.8227 L
  200.1070 26.9699 L
  200.3478 22.8763 L
  200.1070 19.0234 L
  199.1438 15.4114 L
  197.6990 12.0401 L
  195.7726 9.1505 L
  193.3645 6.9833 L
  190.9565 5.5385 L
  188.0669 5.0569 L
  185.4181 5.5385 L
  182.7692 6.9833 L
  180.6020 9.1505 L
  178.6756 12.0401 L
  177.2308 15.4114 L
  176.2676 19.0234 L
  176.0268 22.8763 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 183.7324 19.9866 0 Tp
TP
104.889443 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  193.1237 144.7224 m
  188.0669 144.7224 L
  188.0669 118.7157 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  191.9197 119.6789 m
  188.0669 108.6020 L
  184.4548 119.6789 L
  191.9197 119.6789 L
F
U
u
1.0000 w
  191.9197 72.7224 m
  188.0669 72.7224 L
  188.0669 51.2910 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  191.9197 52.2542 m
  188.0669 40.9365 L
  184.4548 52.2542 L
  191.9197 52.2542 L
F
U
u
1.0000 w
  19.0234 74.8896 m
  33.7124 47.6789 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  36.3612 50.3278 m
  38.5284 38.7692 L
  30.1003 46.7157 L
  36.3612 50.3278 L
F
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
 @endspecial 172 3550 a Fl(Figur)o(e)g(14:)23 b(Complex)c(call)g(graph)
g(decoupling)-58 3794 y Fq(1.)37 b Fl(T)-6 b(r)o(ee)p
Fq(:)27 b(The)21 b(tree)f(representing)i(the)e(tra)o(v)o(ersal)g(of)h
(the)g Fp(select)f Fq(XP)o(ath)35 3882 y(e)o(xpressions)26
b(\(with)f(which)g Fp(apply-template)h Fq(is)f(used\).)42
b(Nodes)26 b(in)35 3969 y(this)14 b(tree)g(are)h(labeled)g(by)g(the)f
(tag)h(of)f(the)h(XP)o(ath)f(component.)23 b(Hence)35
4056 y(each)g(node)g(in)f(this)g(tree)f(is)h(associated)h(with)f(a)g
(node)h(in)f(the)g(XML)35 4143 y(schema.)h(Entities)14
b(that)g(are)h(part)g(of)f(the)h(output)h(are)f(mark)o(ed)g(with)g(#.)
-58 4288 y(2.)37 b Fl(Condition)19 b(set)p Fq(:)25 b(The)c(collection)f
(of)g(all)g(conditions)i(in)e(the)g(query)-5 b(.)35 4376
y(It)21 b(not)h(only)g(includes)h(conditions)g(speci\002ed)f(e)o
(xplicitly)f(using)i(the)35 4463 y Fp(xsl:if)18 b Fq(construct,)h(b)o
(ut)g(also)g(includes)h(predicates)f(in)g(the)g(XP)o(ath)g(e)o(x-)35
4550 y(pressions.)-58 4695 y(3.)37 b Fl(Mapping)19 b(f)n(or)i
(parameters)p Fq(:)27 b(A)21 b(parameter)g(can)g(be)g(the)f(result)h
(of)35 4782 y(another)k(XSL)-7 b(T)23 b(query)-5 b(,)27
b(a)d(node-set)i(gi)n(v)o(en)f(by)g(an)f(XP)o(ath)g(e)o(xpres-)35
4870 y(sion,)29 b(or)e(a)g(scalar)g(v)n(alue.)48 b(A)26
b(natural)h(w)o(ay)h(of)f(representing)h(this)35 4957
y(is)e(by)h(using)h(nested)f(QT)m(rees,)h(which)f(is)f(the)h(approach)h
(we)e(tak)o(e.)35 5044 y(Note)21 b(that)f(the)g(conditions)i(inside)e
(the)h(nested)g(QT)m(ree)f(might)h(refer)35 5131 y(to)e(entities)f
(\(nodes)i(or)f(other)h(parameters\))f(in)g(the)g(outer)g(QT)m(ree.)-77
5290 y(Figure)30 b(15)g(\(a\))g(sho)n(ws)g(a)g(QT)m(ree)g(for)g(the)g
(call)f(graph)i(in)f(Figure)f(10.)-152 5378 y(There)d(are)h(three)f(QT)
m(rees)g(in)g(the)g(\002gure.)45 b(Q1)26 b(is)g(the)g(main)g(QT)m(ree)g
(cor)o(-)2040 -69 y(responding)34 b(to)e(the)g(XSL)-7
b(T)31 b(program.)64 b(It)32 b(has)g(pointers)h(to)f(tw)o(o)g(other)
2040 19 y(QT)m(rees)20 b(Q2)f(and)h(Q3,)g(which)g(correspond)h(to)e
(the)h(tw)o(o)f(node-set)i(parame-)2040 106 y(ters)e(passed)h(in)e(the)
h(program.)2115 193 y(The)g(logic)g(encapsulated)h(by)g(the)f(XSL)-7
b(T)17 b(program)j(is)f(as)g(follo)n(ws:)2133 349 y(1.)38
b(start)18 b(at)h(the)g(\223root\224)g(node.)2133 514
y(2.)38 b(tra)o(v)o(erse)14 b(do)n(wn)h(to)g(a)f(\223drink)o(ers\224)i
(named)f(Brian;)h(\223./beers/beername\224)2227 601 y(is)i(passed)i(as)
f(a)g(parameter)g(at)g(this)g(point.)2133 767 y(3.)38
b(starting)19 b(from)g(the)g(\223root\224,)g(tra)o(v)o(erse)f(do)n(wn)i
(to)f(\223drink)o(ers\224)h(again.)2133 932 y(4.)38 b(tra)o(v)o(erse)19
b(one)h(le)n(v)o(el)g(do)n(wn)g(to)g(\223name\224,)g(and)g(perform)g
(an)g(aggre)o(ga-)2227 1019 y(tion)f(on)g(the)g(node-set)h(\223beers[.)
11 b(.)g(.)g(]/\224)2115 1175 y(These)k(steps)g(correspond)h(to)f(the)g
(main)g(QT)m(ree)f(for)h(the)g(query)h(Q1.)21 b(Note)2040
1262 y(that)26 b(in)g(step)g(3,)i(when)f(the)f(query)h(starts)f(at)f
(the)i(root)f(to)g(go)h(to)f(drink)o(ers)2040 1349 y(again,)20
b(a)g(separate)h(drink)o(er)g(node)g(is)f(instantiated)g(since)g(the)h
(query)g(could)2040 1437 y(be)i(referring)f(to)g(a)h(drink)o(er)g(that)
f(is)g(dif)n(ferent)g(from)g(the)h(current)f(one)h(\(the)2040
1524 y(root)h(has)h(multiple)f(instances)h(of)f(\223drink)o(er\224)h
(child)f(nodes\).)40 b(QT)m(rees)24 b(are)2040 1611 y(also)18
b(created)g(for)g(e)n(v)o(ery)h(node-set.)k(F)o(or)17
b(e)o(xample,)i(the)f(second)h(parameter)2040 1698 y(of)j(the)f(return)
h(call)f(\(count\(beer[name)i(==)f($...]\)\))29 b(is)21
b(represented)i(as)e(the)2040 1785 y(QT)m(ree)e(Q3.)24
b(The)19 b(predicate)g(condition)i(in)e(the)g(XP)o(ath)f(for)h(this)g
(parameter)2040 1872 y(is)g(represented)h(in)e(the)h(QT)m(ree)g(and)h
(refers)f(to)f(P1,)h(de\002ned)g(in)g(Q1.)2115 1960 y(As)26
b(an)h(abstraction,)i(QT)m(ree)d(is)h(general)g(enough)h(that)e(it)g
(can)h(also)g(be)2040 2047 y(used)d(for)g(other)g(XML)f(query)i
(languages)g(lik)o(e)f(XQuery)g(and)g(XML-QL.)2040 2134
y(QT)m(ree)c(is)g(a)g(po)n(werful)h(and)g(succinct)g(representation)g
(of)g(the)f(query)h(com-)2040 2221 y(putation)26 b(independent)h(of)e
(the)g(language)h(in)f(which)g(the)g(query)h(w)o(as)f(e)o(x-)2040
2308 y(pressed)h(in.)41 b(Moreo)o(v)o(er)m(,)27 b(the)e(con)m(v)o
(ersion)i(from)e(QT)m(ree)g(to)g(SQL)f(is)g(also)2040
2395 y(independent)d(of)e(the)g(query)h(language.)2040
2558 y Fr(4.3)99 b(The)26 b(V)l(iew)f(T)-7 b(r)n(ee)2115
2666 y Fq(The)21 b(V)l(ie)n(w)f(T)m(ree)h(de\002nes)h(a)f(mapping)h
(from)f(the)h(XML)e(schema)i(to)f(the)2040 2753 y(relational)k(tables.)
42 b(Our)25 b(choice)g(of)g(the)h(V)l(ie)n(w)e(T)m(ree)h
(representation)h(has)2040 2840 y(been)19 b(borro)n(wed)h(from)f
(SilkRoute)f([10].)23 b(The)c(V)l(ie)n(w)e(T)m(ree)i(de\002nes)g(a)f
(SQL)2040 2928 y(query)f(for)e(each)i(node)g(in)e(the)h(XML)g(schema.)
23 b(Figure)15 b(16)i(sho)n(ws)f(the)g(V)l(ie)n(w)2040
3015 y(T)m(ree)24 b(for)g(the)f Fl(beers/drink)o(ers/bars)g
Fq(schema.)38 b(The)24 b(right)g(hand)g(side)g(of)2040
3102 y(each)k(rule)g(should)h(be)e(interpreted)i(as)e(a)h(SQL)e(query)
-5 b(.)50 b(The)28 b(rule)f(heads)2040 3189 y(\(e.g.,)f(Drink)o(ers\))g
(denote)h(the)e(table)h(name,)h(and)g(the)e(ar)o(guments)h(denote)2040
3276 y(the)e(column)h(name.)40 b(Same)23 b(ar)o(gument)i(in)f(tw)o(o)g
(tables)h(represents)f(a)g(join)2040 3363 y(on)19 b(that)g(v)n(alue.)
2115 3451 y(The)26 b(query)h(for)e(an)i(XML)e(schema)i(node)g(depends)h
(on)e(all)f(its)h(ances-)2040 3538 y(tors.)50 b(F)o(or)27
b(e)o(xample,)k(in)d(Figure)g(16)g(the)g(SQL)f(for)g
Fp(beername)j Fq(depends)2040 3625 y(on)22 b Fp(drink)o(er)o(s)h
Fq(and)f Fp(bar)o(s)p Fq(.)32 b(Correspondingly)-5 b(,)24
b(the)d(SQL)g(query)h(for)g(a)f(child)2040 3712 y(node)k(is)e(al)o(w)o
(ays)h(a)f(superset)h(of)g(the)f(SQL)g(query)h(of)f(its)g(parent.)37
b(Put)23 b(an-)2040 3799 y(other)15 b(w)o(ay)-5 b(,)17
b(gi)n(v)o(en)e(the)h(SQL)e(query)h(for)g(a)g(parent)h(node,)g(one)g
(can)g(construct)2040 3887 y(the)28 b(query)h(for)f(its)f(child)h(node)
h(by)g(adding)g(appropriate)g(FR)m(OM)e(tables)2040 3974
y(and)19 b(WHERE)d(constraints.)24 b(As)18 b(discussed)h(later)m(,)f
(such)h(representation)g(is)2040 4061 y(crucial)i(to)g(a)o(v)o(oid)f
(redundant)j(joins,)e(and)g(hence)h(generate)g(ef)n(\002cient)e(SQL)
2040 4148 y(queries.)2040 4311 y Fr(4.4)99 b(SQL)26 b(Generation)2115
4419 y Fq(This)19 b(section)g(e)o(xplains)h(ho)n(w)g(we)f(generate)g
(SQL)f(from)i(a)f(QT)m(ree)g(using)2040 4506 y(the)h(V)l(ie)n(w)e(T)m
(ree.)25 b(As)20 b(e)o(xplained)g(before,)g(a)g(QT)m(ree)f(represents)i
(a)e(tra)o(v)o(ersal)2040 4593 y(of)24 b(nodes)h(in)e(the)h(original)g
(query)g(and)h(constraints)f(placed)g(by)g(query)h(on)2040
4680 y(these)i(nodes.)46 b(The)27 b(idea)f(is)g(to)h(generate)g(the)f
(SQL)g(query)h(clauses)g(cor)o(-)2040 4767 y(responding)d(to)d(those)h
(tra)o(v)o(ersals)g(and)g(constraints.)32 b(This)21 b(is)h(a)f(three)h
(step)2040 4855 y(process.)37 b(First,)23 b(nodes)i(of)e(the)g(QT)m
(ree)h(are)f(bound)i(to)e(instances)h(of)g(rela-)2040
4942 y(tional)18 b(tables.)23 b(Second,)18 b(the)g(appropriate)h(WHERE)
d(constraints)i(are)g(gen-)2040 5029 y(erated)24 b(using)h(the)e
(binding)i(in)f(the)g(\002rst)e(step.)38 b(Intuiti)n(v)o(ely)-5
b(,)25 b(the)f(\002rst)e(step)2040 5116 y(generates)17
b(the)f(FR)m(OM)g(part)g(of)g(the)g(SQL)f(query)i(and)f(join)g
(constraints)h(due)2040 5203 y(to)22 b(tree)f(tra)o(v)o(ersal.)30
b(The)22 b(second)g(step)g(generates)h(all)e(e)o(xplicitly)g
(speci\002ed)2040 5290 y(constraints.)40 b(Finally)-5
b(,)25 b(the)g(bindings)g(for)f(the)h(return)g(nodes)g(are)f(used)h(to)
2040 5378 y(generate)20 b(the)f(SELECT)e(part.)23 b(W)-6
b(e)18 b(ne)o(xt)h(describe)h(each)f(of)g(these)h(steps.)p
eop
%%Page: 7 7
7 6 bop 226 1048 a @beginspecial 0 @llx 0 @lly 877 @urx
307 @ury 1440 @rhi @setspecial
%%BeginDocument: p226-jain-q2-new.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: q2-new.eps
%%Creator: fig2dev Version 3.2 Patchlevel 3c
%%CreationDate: Tue Mar  5 11:37:52 2002
%%For: sushjain@lithium.cs.washington.edu (Sushant Jain)
%%BoundingBox: 0 0 877 307
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 307 moveto 0 0 lineto 877 0 lineto 877 307 lineto closepath clip newpath
-73.0 614.0 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
%%Page: 1 1
10 setmiterlimit
 0.06000 0.06000 sc
%
% Fig objects follow
%
% Polyline
7.500 slw
n 12821 8325 m 12829 8325 l gs col0 s gr
% Polyline
n 12821 7275 m 12829 7275 l gs col0 s gr
% Polyline
n 14021 7950 m 14029 7950 l gs col0 s gr
% Polyline
60.000 slw
n 4125 5550 m
 2400 6450 l gs col0 s gr 
% Polyline
n 2400 6450 m
 3075 8400 l gs col0 s gr 
% Polyline
n 4125 5550 m
 6225 6450 l gs col0 s gr 
% Polyline
n 6225 6450 m
 5475 8325 l gs col0 s gr 
% Polyline
n 6225 6450 m
 7425 7575 l gs col0 s gr 
% Polyline
n 2505 8400 m 2400 8400 2400 9720 105 arcto 4 {pop} repeat
  2400 9825 3870 9825 105 arcto 4 {pop} repeat
  3975 9825 3975 8505 105 arcto 4 {pop} repeat
  3975 8400 2505 8400 105 arcto 4 {pop} repeat
 cp gs col0 s gr 
% Polyline
n 2400 6450 m
 1725 7275 l gs col0 s gr 
% Polyline
n 3375 8850 m
 3375 9450 l gs col0 s gr 
% Polyline
n 5775 8700 m
 5775 9300 l gs col0 s gr 
% Polyline
n 1380 5175 m 1275 5175 1275 8070 105 arcto 4 {pop} repeat
  1275 8175 7995 8175 105 arcto 4 {pop} repeat
  8100 8175 8100 5280 105 arcto 4 {pop} repeat
  8100 5175 1380 5175 105 arcto 4 {pop} repeat
 cp gs col0 s gr 
% Polyline
n 4830 8325 m 4725 8325 4725 9870 105 arcto 4 {pop} repeat
  4725 9975 7470 9975 105 arcto 4 {pop} repeat
  7575 9975 7575 8430 105 arcto 4 {pop} repeat
  7575 8325 4830 8325 105 arcto 4 {pop} repeat
 cp gs col0 s gr 
/Helvetica-Bold ff 300.00 scf sf
1350 7500 m
gs 1 -1 sc (name) col0 sh gr
/Helvetica-Bold ff 450.00 scf sf
1425 5850 m
gs 1 -1 sc (Q1) col0 sh gr
%  5 
/Helvetica-Bold ff 300.00 scf sf
1425 7800 m
gs 1 -1 sc (\(N2\)) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
2700 6600 m
gs 1 -1 sc (drinkers) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
6450 6450 m
gs 1 -1 sc (drinkers) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
3000 8775 m
gs 1 -1 sc (beers) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
3000 9675 m
gs 1 -1 sc (name) col0 sh gr
/Helvetica-Bold ff 450.00 scf sf
2625 9300 m
gs 1 -1 sc (Q3) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
5475 8625 m
gs 1 -1 sc (beers) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
5400 9525 m
gs 1 -1 sc (name) col0 sh gr
/Helvetica-Bold ff 450.00 scf sf
4950 9075 m
gs 1 -1 sc (Q2) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
3825 5475 m
gs 1 -1 sc (root) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
6975 7800 m
gs 1 -1 sc (#name) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
2850 7200 m
gs 1 -1 sc (Condition:) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
3225 7500 m
gs 1 -1 sc (N2 == 'Brian') col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
10200 5400 m
gs 1 -1 sc (Q1:) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
10200 5745 m
gs 1 -1 sc (SELECT drinkers.name, count\(Q2\)) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
10200 6090 m
gs 1 -1 sc (FROM     drinkers, drinkers2) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
10200 6435 m
gs 1 -1 sc (WHERE  drinker2.name = 'Brian') col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
10200 7125 m
gs 1 -1 sc (Q2:) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
10200 7470 m
gs 1 -1 sc (SELECT likes.beer) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
10200 7815 m
gs 1 -1 sc (FROM     likes) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
10200 8160 m
gs 1 -1 sc (WHERE  likes.drinker = drinker.name) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
10200 8505 m
gs 1 -1 sc (                AND likes.beer in Q3) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
10200 9195 m
gs 1 -1 sc (Q3:) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
10200 9540 m
gs 1 -1 sc (SELECT likes.beer) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
10200 9885 m
gs 1 -1 sc (FROM     likes) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
3900 8025 m
gs 1 -1 sc (#count\(Q2\)) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
5475 9825 m
gs 1 -1 sc (\(N6\)) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
6000 8925 m
gs 1 -1 sc (Condition:) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
6150 9225 m
gs 1 -1 sc (N6 == Q3) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
10200 10230 m
gs 1 -1 sc (WHERE  likes.drinker = drinkers2.name   ) col0 sh gr
%  5 
/Helvetica-Bold ff 300.00 scf sf
2850 6900 m
gs 1 -1 sc (\(N1\)) col0 sh gr
$F2psEnd
rs

%%EndDocument
 @endspecial 746 1295 a Fl(Figur)o(e)18 b(15:)24 b(QT)-6
b(r)o(ee)19 b(f)n(or)g(the)f(example)i(query)e(\(left\))g(and)g
(mappings)h(to)f(SQL)h(\(right\))p -152 1463 1991 4 v
-152 3054 4 1591 v -126 1541 a Fk(1.)h(drink)o(ers)p
Fj(\()p Fk(name,)e(age,)j(astrosign)p Fj(\))f(=)g Fk(Drink)o(ers)p
Fj(\()p Fk(name,)e(age)p Fj(\))p Fk(,)815 1624 y(Astrosign)p
Fj(\()p Fk(name,astrosign)p Fj(\))-126 1764 y Fk(2.)i(b)q(eers)p
Fj(\()p Fk(b)q(eerName,)h(price,)f(drink)o(erName)p Fj(\))f(=)h
Fk(Drink)o(ers)p Fj(\()p Fk(drink)o(erName,)p 1581 1764
17 4 v 39 w Fj(\))p Fk(,)972 1847 y(Beers)p Fj(\()p Fk(b)q(eerName,)g
(price)p Fj(\))p Fk(,)972 1930 y(Lik)o(es)p Fj(\()p Fk(drink)o
(erName,b)q(eerName)p Fj(\))-126 2069 y Fk(3.)g(bars)p
Fj(\()p Fk(barName,)f(drink)o(erName)p Fj(\))g(=)g Fk(Drink)o(ers)p
Fj(\()p Fk(drink)o(erName,)p 1375 2069 V 39 w Fj(\))p
Fk(,)776 2152 y(Bars)p Fj(\()p Fk(barName)p Fj(\))p Fk(,)776
2235 y(F)l(requen)o(ts)p Fj(\()p Fk(drink)o(erName,)g(barName)p
Fj(\))-126 2375 y Fk(4.)h(barname)p Fj(\()p Fk(barName,b)q
(eerName,drink)o(erName)p Fj(\))e(=)i Fk(Drink)o(ers)p
Fj(\()p Fk(drink)o(erName,)p 1726 2375 V 39 w Fj(\))p
Fk(,)966 2458 y(Beers)p Fj(\()p Fk(b)q(eerName,)p 1395
2458 V 21 w(,drink)o(erName)p Fj(\))p Fk(,)972 2541 y(Lik)o(es)p
Fj(\()p Fk(drink)o(erName,b)q(eerName)p Fj(\))p Fk(,)972
2624 y(Serv)o(es)p Fj(\()p Fk(barName,b)q(eerName)p Fj(\))-126
2763 y Fk(5.)14 b(b)q(eername)p Fj(\()p Fk(b)q(eerName,)h(barName,)e
(drink)o(erName)p Fj(\))g(=)h Fk(Drink)o(ers)p Fj(\()p
Fk(drink)o(erName,)p 1754 2763 V 33 w Fj(\))p Fk(,)903
2846 y(F)l(requen)o(ts)p Fj(\()p Fk(drink)o(erName,)k(barName)p
Fj(\))p Fk(,)893 2929 y(Bars)p Fj(\()p Fk(b)q(eerName,)j(drink)o
(erName)p Fj(\))p Fk(,)893 3012 y(Serv)o(es)p Fj(\()p
Fk(barName,b)q(eerName)p Fj(\))p 1835 3054 4 1591 v -152
3057 1991 4 v -152 3200 a Fl(Figur)o(e)30 b(16:)48 b(V)m(iew)31
b(T)-6 b(r)o(ee)32 b(f)n(or)f(the)f(beers/drink)o(ers/bars)g(schema)i
(in)-152 3287 y(Figur)o(e)18 b(2)-152 3574 y Fb(4.4.1)90
b(Binding)22 b(the)h(QT)-5 b(r)m(ee)21 b(nodes)-77 3682
y Fq(A)j(binding)h(associates)f(a)g(relational)g(table,)g(column)h
(pair)f(to)g(a)g(QT)m(ree)-152 3769 y(node.)h(This)19
b Fj(\()p Fi(tabl)q(e;)12 b(col)q(umn)p Fj(\))20 b Fq(pair)f(can)h(be)f
(treated)h(as)f(its)g(\223v)n(alue\224.)25 b(The)-152
3856 y(binding)20 b(step)f(updates)h(the)e(list)g(of)h(tables)f
(required)i(in)e(the)h(FR)m(OM)f(clause)-152 3943 y(and)i(implicit)e
(tree)h(tra)o(v)o(ersal)f(constraints)i(in)e(WHERE)g(clause.)-77
4031 y(W)-6 b(e)29 b(carry)i(out)f(this)f(binding)i(in)f(a)g(top)g(do)n
(wn)h(manner)f(to)g(a)o(v)o(oid)g(re-)-152 4118 y(dundant)24
b(joins.)34 b(Before)23 b(a)f(node)i(is)e(bound,)j(all)d(its)f
(ancestors)j(should)f(be)-152 4205 y(bound.)39 b(T)-6
b(o)23 b(bind)h(a)g(node,)h(we)e(instantiate)h(ne)n(w)g(v)o(ersions)g
(of)f(each)i(table)-152 4292 y(present)c(in)f(the)g(V)l(ie)n(w)g(T)m
(ree)g(SQL)f(query)i(for)f(the)g(child.)27 b(T)-6 b(ables)20
b(and)h(con-)-152 4379 y(straints)e(presented)i(in)e(the)g(SQL)f(of)i
(parent)f(are)h(not)f(repeated)h(again.)25 b(The)-152
4466 y(node)f(can)g(no)n(w)g(be)f(bound)i(to)e(an)g(appropriate)h
(table)f(name)h(\(using)g(table)-152 4554 y(renamings)j(if)e
(required\))h(and)h(\002eld)e(using)h(the)g(SQL)e(information)j(from)
-152 4641 y(the)19 b(V)l(ie)n(w)f(T)m(ree.)-77 4728 y(The)31
b(end)h(result)e(of)h(binding)h(a)f(node)h Fi(n)f Fq(is)g(bindings)h
(for)f(all)g(nodes)-152 4815 y(that)c(lie)f(on)h(the)g(path)g(from)g
(the)g(root)f(to)h Fi(n)p Fq(,)h(a)f(v)n(alue)g(association)h(for)f
Fi(n)-152 4902 y Fq(of)c(the)g(form)g Fp(tablename)o(.\002eldname)p
Fq(,)j(a)d(list)f(of)h(tables)g(to)f(be)i(included)g(in)-152
4989 y(the)19 b(FR)m(OM)g(clause,)g(and)g(the)g(implicit)g(constraints)
g(due)h(to)e(tra)o(v)o(ersal.)-152 5182 y Fb(4.4.2)90
b(Gener)o(ating)21 b(the)h(WHERE)g(clause)-77 5290 y
Fq(Recall)14 b(that)g(all)g(e)o(xplicit)h(conditions)g(encountered)h
(during)g(query)f(tra)o(v)o(er)o(-)-152 5378 y(sal)g(are)f(stored)i(in)
e(the)h(QT)m(ree.)22 b(In)14 b(this)h(step,)g(these)g(conditions)h(are)
e(ANDed)p 2040 1463 V 2040 2261 4 799 v 2066 1541 a Fk(SELECT)20
b(drink)o(ers.name,)f(coun)o(t)p Fj(\()2223 1611 y Fk(SELECT)40
b(lik)o(es.b)q(eer)2223 1681 y(FR)o(OM)58 b(lik)o(es)2223
1751 y(WHERE)2301 1820 y(lik)o(es.drink)o(er)38 b Fj(=)20
b Fk(drink)o(ers.name)f(AND)2301 1890 y(lik)o(es.b)q(eer)h(IN)f
Fj(\()2458 1960 y Fk(SELECT)h(lik)o(es.b)q(eer)2458 2029
y(FR)o(OM)58 b(lik)o(es)2458 2099 y(WHERE)20 b(lik)o(es.drink)o(er)f
Fj(=)g Fk(drink)o(ers2.name)p Fj(\)\))2066 2169 y Fk(FR)o(OM)78
b(drink)o(ers,)20 b(drink)o(ers2)2066 2239 y(WHERE)g(drink)o(ers2.name)
f Fj(=)h Fk('Brian')p 4027 2261 V 2040 2264 1991 4 v
2293 2407 a Fl(Figur)o(e)e(17:)23 b(SQL)c(f)n(or)g(the)f(QT)-6
b(r)o(ee)19 b(Q1)h(in)e(Figur)o(e)g(15)2040 2659 y Fq(together)i(along)
f(with)g(the)g(constraints)g(generated)h(in)f(the)g(binding)h(step.)
2115 2746 y(A)15 b(condition)h(is)f(represented)h(in)f(the)g(QT)m(ree)g
(as)g(a)g(boolean)i(tree)e(with)f(e)o(x-)2040 2833 y(pressions)21
b(at)f(lea)o(v)o(es.)28 b(These)20 b(e)o(xpressions)i(are)e(con)m(v)o
(erted)i(to)e(constraints)2040 2920 y(by)f(recursi)n(v)o(ely)h(tra)o(v)
o(ersing)e(the)h(e)o(xpression,)g(and)h(at)e(each)h(step)g(doing)g(the)
2040 3007 y(follo)n(wing:)2040 3094 y(1.)k(Constant)d(e)o(xpression)g
(are)f(used)g(v)o(erbatim.)2040 3182 y(2.)k(Pointer)c(to)g(a)g(QT)m
(ree)f(node)i(is)f(replaced)h(by)f(its)f(binding.)2040
3269 y(3.)25 b(Pointer)19 b(to)h(a)f(QT)m(ree)h(\(i.e.,)e(the)i(e)o
(xpression)h(is)e(a)h(node)g(set\))f(is)h(replaced)2040
3356 y(by)c(a)f(nested)h(SQL)f(query)h(which)g(is)f(generated)h(by)g
(calling)f(the)h(con)m(v)o(ersion)2040 3443 y(process)k(recursi)n(v)o
(ely)g(on)f(the)g(pointed)h(QT)m(ree.)2040 3600 y Fb(4.4.3)90
b(Gener)o(ating)21 b(the)h(SELECT)g(clause)2115 3708
y Fq(The)k(v)n(alues)g(\(columns)h(of)f(some)g(table\))f(bound)j(to)d
(the)h(return)g(nodes)2040 3796 y(form)f(the)g(SELECT)e(part)i(of)g
(the)g(SQL)f(query)-5 b(.)43 b(If)24 b(the)h(return)h(node)g(is)e(a)
2040 3883 y(pointer)c(to)f(a)h(QT)m(ree,)f(it)g(is)g(handled)i(as)f
(mentioned)g(abo)o(v)o(e)h(and)f(the)f(query)2040 3970
y(generated)h(is)f(used)g(as)g(a)g(subquery)-5 b(.)2115
4057 y(Figure)19 b(15)h(sho)n(ws)h(the)e(mapping)i(of)f(three)g(QT)m
(rees)g(in)f(our)h(e)o(xample)g(to)2040 4144 y(SQL)g(after)h(these)h
(steps.)30 b(Figure)21 b(17)h(sho)n(ws)g(the)g(SQL)e(generated)i(by)g
(our)2040 4231 y(algorithm)d(for)g(Q1)g(after)g(these)g(steps.)2040
4389 y Fr(4.5)99 b(Eliminating)26 b(J)o(oin)f(Conditions)h(on)g
(Intersect\255)2264 4485 y(ing)f(P)o(aths)2115 4593 y
Fq(W)-6 b(e)14 b(no)n(w)h(brie\003y)f(e)o(xplain)h(ho)n(w)g(our)g
(choice)g(of)g(a)f(V)l(ie)n(w)g(T)m(ree)g(representation)2040
4680 y(helps)h(in)f(eliminating)h(join)f(conditions.)23
b(F)o(or)14 b(an)o(y)h(tw)o(o)f(paths)h(in)g(the)f(QT)m(ree)h(,)2040
4767 y(nodes)21 b(that)e(lie)g(on)g(both)h(paths)g(must)g(ha)o(v)o(e)f
(the)h(same)g(v)n(alue.)25 b(One)19 b(simple)2040 4855
y(approach)j(w)o(ould)f(be)f(tw)o(o)g(bind)h(the)f(tw)o(o)g(paths)g
(independently)i(and)f(then)2040 4942 y(for)c(each)h(common)g(node)g
(add)f(equality)h(conditions)g(to)f(represent)g(the)g(f)o(act)2040
5029 y(that)26 b(v)n(alues)g(from)g(both)g(paths)g(are)g(the)g(same.)44
b(F)o(or)25 b(e)o(xample,)i(consider)2040 5116 y(a)21
b(v)o(ery)h(simple)f(query)i(that)e(retrie)n(v)o(es)g(all)g(all)f
(drink)o(ers)j(younger)g(than)e(25.)2040 5203 y(Figure)e(18)g(sho)n(ws)
h(the)f(QT)m(ree)g(for)g(this)f(query)-5 b(.)2115 5290
y(If)19 b(we)g(tak)o(e)h(the)f(approach)i(of)e(binding)i(the)e(nodes)h
(independently)-5 b(,)22 b(and)2040 5378 y(then)j(adding)g(the)g(SQL)e
(constraints)i(we)f(will)g(ha)o(v)o(e)g(the)h(follo)n(wing)f(SQL)p
eop
%%Page: 8 8
8 7 bop 467 328 a @beginspecial 0 @llx 0 @lly 296 @urx
188 @ury 576 @rhi @setspecial
%%BeginDocument: p226-jain-q1-2paths.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: q1-2paths.eps
%%Creator: fig2dev Version 3.2 Patchlevel 3c
%%CreationDate: Sat Mar  2 01:19:15 2002
%%For: ratul@krypton.cs.washington.edu (Ratul Mahajan)
%%BoundingBox: 0 0 296 188
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 188 moveto 0 0 lineto 296 0 lineto 296 188 lineto closepath clip newpath
-212.0 328.0 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
%%Page: 1 1
10 setmiterlimit
 0.06000 0.06000 sc
%
% Fig objects follow
%
% Polyline
60.000 slw
n 6150 3075 m 6150 4200 l
 5325 4875 l gs col0 s gr 
% Polyline
n 6150 4200 m
 6825 4875 l gs col0 s gr 
% Polyline
n 3705 2400 m 3600 2400 3600 5295 105 arcto 4 {pop} repeat
  3600 5400 8295 5400 105 arcto 4 {pop} repeat
  8400 5400 8400 2505 105 arcto 4 {pop} repeat
  8400 2400 3705 2400 105 arcto 4 {pop} repeat
 cp gs col0 s gr 
/Helvetica-Bold ff 375.00 scf sf
5400 3000 m
gs 1 -1 sc (drinkers) col0 sh gr
/Helvetica-Bold ff 375.00 scf sf
4575 5100 m
gs 1 -1 sc (age) col0 sh gr
/Helvetica-Bold ff 375.00 scf sf
6900 5100 m
gs 1 -1 sc (#name) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
3900 3975 m
gs 1 -1 sc (Condition:) col0 sh gr
/Helvetica-Bold ff 300.00 scf sf
4500 4275 m
gs 1 -1 sc (age < 25) col0 sh gr
$F2psEnd
rs

%%EndDocument
 @endspecial 6 575 a Fl(Figur)o(e)18 b(18:)24 b(QT)-6
b(r)o(ee)19 b(f)n(or)h Fp(all)e(drink)o(er)o(s)i(with)f(a)o(g)o(e)h
(less)f(than)g(25)-152 823 y Fq(query:)35 958 y Fm(SELECT)39
b(drinkers3.name)35 1033 y(FROM)g(drinkers2,)g(drinkers3)35
1107 y(WHERE)79 b(drinkers2.age)38 b(<)i(25)f(AND)314
1182 y(drinkers2.name)f(=)i(drinkers3.name)-77 1329 y
Fq(In)20 b(our)f(approach)i(ho)n(we)n(v)o(er)g(we)e(\002rst)g(iterate)g
(o)o(v)o(er)h(the)f(common)i(node,)-152 1416 y(which)29
b(is)f(the)g Fi(dr)r(ink)r(er)r(s)g Fq(node,)j(and)e(then)g(add)g(the)g
(conditions.)52 b(This)-152 1504 y(leads)20 b(to)e(a)h(better)g(SQL)f
(query)-5 b(,)19 b(sho)n(wn)h(belo)n(w)-5 b(.)35 1655
y Fm(SELECT)39 b(drinkers.name)35 1730 y(FROM)g(drinkers)35
1805 y(WHERE)g(drinkers.age)f(<)i(25)-77 1969 y Fq(This)14
b(redundant)i(join)f(elimination)f(becomes)i(more)f(important)f(for)h
(com-)-152 2056 y(ple)o(x)21 b(queries,)g(when)g(there)f(are)g(man)o(y)
h(nodes)g(that)g(lie)e(on)i(multiple)f(paths)-152 2143
y(from)f(the)g(root)g(to)g(lea)o(v)o(es.)-152 2343 y
Fr(5.)100 b(OPTIMIZA)-9 b(TIONS)-77 2451 y Fq(Automated)25
b(query)f(generation)h(is)e(susceptible)i(to)e(generating)i(inef)n
(\002-)-152 2538 y(cient)j(queries)f(with)g(redundant)i(joins)e(and)h
(nested)g(queries.)49 b(Our)27 b(opti-)-152 2625 y(mizations)f(unnest)h
(subqueries)g(and)f(eliminate)g(joins)f(that)h(are)f(not)h(nec-)-152
2712 y(essary)-5 b(.)41 b(Most)25 b(\(b)o(ut)f(not)g(all\))g(of)h(the)f
(optimizations)h(described)h(here)f(are)-152 2799 y(general-purpose)19
b(SQL)c(query)i(re)n(writings)f(that)g(could)h(be)g(done)g(by)g(an)f
(op-)-152 2886 y(timizer)l(.)31 b(There)22 b(are)g(three)g(reasons)g
(why)g(we)g(address)g(them)g(here.)32 b(First,)-152 2974
y(these)21 b(optimizations)f(are)g(speci\002c)g(to)g(the)g(kind)g(of)g
(SQL)f(queries)h(that)g(re-)-152 3061 y(sult)15 b(from)g(our)h
(translations,)g(and)f(therefore)h(may)f(be)h(missed)f(by)h(a)f
(general)-152 3148 y(purpose)21 b(optimizer)l(.)i(Second,)d(our)g(e)o
(xperience)g(with)f(one)g(popular)m(,)h(com-)-152 3235
y(mercial)e(database)h(system)f(sho)n(wed)i(that,)d(indeed,)i(the)f
(optimizer)g(did)g(not)-152 3322 y(perform)j Fp(any)f
Fq(of)g(them.)26 b(Finally)-5 b(,)20 b(some)g(of)g(the)g(optimizations)
h(described)-152 3410 y(here)i(do)f(not)g(preserv)o(e)h(semantics)f(in)
g(general.)33 b(The)22 b(semantics)h(are)f(pre-)-152
3497 y(serv)o(ed)f(only)h(in)e(the)h(special)f(conte)o(xt)i(of)e(the)h
(XSL)-7 b(T)19 b(to)h(SQL)g(translation,)-152 3584 y(and)g(hence)g
(cannot)g(be)f(done)h(by)f(a)g(general-purpose)i(optimizer)l(.)-152
3738 y Fr(5.1)99 b(Nested)26 b(IN)f(queries)-77 3846
y Fq(This)20 b(optimization)h(applies)f(to)g(predicate)h(e)o
(xpressions)h(of)e(the)g(form)g Fp(a)-152 3933 y(in)f(b)p
Fq(,)g(where)g Fp(b)f Fq(is)h(a)g(node-set)g(\(subquery\).)25
b(It)18 b(can)h(be)g(applied)h(only)f(when)-152 4020
y(the)e(e)o(xpression)g(is)f(present)g(as)g(a)g(conjunction)i(with)e
(other)g(conditions.)24 b(By)-152 4107 y(def)o(ault)c(our)f(SQL)f
(generation)i(algorithm)g(\(Section)f(4.4\))g(will)f(generate)i(a)-152
4194 y(SQL)15 b(query)i(for)f(the)g(node-set)h Fp(b)p
Fq(.)23 b(This)15 b(optimization)i(w)o(ould)g(unnest)g(such)-152
4282 y(a)k(subquery)-5 b(.)31 b(Whether)21 b(or)g(not)g(the)g(query)h
(can)f(be)g(unnested)i(depends)f(on)-152 4369 y(the)d(properties)h(of)f
(the)g(node-set)h Fi(b)p Fq(.)i(There)d(are)g(three)g(possibilities:)
-58 4533 y(1.)37 b Fa(b)19 b Fl(is)g(a)g(singleton)f(set)35
4650 y Fq(This)h(is)f(the)h(simplest)g(case.)k(One)d(can)f(safely)g
(unnest)h(the)f(query)h(as)35 4737 y(it)k(will)f(not)i(change)g(the)g
(multiplicity)f(of)g(the)g(whole)h(query)-5 b(.)40 b(Fig-)35
4824 y(ure)22 b(19)g(illustrates)f(this)g(case.)31 b(Note)22
b(that)f Fp(astr)m(osign)h Fq(in)g(the)f(XP)o(ath)35
4912 y(e)o(xpression)f(is)f(a)g(node-set.)35 5029 y(T)-6
b(o)28 b(determine)g(if)f(the)g(node-set)i(is)e(a)h(singleton)g(set,)h
(we)f(use)g(the)35 5116 y(follo)n(wing)k(test.)62 b(The)32
b(V)l(ie)n(w)f(T)m(ree)g(has)i(information)f(re)o(garding)35
5203 y(whether)18 b(a)f(node)h(can)g(ha)o(v)o(e)f(multiple)g(v)n(alues)
h(relati)n(v)o(e)f(to)h(its)e(parent)35 5290 y(\(by)g(specifying)h(a)f
(`*'\).)21 b(If)16 b(no)g(node)g(in)g(the)g(QT)m(ree)f(for)h(the)g
(node-set)35 5378 y(has)j(a)f(`*')g(in)g(the)g(XML)g(schema,)h(then)f
(it)g(must)g(be)g(a)g(singleton)h(set.)p 2040 -148 1991
4 v 2040 910 4 1059 v 2066 -97 a Fk(Query:)h(Find)f(name)g(of)40
b(drink)o(ers)19 b(whic)o(h)h(are)g('Leo')2066 -27 y(XP)o(ath:)g
(/drink)o(ers['Leo')g Fj(==)f Fk(astrosign])2066 112
y(Unoptimized:)2105 182 y(SELECT)40 b(drink)o(ers.name,)2105
252 y(FR)o(OM)98 b(drink)o(ers)2105 321 y(WHERE)20 b('Leo')h(in)e
Fj(\()p Fk(SELECT)h(astrosign.sign)2419 391 y(FR)o(OM)58
b(astrosign)2419 461 y(WHERE)20 b(astrosign.drink)o(er)h
Fj(=)e Fk(drink)o(ers.name)p Fj(\))2066 600 y Fk(Optimized:)2105
670 y(SELECT)40 b(drink)o(ers.name,)2105 740 y(FR)o(OM)98
b(drink)o(ers,)19 b(astrosign)2105 809 y(WHERE)h('Leo')h
Fj(=)39 b Fk(astrosign.sign)20 b(AND)2281 879 y(astrosign.drink)o(er)h
Fj(=)f Fk(drink)o(ers.name)p 4027 910 V 2040 913 1991
4 v 2125 1056 a Fl(Figur)o(e)e(19:)24 b(Unnesting)17
b(subquery)h(r)o(epr)o(esenting)f(singleton)i(set)p 2040
1174 V 2040 2224 4 1051 v 2066 1225 a Fk(Query:)h(The)f(sub)q(query)i
(Q2)e(in)h(Figure)g(15)2066 1365 y(Unoptimized:)2105
1435 y(SELECT)40 b(lik)o(es.b)q(eer)2105 1504 y(FR)o(OM)78
b(lik)o(es)2105 1574 y(WHERE)20 b(lik)o(es.drink)o(er)f
Fj(=)g Fk(drink)o(ers.name)2321 1644 y(lik)o(es.b)q(eer)h(IN)e
Fj(\()p Fk(SELECT)j(lik)o(es.b)q(eer)2732 1713 y(FR)o(OM)59
b(lik)o(es)2732 1783 y(WHERE)21 b(lik)o(es.drink)o(er)p
Fj(=)d Fk(drink)o(ers2.name)p Fj(\))2066 1853 y Fk(Optimized:)2105
1923 y(SELECT)40 b(lik)o(es.b)q(eer)2105 1992 y(FR)o(OM)78
b(lik)o(es,)18 b(lik)o(es2)2105 2062 y(WHERE)i(lik)o(es.drink)o(er)f
Fj(=)g Fk(drink)o(ers.name)39 b(AND)2321 2132 y(lik)o(es.b)q(eer)20
b Fj(=)f Fk(lik)o(es2.b)q(eer)40 b(AND)2321 2202 y(lik)o(es.drink)o(er)
18 b Fj(=)i Fk(drink)o(ers2.name)p 4027 2224 V 2040 2227
1991 4 v 2203 2370 a Fl(Figur)o(e)e(20:)24 b(Unnesting)18
b(subquery)f(ha)n(ving)i(no)g(duplicates)2133 2626 y
Fq(2.)38 b Fa(b)19 b Fl(has)g(no)f(duplicates)2227 2752
y Fq(If)j(the)h(subquery)h(has)f(no)g(duplicates,)g(the)g(query)g(will)
f(e)n(v)n(aluate)h(to)2227 2839 y(`true')e(at)g(most)h(once)g(for)f
(all)g(the)h(v)n(alues)g(in)f(the)h(set)f Fp(b)p Fq(.)28
b(Hence)21 b(one)2227 2926 y(can)k(unnest)g(the)g(query)g(without)g
(changing)h(multiplicity)-5 b(.)40 b(Figure)2227 3013
y(20)30 b(illustrates)f(this)h(case,)i(for)e(the)g(e)o(xample)g(query)h
(used)g(in)e(the)2227 3100 y(pre)n(vious)20 b(section.)2227
3226 y(T)-6 b(o)26 b(determine)i(if)e(the)g(node-set)i(has)f(no)g
(duplicates,)i(we)d(use)h(the)2227 3313 y(follo)n(wing)19
b(test.)j(If)c(the)h(QT)m(ree)g(for)f(the)h(nodeset)g(has)g(no)g(node)h
(with)2227 3400 y(a)27 b(`*')h(e)o(xcept)g(at)f(the)h(leaf)f(node,)k
(then)d(it)f(is)g(a)g(distinct)h(set.)48 b(The)2227 3487
y(intuition)22 b(is)g(that)g(the)g(siblings)h(nodes)g(\(with)f(the)g
(same)h(parent\))f(in)2227 3575 y(the)d(document)h(are)e(unique.)24
b(So)19 b(if)f(there)g(is)g(a)h(`*')f(at)h(an)g(edge)g(other)2227
3662 y(than)k(the)h(leaf)e(edge,)j(uniqueness)g(of)e(the)g(lea)o(v)o
(es)g(returned)h(by)f(the)2227 3749 y(query)d(is)e(not)h(guaranteed.)
2133 3913 y(3.)38 b Fa(b)19 b Fl(can)g(ha)n(v)o(e)g(duplicates)2227
4038 y Fq(When)f(a)f(node-set)i(can)f(ha)o(v)o(e)g(duplicates)h(for)e
(e)o(xample,)i(//beers,)e(as)2227 4125 y(discussed)25
b(in)e(Section)g(2.1,)i(unnesting)g(the)e(query)h(might)g(change)2227
4212 y(the)f(semantics.)36 b(This)23 b(is)f(because)j(the)e
(multiplicity)f(of)h(the)g(resul-)2227 4300 y(tant)16
b(query)h(will)e(change)j(if)d(the)h(condition)i Fp(a)e(in)g(b)g
Fq(e)n(v)n(aluates)h(to)f Fp(true)2227 4387 y Fq(more)j(than)g(once.)24
b(W)-6 b(e)19 b(do)g(not)g(unnest)h(such)g(a)f(query)-5
b(.)2040 4563 y Fr(5.2)99 b(Unnesting)26 b(Aggr)n(egate)f(Operators)g
(Using)2264 4659 y(GR)m(OUP\255BY)2115 4767 y Fq(This)h(optimization)h
(unnests)g(a)f(subquery)i(that)f(uses)g(aggre)o(gation)g(by)2040
4855 y(using)e(GR)m(OUP-BY)d(at)i(the)g(outer)g(le)n(v)o(el.)39
b(The)24 b(optimization)g(is)g(applied)2040 4942 y(for)f(e)o
(xpressions)h(of)f(the)g(form)g Fp(op)h(b)p Fq(,)g(where)f
Fp(b)g Fq(is)g(a)g(node-set,)i(and)e Fp(op)h Fq(is)2040
5029 y(an)g(aggre)o(gate)g(operator)f(lik)o(e)h Fp(sum,)g(min,)g(max,)g
(count,)h(avg)p Fq(.)36 b(The)23 b(obser)o(-)2040 5116
y(v)n(ation)e(is)f(that)g(the)h(nested)f(query)i(is)e(e)n(v)n(aluated)h
(once)g(for)g(e)n(v)o(ery)g(iteration)2040 5203 y(of)g(outer)h(query)-5
b(.)31 b(W)-6 b(e)21 b(get)g(the)g(same)h(semantics)g(if)e(we)h(unnest)
h(the)g(query)-5 b(,)2040 5290 y(and)24 b(GR)m(OUP-BY)e(on)i(all)f
(iterations)h(of)f(outer)h(query)-5 b(.)37 b(T)-6 b(o)24
b(GR)m(OUP-BY)2040 5378 y(on)e(all)f(iterations)g(of)h(outer)f(query)i
(we)e(add)h(k)o(e)o(ys)h(of)e(all)g(the)g(tables)h(in)f(the)p
eop
%%Page: 9 9
9 8 bop -152 -148 1991 4 v -152 979 4 1128 v -126 -98
a Fk(Query:)20 b(Q1)f(in)h(Figure)g(15.)-126 -28 y(Q2)g
Fj(\()p Fk(used)f(b)q(elo)o(w)p Fj(\))h Fk(is)f(the)i(optimized)e(v)o
(ersion)h(sho)o(wn)f(in)g(Figure)i(20)-126 111 y(Unoptimized)e(SQL)h
(for)h(Q1:)-67 181 y(SELECT)f(drink)o(ers.name,)f(coun)o(t)p
Fj(\()p Fk(Q2)p Fj(\))-67 251 y Fk(FR)o(OM)58 b(drink)o(ers,)20
b(drink)o(ers2)-67 321 y(WHERE)g(drink)o(ers2.name)f
Fj(=)h Fk('Brian')-126 460 y(Optimized)f(SQL)h(for)g(Q1:)-67
530 y(SELECT)40 b(drink)o(ers.name,)19 b(coun)o(t)p Fj(\()p
Fk(lik)o(es2.drink)o(er)p Fj(\))-67 600 y Fk(FR)o(OM)58
b(drink)o(ers,)20 b(drink)o(ers2,)g(lik)o(es,)e(lik)o(es2)-67
669 y(WHERE)i(drink)o(ers2.name)f Fj(=)h Fk('Brian')109
739 y(lik)o(es.drink)o(er)f Fj(=)g Fk(drink)o(ers.name)39
b(AND)109 809 y(lik)o(es.b)q(eer)20 b Fj(=)g Fk(lik)o(es2.b)q(eer)g
(AND)109 879 y(lik)o(es.drink)o(er)f Fj(=)g Fk(drink)o(ers2.name)-67
948 y(GR)o(OUP)g(BY)39 b(drink)o(ers.name,)18 b(drink)o(ers2.name)p
1835 979 V -152 982 1991 4 v 60 1125 a Fl(Figur)o(e)g(21:)23
b(Illustrating)18 b(GR)n(OUP-BY)g(Optimization)-152 1382
y Fq(from)23 b(clause)g(of)f(outer)h(query)g(to)g(the)f(GR)m(OUP-BY)f
(clause.)35 b(The)22 b(aggre-)-152 1469 y(gate)30 b(condition)h(is)f
(mo)o(v)o(ed)h(into)f(the)g(HA)-10 b(VING)29 b(clause.)57
b(In)30 b(SQL,)f(the)-152 1556 y(GR)m(OUP-BY)22 b(clause)h(must)g(ha)o
(v)o(e)g(all)f(the)h(\002elds)g(which)g(are)g(selected)g(by)-152
1643 y(the)d(query)-5 b(.)24 b(Hence)c(all)f(the)g(\002elds)g(in)g
(SELECT)d(clause)k(are)f(also)g(added)i(to)-152 1730
y(the)e(GR)m(OUP-BY)f(clause.)-77 1818 y(If)h(the)g(outer)g(query)h
(already)g(uses)f(GR)m(OUP-BY)f(then)i(the)f(abo)o(v)o(e)h(opti-)-152
1905 y(mization)f(can)g(not)f(be)h(applied.)k(This)18
b(also)g(implies)g(that)g(for)h(a)f(QT)m(ree)g(this)-152
1992 y(optimization)f(can)g(be)g(used)h(only)f(once.)23
b(In)16 b(our)h(implementation)h(we)e(tak)o(e)-152 2079
y(the)25 b(simple)f(choice)i(of)e(applying)i(the)e(optimization)h(the)g
(v)o(ery)g(\002rst)e(time)-152 2166 y(we)c(can.)-77 2253
y(Figure)h(21)g(illustrates)f(this)h(case,)g(for)f(the)h(e)o(xample)h
(query)f(used)h(in)f(the)-152 2341 y(pre)n(vious)g(section.)-152
2503 y Fr(5.3)99 b(QT)-7 b(r)n(ee)26 b(Reductions)-77
2611 y Fq(In)c(this)g(optimization,)i(we)e(transform)g(the)h(QT)m(ree)f
(itself.)32 b(Long)23 b(paths)-152 2698 y(with)j(unreferenced)i
(intermediate)e(nodes)h(are)f(shortened,)j(as)d(sho)n(wn)h(in)-152
2786 y(Figure)g(22.)47 b(This)26 b(helps)h(in)g(eliminating)g(some)g
(redundant)h(joins.)47 b(The)-152 2873 y(optimization)27
b(is)f(done)h(during)g(the)f(binding)h(phase.)45 b(Before)26
b(binding)i(a)-152 2960 y(node,)c(we)f(check)o(ed)h(to)e(see)h(if)f(a)g
(short-cut)h(path)g(from)f(root)h(to)f(that)h(node)-152
3047 y(e)o(xists.)38 b(A)23 b(short-cut)h(path)h(is)e(possible)i(if)e
(no)h(intermediate)g(node)h(in)f(the)-152 3134 y(path)j(is)f(referred)g
(to)g(by)h(an)o(y)g(other)f(part)g(of)g(the)h(QT)m(ree)f(e)o(xcept)h
(the)f(im-)-152 3222 y(mediate)e(child)g(and)g(parent)g(of)g(that)f
(node)h(on)g(that)g(path.)37 b(If)23 b(a)h(condition)-152
3309 y(is)e(referring)g(to)f(an)h(intermediate)g(node)h(or)f(if)f(an)h
(intermediate)g(node)h(has)-152 3396 y(more)e(than)g(one)h(child,)f(it)
f(is)g(incorrect)h(to)f(create)h(a)g(short-cut)g(path.)29
b(Also)-152 3483 y(the)d(V)l(ie)n(w)f(T)m(ree)h(must)f(specify)i(that)e
(such)h(a)g(short-cut)g(is)f(possible,)j(and)-152 3570
y(what)21 b(rules)g(to)f(use)h(to)g(bind)g(the)g(node)g(if)f(a)h
(short-cut)g(is)f(tak)o(en.)29 b(Once)22 b(the)-152 3657
y(edge)29 b(has)g(been)g(shortened)g(and)g(nodes)g(bound,)i(rest)d(of)g
(the)g(algorithm)-152 3745 y(proceeds)21 b(as)d(before.)-77
3832 y(W)-6 b(e)23 b(observ)o(ed)i(that)f(this)g(optimization)g(also)g
(helps)g(in)g(making)h(the)e(\002-)-152 3919 y(nal)32
b(SQL)e(query)j(less)e(sensiti)n(v)o(e)h(to)f(input)h(schema.)62
b(F)o(or)31 b(e)o(xample,)k(if)-152 4006 y(our)20 b Fn
(beers/drinkers/bars)c Fq(schema)k(had)g(\223beers\224)g(as)f(a)g(top)h
(le)n(v)o(el)-152 4093 y(node,)26 b(instead)e(of)g(being)g(as)g(a)f
(child)h(node)h(of)f(Drink)o(ers,)g(then)h(the)e(same)-152
4180 y(query)18 b(w)o(ould)f(had)h(been)f(obtained)h(without)f(the)g
(reduction)g(optimization.)-152 4398 y Fr(6.)100 b(EXPERIMENTS)-77
4506 y Fq(In)15 b(this)g(section)h(we)f(try)g(to)g(understand)h(ho)n(w)
g(well)f(our)g(algorithm)h(trans-)-152 4593 y(lates)g(XSL)-7
b(T)15 b(queries)h(to)g(SQL)f(queries.)23 b(W)-6 b(e)15
b(implemented)i(our)f(algorithm)-152 4680 y(in)k(Ja)o(v)n(a)h(using)g
(the)f(Ja)o(v)n(aCC)g(parser)h([11].)27 b(Ev)n(aluation)21
b(is)e(done)j(using)f(the)-152 4767 y(TPC-H)h(benchmark)k([6])d
(queries.)37 b(W)-6 b(e)23 b(manually)i(translate)e(the)h(bench-)-152
4855 y(mark)19 b(SQL)d(queries)j(to)f(XSL)-7 b(T)h(,)16
b(and)j(then)f(generating)h(SQL)e(queries)i(from)-152
4942 y(the)28 b(XSL)-7 b(T)27 b(queries)i(using)g(our)f(algorithm.)51
b(In)28 b(the)g(process)h(we)f(try)g(to)-152 5029 y(gauge)21
b(the)f(strengths)h(and)f(limitations)g(of)g(our)g(algorithm,)g(study)h
(the)f(im-)-152 5116 y(pact)15 b(of)g(optimizations)h(described)g(in)e
(Section)h(5,)g(and)h(observ)o(e)g(the)f(ef)n(fects)-152
5203 y(of)k(semantic)h(dif)n(ferences)f(between)h(XSL)-7
b(T)18 b(and)h(SQL.)-77 5290 y(The)29 b(TPC-H)e(benchmark)j(is)e
(established)i(by)f(the)g(T)m(ransaction)g(Pro-)-152
5378 y(cessing)19 b(Council)f(\(TPC\).)e(It)h(is)g(an)h
(industry-standard)h(Decision)f(Support)2151 748 y @beginspecial
0 @llx 0 @lly 313 @urx 159 @ury 1080 @rhi @setspecial
%%BeginDocument: p226-jain-q3.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: F:\courses\db\2project\paper\figures\q3.eps
%%CreationDate: () ()
%%BoundingBox: 0 0 313 159
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 313 159
%AI3_TileBox: 0 0 313 159
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

0 To
1.0000 0.0000 0.0000 1.0000 66.9431 143.7592 0 Tp
TP
104.939271 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
 [] 0 d
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
(QTree\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 183.2508 143.7592 0 Tp
TP
104.939271 Tz
/_Helvetica-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
(QTree after reduction\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 64.5351 116.7893 0 Tp
TP
136.421053 Tz
/_Courier-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(root\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 196.2542 44.5485 0 Tp
TP
136.421053 Tz
/_Courier-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(beers\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 56.5886 80.6689 0 Tp
TP
136.421053 Tz
/_Courier-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(drinkers\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 196.2542 10.8361 0 Tp
TP
136.421053 Tz
/_Courier-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(#name\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 199.3846 116.7893 0 Tp
TP
136.421053 Tz
/_Courier-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(root\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 61.1639 44.5485 0 Tp
TP
136.421053 Tz
/_Courier-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(beers\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 61.1639 8.6689 0 Tp
TP
136.421053 Tz
/_Courier-Bold 10.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(#name\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
1.0000 w
  0.000 0.000 0.000 1.000 K
1 J
1 j
  77.5385 111.7324 m
  77.5385 93.6722 L
S
U
u
  77.5385 75.6120 m
  77.5385 57.5518 L
S
U
u
  77.5385 39.7324 m
  77.5385 21.6722 L
S
U
u
  194.5686 107.3980 m
  195.0502 107.1572 L
S
U
u
  195.0502 107.1572 m
  195.2910 106.9164 L
S
U
u
  195.2910 106.9164 m
  195.0502 106.6756 L
S
U
u
  195.0502 106.6756 m
  195.0502 106.1940 L
S
U
u
  195.0502 106.1940 m
  194.5686 105.9532 L
S
U
u
  194.5686 105.9532 m
  193.8462 105.4716 L
S
U
u
  193.8462 105.4716 m
  192.8829 104.7492 L
S
U
u
  192.8829 104.7492 m
  191.6789 104.2676 L
S
U
u
  191.6789 104.2676 m
  190.7157 103.5452 L
S
U
u
  190.7157 103.5452 m
  189.5117 103.0635 L
S
U
u
  189.5117 103.0635 m
  188.5485 102.3411 L
S
U
u
  183.9732 98.7291 m
  183.4916 98.2475 L
S
U
u
  183.4916 98.2475 m
  183.0100 97.7659 L
S
U
u
  179.3980 92.9498 m
  178.6756 91.9866 L
S
U
u
  178.6756 91.9866 m
  177.9532 90.5418 L
S
U
u
  177.9532 90.5418 m
  177.2308 88.6154 L
S
U
u
  177.2308 88.6154 m
  176.7492 86.9298 L
S
U
u
  176.7492 86.9298 m
  176.5084 85.2441 L
S
U
u
  176.5084 85.2441 m
  176.2676 84.0401 L
S
U
u
  177.2308 78.0201 m
  177.7124 76.8161 L
S
U
u
  177.2308 78.0201 m
  177.7124 76.8161 L
S
U
u
  181.0836 71.7592 m
  182.2876 70.3144 L
S
U
u
  182.2876 70.3144 m
  183.7324 68.8696 L
S
U
u
  183.7324 68.8696 m
  185.1773 67.1839 L
S
U
u
  185.1773 67.1839 m
  186.8629 65.4983 L
S
U
u
  186.8629 65.4983 m
  187.5853 64.7759 L
S
U
u
  191.9197 60.4415 m
  192.8829 59.4783 L
S
U
u
  212.3880 39.7324 m
  212.3880 21.6722 L
S
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
 @endspecial 2140 995 a Fl(Figur)o(e)g(22:)24 b(QT)-6
b(r)o(ee)19 b(Reduction)f(f)n(or)h(query)g Fn(//beers/name)p
Fl(.)2040 1232 y Fq(test)k(designed)i(to)e(measure)h(systems)g
(capability)f(to)h(e)o(xamine)g(lar)o(ge)f(v)o(ol-)2040
1319 y(umes)h(of)g(data)g(and)g(e)o(x)o(ecute)h(queries)f(with)f(a)h
(high)g(de)o(gree)h(of)f(comple)o(x-)2040 1406 y(ity)-5
b(.)27 b(It)20 b(consists)g(of)g(22)h(b)o(usiness)g(oriented)g(ad-hoc)g
(queries.)28 b(The)20 b(queries)2040 1493 y(hea)o(vily)27
b(use)g(aggre)o(gation)h(and)g(other)f(sophisticated)h(features)f(of)g
(SQL.)2040 1580 y(The)k(TPC-H)f(speci\002cation)i(points)f(out)h(that)f
(these)g(queries)h(are)f(more)2040 1668 y(comple)o(x)20
b(than)f(typical)g(queries.)2115 1755 y(Out)f(of)h(the)f(22)i(queries,)
e(5)h(require)g(creation)g(of)g(an)g(intermediate)f(table)2040
1842 y(follo)n(wed)k(by)g(aggre)o(gation)h(on)f(its)f(\002elds.)31
b(The)22 b(equi)n(v)n(alent)h(XSL)-7 b(T)20 b(trans-)2040
1929 y(lation)k(w)o(ould)g(require)g(writing)f(tw)o(o)g(XSL)-7
b(T)22 b(programs,)k(the)d(second)i(one)2040 2016 y(using)19
b(the)f(results)f(of)h(\002rst.)k(While)17 b(this)h(is)f(possible)i(in)
e(our)i(frame)n(w)o(ork)f(as)2040 2103 y(described)26
b(in)g(Section)f(4,)h(our)g(current)f(implementation)i(only)e(supports)
2040 2191 y(parameters)18 b(that)f(are)h(bound)h(to)e(fragments)h(of)f
(the)h(input)f(tree,)g(or)h(to)f(com-)2040 2278 y(puted)29
b(atomic)g(v)n(alues.)53 b(It)28 b(does)h(not)g(support)h(parameters)f
(bound)h(to)e(a)2040 2365 y(constructed)21 b(tree.)i(F)o(or)c(such)h
(queries)f(we)h(translated)f(the)g(SQL)f(query)j(for)2040
2452 y(the)j(intermediate)g(table,)h(which)f(in)g(most)g(cases)g(w)o
(as)g(the)g(major)g(part)f(of)2040 2539 y(the)17 b(o)o(v)o(erall)f
(query)-5 b(,)17 b(to)g(XSL)-7 b(T)h(.)15 b(Another)i(modi\002cation)g
(we)f(made)h(w)o(as)g(that)2040 2626 y(aggre)o(gates)f(on)g(multiple)g
(\002elds)f(lik)o(e)h Fp(sum\(a*b\))g Fq(were)g(tak)o(en)g(as)g(aggre)o
(gate)2040 2714 y(on)j(a)g(single)h(ne)n(w)f(\002eld)f
Fp(sum\(c\))p Fq(.)2115 2801 y(Ov)o(erall,)25 b(our)f(algorithm)h
(generated)g(ef)n(\002cient)f(SQL)f(queries)h(in)g(most)2040
2888 y(cases,)32 b(some)d(of)g(which)g(were)g(quite)g(comple)o(x.)54
b(A)28 b(detailed)h(table)g(de-)2040 2975 y(scribing)20
b(the)g(result)g(of)g(translation)g(for)g(indi)n(vidual)g(queries)h(is)
e(presented)2040 3062 y(in)g(Appendix)h(A.)j(W)-6 b(e)18
b(present)i(a)f(summary)h(of)f(results)f(here.)2133 3212
y(1.)38 b(10)23 b(Queries)g(with)g(at)f(most)h(single)g(aggre)o(gation)
h(at)f(an)o(y)g(le)n(v)o(el)g(and)2227 3300 y(non-leaf)18
b(group-by)h(were)f(con)m(v)o(erted)h(to)e(TPC-H)f(lik)o(e)i(\(same)f
(nest-)2227 3387 y(ing)i(structure,)g(same)g(number)h(of)f(joins\))g
(queries.)2133 3528 y(2.)38 b(In)21 b(3)g(queries,)g(the)g(only)h
(reason)f(for)g(inef)n(\002cienc)o(y)g(w)o(as)g(e)o(xtra)g(joins)2227
3615 y(because)16 b(of)e(the)h(GR)m(OUP-BY)e(semantic)h(mismatch)h
(between)g(XSL)-7 b(T)2227 3703 y(and)19 b(SQL,)f(as)h(discussed)h
(belo)n(w)-5 b(.)2133 3844 y(3.)38 b(1)14 b(query)i(w)o(as)e(inef)n
(\002cient)h(because)g(of)g(GR)m(OUP-BY)e(semantic)i(mis-)2227
3931 y(match)k(and)h(presence)g(of)f(a)g(nested)g(IN)g(query)-5
b(.)2133 4073 y(4.)38 b(1)22 b(query)h(used)g(CASE)e(statement)h(in)g
(SQL)f(select.)33 b(W)-6 b(e)21 b(generated)2227 4160
y(a)e(UNION)f(of)h(tw)o(o)g(independent)i(SQL)d(queries.)2133
4301 y(5.)38 b(2)18 b(queries)g(required)h(aggre)o(gation)g(on)f(the)g
(XSL)-7 b(T)16 b(output)j(for)e(trans-)2227 4389 y(lation,)22
b(This)f(is)g(not)h(fully)g(supported)h(by)f(our)g(current)g(implemen-)
2227 4476 y(tation)d(b)o(ut)f(a)h(hand)h(generation)g(led)f(to)g
(similar)f(SQL)g(queries.)2133 4617 y(6.)38 b(5)19 b(queries)g
(required)g(temporary)h(tables)e(as)h(mentioned)h(abo)o(v)o(e.)k(W)-6
b(e)2227 4705 y(observ)o(ed)20 b(that)f(we)f(were)h(able)g(to)g(con)m
(v)o(ert)g(the)g(XSL)-7 b(T)17 b(for)i(the)g(tem-)2227
4792 y(porary)h(tables)f(to)f(ef)n(\002cient)h(SQL.)2115
4942 y(Man)o(y)g(queries)f(that)g(were)g(not)g(translated)h(as)f(ef)n
(\002ciently)g(as)g(their)f(orig-)2040 5029 y(inal)g(SQL)g(v)o(ersion)h
(required)g(grouping)h(by)f(intermediate)g(output.)24
b(This)17 b(is)2040 5116 y(not)22 b(an)h(artif)o(act)f(of)g(our)g
(translation)g(algorithm,)h(b)o(ut)f(due)h(to)f(a)g(language-)2040
5203 y(le)n(v)o(el)32 b(mismatch)h(between)g(XSL)-7 b(T)31
b(and)i(SQL.)e(An)i(XSL)-7 b(T)31 b(query)i(with)2040
5290 y(identical)21 b(result)f(cannot)h(be)g(written)e(for)i(these)f
(queries.)28 b(W)m(ith)20 b(appropri-)2040 5378 y(ate)k(e)o(xtensions)i
(to)e(XSL)-7 b(T)24 b(to)g(support)h(GR)m(OUP-BY)-10
b(,)23 b(one)j(can)f(generate)p eop
%%Page: 10 10
10 9 bop -152 -69 a Fq(queries)21 b(with)f(identical)g(results.)27
b(It)19 b(is)h(no)h(coincidence)h(that)e(this)g(issue)g(is)-152
19 y(mentioned)g(in)f(the)g(future)g(requirements)h(draft)f(for)g(XSL)
-7 b(T)17 b([12].)-152 172 y Fr(6.1)99 b(Utility)25 b(of)f
(Optimizations)-77 280 y Fq(In)f(this)f(section,)h(we)g(describe)g(the)
f(utility)g(of)h(each)g(of)g(the)f(three)h(opti-)-152
367 y(mizations,)c(mentioned)h(in)f(Section)g(5,)g(in)g(obtaining)h(ef)
n(\002cient)e(queries.)-58 530 y(1.)37 b Fp(Unnesting)24
b(IN)e(subqueries)i(\(Section)f(5.1\):)30 b Fq(4)23 b(queries)g
(bene\002tted)35 617 y(from)f(this)f(optimization.)31
b(All)21 b(of)h(those)g(were)f(the)h(case)f(when)i(the)35
704 y(node-set)d(had)g(multiple)e(b)o(ut)h(distinct)g(v)n(alues.)-58
851 y(2.)37 b Fp(Unnesting)24 b(a)o(g)o(gr)m(e)m(gations)i(\(Section)d
(5.2\):)32 b Fq(21)23 b(queries)h(had)f(some)35 938 y(form)c(of)g
(aggre)o(gation,)h(for)e(which)i(this)e(optimization)i(w)o(as)f
(useful.)-58 1085 y(3.)37 b Fp(QT)l(r)m(ee)31 b(r)m(eduction)i
(\(Section)e(5.3\):)48 b Fq(F)o(or)31 b(13)g(queries,)k(QT)m(ree)c(re-)
35 1172 y(duction)22 b(w)o(as)f(useful.)30 b(This)20
b(optimization)i(w)o(as)f(frequent)g(because)35 1259
y(man)o(y)e(queries)f(w)o(ould)h(be)f(related)g(to)g(a)g(node)h(deep)g
(in)f(the)g(schema,)35 1347 y(without)g(placing)g(a)g(condition)g(on)g
(the)g(parent)g(nodes.)24 b(W)m(ith)17 b(QT)m(ree)35
1434 y(reduction,)24 b(ef)n(\002cient)e(queries)g(can)h(be)f(generated)
i(independent)g(of)35 1521 y(the)19 b(XML)g(schema.)-152
1720 y Fr(7.)100 b(RELA)-9 b(TED)26 b(W)o(ORK)-77 1828
y Fq(SilkRoute)d([10,)i(8])f(is)f(an)h(XML)f(publishing)i(system)f
(that)f(de\002nes)h(an)-152 1915 y(XML)i(vie)n(w)h(o)o(v)o(er)f(a)g
(relational)g(database,)j(then)d(accepts)h(XML-QL)f([7])-152
2002 y(queries)32 b(o)o(v)o(er)g(the)g(vie)n(w)g(and)g(translates)g
(them)f(into)h(SQL.)e(The)i(XML)-152 2089 y(vie)n(w)17
b(is)f(de\002ned)h(by)g(a)f(V)l(ie)n(w)g(T)m(ree,)g(an)h(abstraction)g
(that)f(we)g(borro)n(wed)i(for)-152 2177 y(our)g(translation.)k(Both)c
(XML-QL)e(and)i(SQL)e(are)h(declarati)n(v)o(e)g(languages,)-152
2264 y(which)26 b(mak)o(es)g(the)f(translation)h(some)n(what)g(simpler)
f(than)h(for)f(XSL)-7 b(T)h(.)24 b(A)-152 2351 y(translation)k(from)g
(XQuery)g(to)g(SQL)f(is)g(described)i(in)f([14])g(and)g(uses)h(a)-152
2438 y(dif)n(ferent)17 b(approach)h(based)f(on)g(an)g(intermediate)f
(representation)i(of)e(SQL.)-77 2525 y(A)h(generic)h(technique)h(for)e
(processing)i(structurally)e(recursi)n(v)o(e)h(queries)-152
2612 y(in)24 b Fp(b)o(ulk)g Fq(mode)h(is)e(described)i(in)f([1].)38
b(Instead)25 b(of)e(using)i(a)f(generic)g(tech-)-152
2700 y(nique,)i(we)e(le)n(v)o(eraged)h(the)f(information)h(present)f
(in)g(the)g(XML)g(schema.)-152 2787 y(This)i(elimination)h(is)e
(related)i(to)f(the)g Fp(query)h(pruning)h Fq(described)f(in)f([9].)
-152 2874 y(SQL)20 b(query)h(block)h(unnesting)g(for)e(an)h
(intermediate)g(language)h(has)f(been)-152 2961 y(discussed)f(in)f
([13])g(in)g(the)g(conte)o(xt)h(of)f(the)g(Starb)o(urst)f(system.)-152
3160 y Fr(8.)100 b(CONCLUSIONS)-77 3268 y Fq(W)-6 b(e)20
b(ha)o(v)o(e)h(described)h(an)f(algorithm)g(that)f(translates)h(XSL)-7
b(T)19 b(into)i(SQL.)-152 3355 y(By)27 b(necessity)g(our)g(system)g
(only)g(applies)g(to)f(a)h(fragment)g(of)f(XSL)-7 b(T)26
b(for)-152 3442 y(which)j(the)f(translation)g(is)g(possible.)51
b(The)28 b(full)g(language)h(can)g(e)o(xpress)-152 3530
y(programs)f(which)f(ha)o(v)o(e)g(no)g(SQL)f(equi)n(v)n(alent:)40
b(in)26 b(such)i(cases)f(the)f(pro-)-152 3617 y(gram)j(needs)h(to)e(be)
h(split)f(into)h(smaller)f(pieces)h(that)f(can)h(be)g(translated)-152
3704 y(into)19 b(SQL.)-77 3791 y(Our)28 b(translation)g(is)g(based)g
(on)h(a)f(representation)h(of)f(the)g(XSL)-7 b(T)26 b(pro-)-152
3878 y(gram)19 b(as)g(a)f Fp(query)i(tr)m(ee)p Fq(,)e(which)h(encodes)h
(all)f(possible)g(na)o(vigations)g(of)g(the)-152 3966
y(program)27 b(through)f(the)g(XML)f(tree.)43 b(W)-6
b(e)25 b(described)h(a)g(number)g(of)g(opti-)-152 4053
y(mization)d(techniques)i(that)d(greatly)h(impro)o(v)o(e)h(the)f
(quality)g(of)g(the)g(gener)o(-)-152 4140 y(ated)d(SQL)d(queries.)24
b(W)-6 b(e)19 b(also)g(v)n(alidated)h(our)f(system)g(e)o(xperimentally)
h(on)-152 4227 y(the)f(TPC-H)f(benchmark.)-152 4426 y
Fr(Ackno)o(wledgments)-152 4546 y Fq(W)-6 b(e)18 b(are)g(thankful)i(to)
e(Jayant)h(Madha)o(v)n(an)h(and)f(Pradeep)g(Sheno)o(y)g(for)f(help-)
-152 4634 y(ful)h(discussions)h(and)g(feedback)g(on)f(the)g(paper)l(.)
-77 4721 y(Dan)j(Suciu)g(w)o(as)h(partially)e(supported)j(by)e(the)g
(NSF)f(CAREER)g(Grant)-152 4808 y(0092955,)28 b(a)d(gift)f(from)h
(Microsoft,)h(and)g(an)f(Alfred)f(P)-8 b(.)23 b(Sloan)i(Research)-152
4895 y(Fello)n(wship.)-152 5094 y Fr(9.)100 b(REFERENCES)-114
5203 y Fq([1])37 b(P)-8 b(.)18 b(Buneman,)i(M.)e(Fernandez,)i(and)f(D.)
g(Suciu.)f(Unql:)24 b(A)18 b(query)10 5290 y(language)j(and)e(algebra)h
(for)f(semistructured)g(data)g(based)h(on)10 5378 y(structural)f
(recursion.)g Fp(VLDB)f(J)n(ournal)p Fq(,)i(9\(1\):76\226110,)h(2000.)
2077 -69 y([2])38 b(M.)18 b(Care)o(y)-5 b(,)18 b(D.)g(Florescu,)g(Z.)g
(Iv)o(es,)g(Y)-10 b(.)18 b(Lu,)g(J.)f(Shanmugasundaram,)2202
19 y(E.)h(Shekita,)g(and)i(S.)e(subramanian.)i(XPERANT)o(O:)d
(publishing)2202 106 y(object-relational)i(data)g(as)g(XML.)g(In)g
Fp(Pr)m(oceedings)h(of)e(W)-7 b(ebDB)p Fq(,)2202 193
y(Dallas,)18 b(TX,)g(May)i(2000.)2077 288 y([3])38 b(D.)18
b(Chamberlin,)h(J.)g(Clark,)f(D.)h(Florescu,)f(J.)h(Robie,)g(J.)f
(Simon,)g(and)2202 376 y(M.)h(Stef)o(anescu.)g(XQuery)g(1.0:)24
b(An)19 b(XML)f(Query)i(LanguageXML)2202 463 y(P)o(ath)e(Language)j
(\(XP)o(ath\).)c(T)-5 b(echnical)20 b(report,)e(W3C,)g(June)i(2001.)
2077 558 y([4])38 b(A.)18 b(Chandra)i(and)g(P)-8 b(.)17
b(Merlin.)i(Optimal)g(implementation)g(of)2202 645 y(conjuncti)n(v)o(e)
h(queries)g(in)f(relational)f(data)i(bases.)f(In)g Fp(Pr)m(oceedings)
2202 733 y(of)g(9th)g(A)n(CM)f(Symposium)i(on)g(Thoery)f(of)g
(Computing)p Fq(,)g(pages)2202 820 y(77\22690,)h(Boulder)m(,)f
(Colorado,)h(May)f(1977.)2077 915 y([5])38 b(J.)18 b(Clark)h(and)h(S.)e
(DeRose.)g(XML)h(P)o(ath)g(Language)h(\(XP)o(ath\).)2202
1002 y(T)-5 b(echnical)19 b(report,)g(W3C,)f(No)o(v)o(ember)i(1999.)
2077 1098 y([6])38 b(T)-6 b(.)18 b(P)-8 b(.)18 b(Council.)h(TPC)f
(Benchmark)i(H)f(\(Decision)g(Support\).)2202 1185 y(T)-5
b(echnical)19 b(report,)g(June)g(1999.)2077 1280 y([7])38
b(A.)18 b(Deutsch,)h(M.)g(Fernandez,)h(D.)e(Florescu,)h(A.)f(Le)n(vy)-5
b(,)19 b(and)2202 1368 y(D.)f(Suciu.)h(A)f(query)i(language)h(for)d
(XML.)h(In)g Fp(8th)g(International)2202 1455 y(W)-7
b(orld)20 b(W)l(ide)f(W)-7 b(eb)19 b(Confer)m(ence)i(\(WWW\))p
Fq(,)d(May)i(1999.)2077 1550 y([8])38 b(M.)19 b(Fernandez,)g(A.)g
(Morishima,)g(and)g(D.)g(Suciu.)f(Ef)n(\002cient)2202
1637 y(e)n(v)n(aluation)i(of)f(XML)g(middle-w)o(are)g(queries.)h(In)e
Fp(Pr)m(oceedings)i(of)2202 1725 y(A)n(CM)e(SIGMOD)h(Confer)m(ence)h
(on)g(Mana)o(g)o(ement)h(of)e(Data)p Fq(,)g(Santa)2202
1812 y(Barbara,)g(2001.)2077 1907 y([9])38 b(M.)19 b(Fernandez)h(and)f
(D.)f(Suciu.)h(Optimizing)g(re)o(gular)g(path)2202 1994
y(e)o(xpressions)h(using)g(graph)g(schemas.)f(In)g Fp(Pr)m(oceedings)h
(of)f(the)2202 2082 y(International)h(Confer)m(ence)g(on)g(Data)f
(Engineering)p Fq(,)h(pages)2202 2169 y(14\22623,)g(1998.)2040
2264 y([10])38 b(M.)19 b(F)-6 b(.)18 b(Fernandez,)h(W)-7
b(.)18 b(C.)g(T)-6 b(an,)19 b(and)h(D.)e(Suciu.)g(SilkRoute:)2202
2351 y(T)m(rading)i(Between)f(Relations)g(and)g(XML.)g(In)g
Fp(9th)g(International)2202 2439 y(W)-7 b(orld)20 b(W)l(ide)f(W)-7
b(eb)19 b(Confer)m(ence)i(\(WWW\))p Fq(,)d(May)i(2000.)2040
2534 y([11])38 b(Ja)o(v)n(a)19 b(Compiler)g(Compiler)g(\(Ja)o(v)n
(aCC\))g(-)f(The)h(Ja)o(v)n(a)g(P)o(arser)2202 2621 y(Generator.)2202
2708 y Fn(http://www.webgain.com/products/java_cc)o(/)p
Fq(,)2202 2796 y(2002.)2040 2891 y([12])38 b(S.)18 b(Muench)i(and)g(M.)
f(Scardina.)g(XSL)-7 b(T)17 b(Requirements.)j(T)-5 b(echnical)2202
2978 y(report,)19 b(W3C,)f(February)h(2001.)2040 3074
y([13])38 b(H.)18 b(Pirahesh,)h(J.)f(M.)h(Hellerstein,)f(and)i(W)-7
b(.)18 b(Hasan.)h(Extensible)2202 3161 y(rule-based)h(query)g(re)n
(write)e(optimization)i(in)e(Starb)o(urst.)g Fp(SIGMOD)2202
3248 y(Recor)m(d)p Fq(,)h(21\(2\):39\22648,)i(June)f(1992.)2040
3344 y([14])38 b(J.)18 b(Shanmugasundaram,)j(,)e(J.)f(Kiernana,)h(E.)f
(Shekita,)h(C.)f(F)o(an,)g(and)2202 3431 y(J.)g(Funderb)o(urk.)i
(Querying)g(XML)e(vie)n(ws)i(of)f(relational)f(data.)h(In)2202
3518 y Fp(Pr)m(oceedings)h(of)f(VLDB)p Fq(,)e(pages)j(261\226270,)g
(Rome,)f(Italy)-5 b(,)2202 3605 y(September)19 b(2001.)2040
3701 y([15])38 b(J.)18 b(Shanmugasundaram,)j(E.)d(Shekita,)h(R.)f(Barr)
m(,)g(M.)h(Care)o(y)-5 b(,)2202 3788 y(B.)18 b(Lindsay)-5
b(,)19 b(H.)g(Pirahesh,)f(and)i(B.)e(Reinw)o(ald.)h(Ef)n(\002ciently)
2202 3875 y(publishing)h(relational)f(data)g(as)g(xml)g(documents.)h
(In)f Fp(Pr)m(oceedings)2202 3962 y(of)g(VLDB)p Fq(,)e(pages)j
(65\22676,)g(Cairo,)e(Egipt,)h(September)g(2000.)2040
4058 y([16])38 b(D.)18 b(Suciu.)h(On)g(database)h(theory)f(and)h(xml.)f
Fp(SIGMOD)g(Recr)m(od)p Fq(,)2202 4145 y(30\(3\),)g(2001.)2040
4240 y([17])38 b(J.)18 b(Ullman)h(and)h(J.)e(W)m(idom.)h
Fp(A)f(F)m(ir)o(st)g(Cour)o(se)i(in)f(Database)2202 4327
y(Systems)p Fq(.)g(Prentice-Hall,)f(1997.)p eop
%%Page: 11 11
11 10 bop -152 -69 a Fr(APPENDIX)-152 81 y(A.)100 b(DET)-9
b(AILED)26 b(RESUL)-9 b(TS)27 b(FOR)d(TPC\255H)h(Q)o(UERIES)p
-152 196 3808 4 v -154 283 4 88 v -74 257 a Fq(Id)p 65
283 V 123 w(Description)p 1336 283 V 923 w(Q)p 1489 283
V 100 w(From)p 1741 283 V 89 w(Ops)p 2096 283 V 236 w(Prbs)p
2383 283 V 154 w(Comments)p 3654 283 V -152 287 3808
4 v -152 302 V -154 476 4 175 v -88 363 a(Q1)p 65 476
V 108 w(Pricing)h(summary)h(report;)i(computes)e(ag-)111
450 y(gre)o(gates)20 b(for)e(man)o(y)i(output)g(\002elds)p
1336 476 V 1382 363 a Fc(\002)p 1489 476 V 94 w Fq(\(1,-\))p
1741 476 V 120 w(G,)f(TR)p 2096 476 V 168 w(Gl,)f(Ot)p
2383 476 V 100 w(One)27 b(nested)i(query)f(is)g(generated)g(per)g(ag-)
2430 450 y(gre)o(gation;)19 b(we)g(unnest)g(only)h(one)p
3654 476 V -152 479 3808 4 v -154 654 4 175 v -88 540
a(Q2)p 65 654 V 108 w(Minimum)k(cost)g(supplier;)h(subquery)g(with)111
627 y(min)19 b(aggre)o(gate)h(operator)p 1336 654 V 1382
487 a Fc(p)p 1489 654 V 1536 540 a Fq(\(9,9\))p 1741
654 V 108 w(G)f(IN)p 2096 654 V 204 w(-)p 2383 654 V
262 w(-)p 3654 654 V -152 657 3808 4 v -154 744 4 88
v -88 718 a(Q3)p 65 744 V 108 w(Shipping)h(priority;)f(aggre)o(gation)p
1336 744 V 1382 665 a Fc(p)p 1489 744 V 1536 718 a Fq(\(3,3\))p
1741 744 V 108 w(G)p 2096 744 V 302 w(-)p 2383 744 V
262 w(-)p 3654 744 V -152 747 3808 4 v -154 922 4 175
v -88 808 a(Q4)p 65 922 V 108 w(Order)j(priority)f(checking;)j
(subquery)f(with)111 896 y Fi(exists)p 1336 922 V 1382
808 a Fc(\002)p 1489 922 V 94 w Fq(\(2,5\))p 1741 922
V 108 w(TR)p 2096 922 V 260 w(GL)p 2383 922 V 187 w(Extra)18
b(joins)h(due)h(to)e(GL)p 3654 922 V -152 925 3808 4
v -154 1012 4 88 v -88 986 a(Q5)p 65 1012 V 108 w(Local)h(supplier)h(v)
o(olume;)f(aggre)o(gation)p 1336 1012 V 1382 933 a Fc(p)p
1489 1012 V 1536 986 a Fq(\(6,6\))p 1741 1012 V 108 w(G)g(IN)p
2096 1012 V 204 w(-)p 2383 1012 V 262 w(-)p 3654 1012
V -152 1016 3808 4 v -154 1190 4 175 v -88 1077 a(Q6)p
65 1190 V 108 w(F)o(orecasting)34 b(re)n(v)o(enue)h(change;)43
b(aggre)o(ga-)111 1164 y(tion)p 1336 1190 V 1382 1024
a Fc(p)p 1489 1190 V 1536 1077 a Fq(\(1,3\))p 1741 1190
V 108 w(TR)p 2096 1190 V 260 w(-)p 2383 1190 V 262 w(-)p
3654 1190 V -152 1193 3808 4 v -154 1368 4 175 v -88
1254 a(Q7)p 65 1368 V 108 w(V)-10 b(olume)40 b(shipping;)49
b(requires)38 b(temporary)111 1341 y(table)p 1336 1368
V 1382 1201 a Fc(p)p 1489 1368 V 1536 1254 a Fq(\(6,6\))p
1741 1368 V 108 w(G)19 b(IN)p 2096 1368 V 204 w(Ot)p
2383 1368 V 212 w(Only)c(the)g(SQL)f(query)i(for)f(temporary)h(table)
2430 1341 y(w)o(as)j(translated)p 3654 1368 V -152 1371
3808 4 v -154 1545 4 175 v -88 1432 a(Q8)p 65 1545 V
108 w(National)j(mark)o(et)g(share;)h(requires)f(tempo-)111
1519 y(rary)d(table)p 1336 1545 V 1382 1379 a Fc(p)p
1489 1545 V 1536 1432 a Fq(\(8,8\))p 1741 1545 V 108
w(G)p 2096 1545 V 302 w(Ot)p 2383 1545 V 212 w(Only)c(the)g(SQL)f
(query)i(for)f(temporary)h(table)2430 1519 y(w)o(as)j(translated)p
3654 1545 V -152 1549 3808 4 v -154 1723 4 175 v -88
1610 a(Q9)p 65 1723 V 108 w(Returned)26 b(item)f(reporting;)j(requires)
e(tem-)111 1697 y(porary)20 b(table)p 1336 1723 V 1382
1557 a Fc(p)p 1489 1723 V 1536 1610 a Fq(\(6,6\))p 1741
1723 V 108 w(G)p 2096 1723 V 302 w(Ot)p 2383 1723 V 212
w(Only)15 b(the)g(SQL)f(query)i(for)f(temporary)h(table)2430
1697 y(w)o(as)j(translated)p 3654 1723 V -152 1726 3808
4 v -154 1901 4 175 v -107 1787 a(Q11)p 65 1901 V 90
w(Important)39 b(stock)f(identi\002cation;)48 b(nested)111
1874 y(subquery)21 b(in)e Fi(g)s(r)r(oup)d Fc(\000)h
Fi(by)p 1336 1901 V 1382 1787 a Fc(\002)p 1489 1901 V
94 w Fq(\(6,7\))p 1741 1901 V 108 w(G)p 2096 1901 V 302
w(Gl)p 2383 1901 V 3654 1901 V -152 1904 3808 4 v -154
2078 4 175 v -107 1965 a(Q12)p 65 2078 V 90 w(Shipping)g(modes)f(and)g
(order)g(priority;)g(case)111 2052 y(statement)p 1336
2078 V 1382 1965 a Fc(\002)p 1489 2078 V 94 w Fq(\(2,5\))p
1741 2078 V 108 w(GL)j(TR)p 2096 2078 V 141 w(Ot)p 2383
2078 V 212 w(Wrote)h(tw)o(o)i(XSL)-7 b(T)20 b(programs)i(which)g(gen-)
2430 2052 y(erated)d(tw)o(o)g(queries)p 3654 2078 V -152
2082 3808 4 v -154 2343 4 262 v -107 2143 a(Q13)p 65
2343 V 90 w(Customer)h(distrib)o(ution;)e(temporary)i(table.)p
1336 2343 V 1382 2090 a Fc(p)p 1489 2343 V 1536 2143
a Fq(\(1,1\))p 1741 2343 V 108 w(TR)f(G)p 2096 2343 V
187 w(Ot)p 2383 2343 V 212 w(Comple)o(x)i(aggre)o(gation)i(on)e(the)h
(temporary)2430 2230 y(table;)34 b(only)c(the)g(SQL)e(query)j(for)e
(tempo-)2430 2317 y(rary)19 b(table)f(w)o(as)i(translated)p
3654 2343 V -152 2346 3808 4 v -154 2521 4 175 v -107
2407 a(Q14)p 65 2521 V 90 w(Promotion)j(ef)n(fect;)g(aggre)o(gation)g
(and)g(case)111 2495 y(statement)p 1336 2521 V 1382 2407
a Fc(\002)p 1489 2521 V 94 w Fq(\(2,5\))p 1741 2521 V
108 w(G)c(TR)p 2096 2521 V 187 w(NI)f(Ot)p 2383 2521
V 3654 2521 V -152 2524 3808 4 v -154 2611 4 88 v -107
2585 a(Q15)p 65 2611 V 90 w(T)-6 b(op)20 b(supplier)f(query;)h
(temporary)f(T)-6 b(able.)p 1336 2611 V 1382 2532 a Fc(p)p
1489 2611 V 1536 2585 a Fq(\(1,1\))p 1741 2611 V 108
w(TR)p 2096 2611 V 260 w(Ot)p 2383 2611 V 212 w(Results)18
b(for)h(temporary)h(table)p 3654 2611 V -152 2615 3808
4 v -154 2789 4 175 v -107 2676 a(Q16)p 65 2789 V 90
w(P)o(arts-supplier)h(relationship;)h(aggre)o(gation)111
2763 y(and)e Fi(notin)g Fq(in)e(the)h(subquery)-5 b(.)p
1336 2789 V 1382 2676 a Fc(\002)p 1489 2789 V 94 w Fq(\(2,6\))p
1741 2789 V 108 w(G)19 b(TR)p 2096 2789 V 187 w(GL)f(NI)p
2383 2789 V 90 w(The)26 b(generated)i(SQL)e(has)h(dif)n(ferent)g(nest-)
2430 2763 y(ing)19 b(structure.)p 3654 2789 V -152 2792
3808 4 v -154 2967 4 175 v -107 2853 a(Q17)p 65 2967
V 90 w(Small-quantity-order)49 b(re)n(v)o(enue;)63 b(aggre-)111
2940 y(gates)19 b(the)g(output)h(of)f(a)g(comple)o(x)h(query)-5
b(.)p 1336 2967 V 1382 2853 a Fc(\002)p 1489 2967 V 94
w Fq(\(3,6\))p 1741 2967 V 108 w(G)19 b(T)m(r)p 2096
2967 V 215 w(NI)f(Ot)p 2383 2967 V 115 w(Need)31 b(aggre)o(gation)g(on)
g(the)g(output)g(of)g(an)2430 2940 y(XSL)-7 b(T)17 b(pr)o(goram)p
3654 2967 V -152 2970 3808 4 v -154 3144 4 175 v -107
3031 a(Q18)p 65 3144 V 90 w(Lar)o(ge)25 b(v)o(olume)g(customers;)j
(nested)d(query)111 3118 y(has)20 b Fi(g)s(r)r(oup)c
Fc(\000)h Fi(by)k(hav)s(ing)p 1336 3144 V 1382 3031 a
Fc(\002)p 1489 3144 V 94 w Fq(\(4,5\))p 1741 3144 V 108
w(G)e(IN)g(TR)p 2096 3144 V 89 w(Gl)p 2383 3144 V 212
w(Generated)31 b(query)h(w)o(as)f(similar)f(in)h(struc-)2430
3118 y(ture.)p 3654 3144 V -152 3148 3808 4 v -154 3235
4 88 v -107 3209 a(Q19)p 65 3235 V 90 w(Discounted)21
b(re)n(v)o(enue)p 1336 3235 V 1382 3156 a Fc(p)p 1489
3235 V 1536 3209 a Fq(\(2,2\))p 1741 3235 V 108 w(G)e(TR)p
2096 3235 V 187 w(-)p 2383 3235 V 262 w(-)p 3654 3235
V -152 3238 3808 4 v -154 3325 4 88 v -107 3299 a(Q20)p
65 3325 V 90 w(Potential)g(part)g(promotion)p 1336 3325
V 1382 3246 a Fc(p)p 1489 3325 V 1536 3299 a Fq(\(5,5\))p
1741 3325 V 108 w(TR)p 2096 3325 V 260 w(-)p 2383 3325
V 262 w(Dif)n(ferent)f(nesting)i(structure)p 3654 3325
V -152 3329 3808 4 v -154 3503 4 175 v -107 3390 a(Q21)p
65 3503 V 90 w(Suppliers)h(who)f(k)o(ept)h(orders)g(w)o(aiting;)f(tw)o
(o)111 3477 y(nested)g(subqueries)g(and)g(aggre)o(gation)p
1336 3503 V 1382 3337 a Fc(p)p 1489 3503 V 1536 3390
a Fq(\(6,6\))p 1741 3503 V 108 w(TR)f(G)p 2096 3503 V
187 w(-)p 2383 3503 V 3654 3503 V -152 3506 3808 4 v
-154 3681 4 175 v -107 3567 a(Q22)p 65 3681 V 90 w(Global)h(sales)g
(opportunity;)g(temporary)h(ta-)111 3654 y(ble)p 1336
3681 V 1382 3514 a Fc(p)p 1489 3681 V 1536 3567 a Fq(\(3,3\))p
1741 3681 V 108 w(G)p 2096 3681 V 302 w(-)p 2383 3681
V 262 w(-)p 3654 3681 V -152 3684 3808 4 v -152 3827
a Fl(T)-7 b(able)25 b(1:)35 b(Analysis)25 b(of)g(TPC-H)f(Queries.)41
b Fa(Id)25 b Fl(is)g(the)f(TPC-H)g(query)h(number)-7
b(.)39 b Fa(Description)25 b Fl(explains)f(what)h(the)f(query)h(does,)h
(and)e(any)h(special)-152 3915 y(r)o(equir)o(ement)15
b(of)i(query)-5 b(.)21 b Fa(Q)16 b Fl(is)g(the)g(quality)f(of)i
(translation;)1522 3862 y Fc(p)1619 3915 y Fl(denotes)e(that)h(the)g
(generated)h(query)f(was)g(optimal)g(\(similar)g(to)h(the)e(TPC-H)h(v)o
(ersion\))-152 4002 y(and)22 b Fc(\002)44 b Fl(indicates)21
b(otherwise.)34 b Fa(F)l(rom)22 b Fl(is)g(the)g(number)f(of)i(tables)f
(accessed)h(by)f(the)f(TPC-H)h(query)l(,)g(and)g(the)g(number)f(of)h
(tables)g(accessed)h(by)f(the)-152 4089 y(generated)d(query)-5
b(.)22 b Fa(Ops)d Fl(lists)f(the)g(optimizations)g(applied)f(during)g
(translation.)23 b Fi(I)6 b(N)26 b Fl(stands)18 b(f)n(or)g(unnesting)f
(IN,)h Fi(G)h Fl(f)n(or)f(unnesting)f(aggr)o(egate,)j(and)-152
4176 y Fi(T)11 b(R)16 b Fl(f)n(or)g(QT)-6 b(r)o(ee)16
b(r)o(eduction.)k Fa(Prbs)c Fl(explains)f(wh)o(y)g(the)g(generated)g
(query)g(was)h(not)f(optimal)g(\226)h Fi(GL)g Fl(f)n(or)g(semantic)f
(gr)o(oup-by)g(mismatch)h(as)f(mentioned)-152 4263 y(in)j(Section)g(6,)
h Fi(N)8 b(I)25 b Fl(when)18 b(ther)o(e)g(is)g(a)h(nested)g(IN)f(query)
l(,)g Fi(O)r(T)30 b Fl(f)n(or)19 b(other)g(r)o(easons)g(lik)o(e)f(use)h
(of)g(SQL)f(case)h(statement)g(and)f(multiple)g(aggr)o(egations.)p
eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
